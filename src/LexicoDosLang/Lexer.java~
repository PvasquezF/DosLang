/* The following code was generated by JFlex 1.6.1 */

package LexicoDosLang;
import java_cup.runtime.*;
import SintacticoDosLang.sym;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;
import doslang.DosLang;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\67\1\70\1\1\22\0\1\3\1\0\1\65"+
    "\2\0\1\62\1\0\1\66\1\7\1\11\1\10\1\52\1\60\1\53"+
    "\1\5\1\54\1\73\11\4\1\50\1\55\1\63\1\51\1\64\1\72"+
    "\1\0\1\23\1\27\1\25\1\32\1\20\1\37\1\21\1\26\1\15"+
    "\1\6\1\45\1\24\1\41\1\16\1\30\1\36\1\47\1\22\1\34"+
    "\1\17\1\42\1\43\1\31\1\46\1\35\1\40\1\56\1\71\1\57"+
    "\1\61\1\6\1\0\1\23\1\27\1\25\1\32\1\20\1\37\1\21"+
    "\1\26\1\15\1\6\1\45\1\24\1\41\1\16\1\30\1\36\1\47"+
    "\1\22\1\34\1\17\1\42\1\43\1\31\1\46\1\35\1\40\1\12"+
    "\1\0\1\13\7\0\1\67\53\0\1\6\21\0\1\6\154\0\2\14"+
    "\115\0\1\33\u1e98\0\1\6\17\0\1\67\1\67\u0100\0\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\14\5\1\1\6\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\31\1\32\1\33"+
    "\1\34\1\35\2\36\1\37\1\40\1\0\1\41\2\0"+
    "\1\42\1\0\1\43\1\5\1\43\1\0\5\5\1\44"+
    "\20\5\1\45\1\46\1\0\4\5\1\47\2\0\11\5"+
    "\1\0\2\5\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\2\0\1\5"+
    "\2\74\1\5\1\75\1\76\4\5\1\77\1\0\1\5"+
    "\1\0\7\5\1\100\1\5\1\0\3\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\2\0\5\5"+
    "\1\101\3\5\1\0\1\5\1\102\1\0\1\5\1\103"+
    "\1\5\1\104\1\105\1\5\1\106\2\107\2\110\2\5"+
    "\1\111\1\112\4\5\1\0\3\5\2\113\1\114\1\5"+
    "\1\0\1\5\1\0\3\5\2\115\1\0\1\5\1\0"+
    "\1\5\1\116\1\5\2\0\4\5\1\117\1\0\3\5"+
    "\1\0\1\5\2\120\1\0\10\5\1\121\1\0\2\5"+
    "\1\0\2\5\1\0\1\5\2\122\2\123\2\124\1\5"+
    "\2\125\2\126\1\5\2\0\4\5\2\127\2\5\2\130"+
    "\1\0\3\5\2\131\1\5\1\132\1\5\1\133\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\1\5\1\134\1\135\1\136\1\135\1\136\2\5\1\0"+
    "\1\5\1\137\2\140\1\141\3\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\142\1\0\1\5\1\143\2\144"+
    "\1\145\1\5\1\0\4\5\1\0\1\5\1\0\1\5"+
    "\2\146\2\147\1\5\2\150\2\5\1\151\1\0\1\5"+
    "\1\0\1\5\1\152\1\5\1\153\1\0\1\5\1\0"+
    "\2\5\2\154\2\155\1\5\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\264\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\264\0\264\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\u0744\0\u0780\0\264\0\264"+
    "\0\264\0\u07bc\0\264\0\264\0\u07f8\0\264\0\264\0\u0834"+
    "\0\264\0\264\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u021c\0\264"+
    "\0\u0960\0\264\0\u099c\0\u01a4\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u01a4\0\u01a4\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\u08ac\0\264\0\u13ec\0\u1428\0\u1464"+
    "\0\264\0\u01a4\0\u14a0\0\u01a4\0\u01a4\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u01a4\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u01a4\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c"+
    "\0\u01a4\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u01a4\0\u1fa4"+
    "\0\u1fe0\0\u01a4\0\u201c\0\u01a4\0\u01a4\0\u2058\0\u01a4\0\264"+
    "\0\u01a4\0\264\0\u01a4\0\u2094\0\u20d0\0\u01a4\0\u01a4\0\u210c"+
    "\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\264"+
    "\0\u01a4\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\264\0\u01a4\0\u24cc\0\u2508\0\u2544\0\u2580\0\u01a4"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u01a4"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\264\0\u01a4"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u01a4\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\264\0\u01a4\0\264\0\u01a4\0\264\0\u01a4"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\264\0\u01a4\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\264\0\u01a4\0\u2f1c\0\u2f58"+
    "\0\264\0\u01a4\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\264\0\u01a4"+
    "\0\u3084\0\u01a4\0\u30c0\0\u01a4\0\u30fc\0\u3138\0\u3174\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390"+
    "\0\u01a4\0\264\0\264\0\u01a4\0\u01a4\0\u33cc\0\u3408\0\u3444"+
    "\0\u3480\0\u01a4\0\264\0\u01a4\0\u01a4\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u01a4\0\u36d8"+
    "\0\u3714\0\u01a4\0\264\0\u01a4\0\u01a4\0\u3750\0\u378c\0\u37c8"+
    "\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\264"+
    "\0\u01a4\0\264\0\u01a4\0\u39a8\0\264\0\u01a4\0\u39e4\0\u3a20"+
    "\0\u01a4\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u01a4\0\u3b4c\0\u01a4"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\264\0\u01a4\0\264"+
    "\0\u01a4\0\u3cb4\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\11\1\23\1\24\1\25\1\26\1\11\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\11\1\35\1\36\1\11"+
    "\1\37\1\40\1\41\1\4\3\11\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\0\1\6\2\4\1\7"+
    "\1\61\1\62\1\63\62\61\1\64\1\61\2\0\1\65"+
    "\1\66\1\61\1\67\1\70\1\71\63\67\1\72\2\0"+
    "\1\73\2\67\76\0\1\6\75\0\1\7\1\74\65\0"+
    "\1\7\5\0\1\75\72\0\1\11\1\0\1\11\6\0"+
    "\16\11\1\0\10\11\1\0\3\11\23\0\1\11\10\0"+
    "\1\76\63\0\13\77\1\100\60\77\16\0\1\101\20\0"+
    "\1\102\40\0\1\11\1\0\1\11\6\0\1\11\1\103"+
    "\14\11\1\0\3\11\1\104\4\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\5\0\1\105\1\106"+
    "\5\11\1\107\4\11\1\110\2\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\5\11\1\111\3\11\1\112\1\11\1\113\2\11\1\0"+
    "\1\11\1\114\6\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\1\11\1\115\5\11\1\116"+
    "\6\11\1\0\10\11\1\0\1\11\1\117\1\120\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\3\11\1\121"+
    "\12\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\1\11\1\122\3\11\1\123"+
    "\10\11\1\0\5\11\1\124\2\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\13\11\1\125"+
    "\2\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\6\11\1\126\2\11\1\127"+
    "\1\11\1\130\2\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\3\11\1\131"+
    "\1\11\1\132\5\11\1\133\2\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\5\11\1\134\10\11\1\0\3\11\1\135\4\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\5\0"+
    "\1\136\1\137\4\11\1\140\3\11\1\141\1\11\1\142"+
    "\2\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\13\11\1\143\2\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\14\0\2\144\1\0"+
    "\1\145\60\0\1\11\1\0\1\11\5\0\1\144\1\146"+
    "\1\11\1\147\13\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\5\11\1\150"+
    "\10\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\5\11\1\151\1\152\4\11"+
    "\1\153\2\11\1\0\6\11\1\154\1\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\6\11"+
    "\1\155\7\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\1\11\1\156\14\11"+
    "\1\157\1\160\7\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\6\11\1\161\7\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\51\0\1\162\73\0"+
    "\1\163\12\0\1\164\60\0\1\165\24\0\1\63\107\0"+
    "\1\166\1\167\2\0\1\170\1\171\3\0\1\172\7\0"+
    "\1\173\3\0\1\174\21\0\1\175\1\176\4\0\1\177"+
    "\2\0\1\71\107\0\1\200\1\201\2\0\1\202\42\0"+
    "\1\203\12\0\1\204\66\0\1\204\5\0\1\205\66\0"+
    "\10\76\1\206\63\76\17\0\1\207\60\0\1\11\1\0"+
    "\1\11\6\0\2\11\1\210\13\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\24\0\1\211\53\0\1\11\1\0"+
    "\1\11\6\0\7\11\1\212\6\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\213\14\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\2\11\1\214"+
    "\2\11\1\215\10\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\16\11\1\0"+
    "\6\11\1\216\1\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\3\11\1\217\12\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\10\11\1\220\5\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\16\11\1\0\2\11\1\221\5\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\15\11\1\222"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\16\11\1\223\1\224\7\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\5\0"+
    "\1\225\1\226\15\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\16\11\1\0"+
    "\6\11\1\227\1\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\3\11\1\230\2\11\1\231"+
    "\1\11\1\232\4\11\1\233\1\0\2\11\1\234\5\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\15\11\1\235\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\5\11\1\236"+
    "\10\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\237\1\240\5\11\1\241"+
    "\7\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\1\11\1\242\14\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\16\11\1\243\1\244\7\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\6\11"+
    "\1\245\7\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\1\11\1\246\14\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\4\11\1\247\11\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\3\11\1\250\12\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\13\11"+
    "\1\251\2\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\17\0\1\252\60\0\1\11\1\0\1\11\6\0\2\11"+
    "\1\253\13\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\5\0\1\254\1\255\15\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\5\0\1\256\1\257\15\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\5\11\1\260\10\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\14\11"+
    "\1\261\1\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\40\0\1\262\55\0\1\263\55\0\1\11\1\0\1\11"+
    "\6\0\16\11\1\0\4\11\1\264\3\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\5\11"+
    "\1\265\10\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\13\11\1\266\2\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\3\11\1\267\12\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\7\11\1\270\6\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\5\11"+
    "\1\271\10\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\1\11\1\272\14\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\7\11\1\273\6\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\2\11\1\274\13\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\20\0\1\275\57\0\1\11\1\0\1\11"+
    "\6\0\3\11\1\276\12\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\5\11"+
    "\1\277\10\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\10\76\1\206\1\100\62\76\20\0\1\300\57\0\1\11"+
    "\1\0\1\11\6\0\3\11\1\301\12\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\15\11\1\302\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\1\11\1\303"+
    "\1\11\1\304\12\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\1\11\1\305"+
    "\14\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\11\11\1\306\4\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\3\11\1\307\12\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\20\0\1\310\57\0\1\11\1\0"+
    "\1\11\6\0\3\11\1\311\12\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\17\0\1\312\60\0\1\11\1\0"+
    "\1\11\6\0\2\11\1\313\13\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\6\11\1\314\7\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\16\11\1\0"+
    "\5\11\1\315\2\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\7\11\1\316\5\11\1\317"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\13\11\1\320\2\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\13\11\1\321\2\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\3\11"+
    "\1\322\12\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\6\11\1\323\7\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\16\0\1\324"+
    "\61\0\1\11\1\0\1\11\6\0\1\11\1\325\14\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\16\11\1\0\1\11\1\326\6\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\4\11\1\327\11\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\20\0\1\330\57\0\1\11\1\0\1\11"+
    "\6\0\3\11\1\331\12\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\5\11"+
    "\1\332\10\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\2\11\1\333\13\11"+
    "\1\334\1\335\7\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\336\1\337\15\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\6\11\1\340\7\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\7\11\1\341\6\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\26\0\1\342\51\0\1\11\1\0\1\11\6\0"+
    "\11\11\1\343\4\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\17\0\1\344\60\0\1\11\1\0\1\11\6\0"+
    "\2\11\1\345\13\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\24\0\1\346\53\0\1\11\1\0\1\11\6\0"+
    "\7\11\1\347\6\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\15\11\1\350"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\1\11\1\351\14\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\20\0\1\352\67\0\2\353"+
    "\62\0\1\11\1\0\1\11\6\0\3\11\1\354\12\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\5\0\1\353\1\355\15\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\4\11\1\356\3\11\1\357\5\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\3\11\1\360\12\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\16\11"+
    "\1\361\1\362\7\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\10\11\1\363\5\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\7\11\1\364\6\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\5\0"+
    "\1\365\1\366\15\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\33\0\2\367\43\0\1\11\1\0\1\11\6\0"+
    "\16\11\1\367\1\370\7\11\1\0\3\11\23\0\1\11"+
    "\21\0\1\371\56\0\1\11\1\0\1\11\6\0\4\11"+
    "\1\372\11\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\10\11\1\373\5\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\6\11\1\374\7\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\7\11\1\375\6\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\16\11"+
    "\1\0\2\11\1\376\5\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\5\11\1\377\10\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\1\11\1\u0100\14\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\6\11\1\u0101\7\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\16\11"+
    "\1\0\1\11\1\u0102\6\11\1\0\3\11\23\0\1\11"+
    "\42\0\1\u0103\35\0\1\11\1\0\1\11\6\0\16\11"+
    "\1\0\6\11\1\u0104\1\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\16\11\1\0\6\11"+
    "\1\u0105\1\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\5\0\1\u0106\1\u0107\15\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\2\11\1\u0108\13\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\5\0\1\u0109"+
    "\1\u010a\15\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\17\0\1\u010b\60\0\1\11\1\0\1\11\6\0\2\11"+
    "\1\u010c\13\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\16\0\1\u010d\61\0\1\11\1\0\1\11\6\0\1\11"+
    "\1\u010e\14\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\16\11\1\0\10\11"+
    "\1\u010f\1\u0110\2\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\3\11\1\u0111\12\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\20\0\1\u0112\57\0\1\11\1\0"+
    "\1\11\6\0\3\11\1\u0113\12\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\20\0\1\u0114\57\0\1\11\1\0"+
    "\1\11\6\0\3\11\1\u0115\12\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\2\11\1\u0116\13\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\30\0\1\u0117\61\0\1\u0118\61\0\1\11\1\0"+
    "\1\11\6\0\13\11\1\u0119\2\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\u011a\14\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\5\11\1\u011b"+
    "\10\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\3\11\1\u011c\12\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\20\0\1\u011d\57\0"+
    "\1\11\1\0\1\11\6\0\3\11\1\u011e\12\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\2\11\1\u011f\13\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\13\11\1\u0120\2\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\24\0\1\u0121\53\0\1\11\1\0\1\11\6\0"+
    "\7\11\1\u0122\6\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\20\0\1\u0123\57\0\1\11\1\0\1\11\6\0"+
    "\3\11\1\u0124\12\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\6\11\1\u0125"+
    "\7\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\5\11\1\u0126\10\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\16\11\1\u0127\1\u0128\7\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\7\11"+
    "\1\u0129\6\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\15\11\1\u012a\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\15\11\1\u012b\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\2\11"+
    "\1\u012c\13\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\33\0\2\u012d\43\0\1\11\1\0\1\11\6\0\16\11"+
    "\1\u012d\1\u012e\7\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\16\11\1\u012f\1\u0130\7\11"+
    "\1\0\3\11\23\0\1\11\17\0\1\u0131\60\0\1\11"+
    "\1\0\1\11\6\0\2\11\1\u0132\13\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\3\11\1\u0133\12\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\16\0\1\u0134\61\0\1\11\1\0\1\11"+
    "\6\0\1\11\1\u0135\14\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\6\11"+
    "\1\u0136\7\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\24\0\1\u0137\53\0\1\11\1\0\1\11\6\0\7\11"+
    "\1\u0138\6\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\13\11\1\u0139\2\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\37\0\1\u013a"+
    "\55\0\1\u013b\56\0\1\11\1\0\1\11\6\0\16\11"+
    "\1\0\3\11\1\u013c\4\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\4\11\1\u013d\11\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\6\11\1\u013e\7\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\15\11\1\u013f\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\5\0\1\u0140\1\u0141"+
    "\15\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\10\11\1\u0142\5\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\22\0\1\u0143\55\0"+
    "\1\11\1\0\1\11\6\0\5\11\1\u0144\10\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\5\11\1\u0145\10\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\6\11\1\u0146\7\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\6\11\1\u0147"+
    "\7\11\1\0\10\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\3\11\1\u0148\12\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\25\0\1\u0149\52\0"+
    "\1\11\1\0\1\11\6\0\10\11\1\u014a\5\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\25\0\1\u014b\52\0"+
    "\1\11\1\0\1\11\6\0\10\11\1\u014c\5\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\42\0\1\u014d\35\0"+
    "\1\11\1\0\1\11\6\0\16\11\1\0\6\11\1\u014e"+
    "\1\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\1\11\1\u014f\14\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\42\0\1\u0150\35\0\1\11\1\0"+
    "\1\11\6\0\16\11\1\0\6\11\1\u0151\1\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\u0152\14\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\16\0\1\u0153\61\0\1\11\1\0\1\11\6\0"+
    "\1\11\1\u0154\14\11\1\0\10\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\16\11\1\0"+
    "\5\11\1\u0155\2\11\1\0\3\11\23\0\1\11\4\0"+
    "\1\11\1\0\1\11\6\0\16\11\1\0\6\11\1\u0156"+
    "\1\11\1\0\3\11\23\0\1\11\30\0\1\u0157\47\0"+
    "\1\11\1\0\1\11\6\0\13\11\1\u0158\2\11\1\0"+
    "\10\11\1\0\3\11\23\0\1\11\4\0\1\11\1\0"+
    "\1\11\6\0\5\11\1\u0159\10\11\1\0\10\11\1\0"+
    "\3\11\23\0\1\11\4\0\1\11\1\0\1\11\6\0"+
    "\16\11\1\0\4\11\1\u015a\3\11\1\0\3\11\23\0"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\6\11\1\u015b"+
    "\7\11\1\0\10\11\1\0\3\11\23\0\1\11\42\0"+
    "\1\u015c\35\0\1\11\1\0\1\11\6\0\16\11\1\0"+
    "\6\11\1\u015d\1\11\1\0\3\11\23\0\1\11\42\0"+
    "\1\u015e\35\0\1\11\1\0\1\11\6\0\16\11\1\0"+
    "\6\11\1\u015f\1\11\1\0\3\11\23\0\1\11\32\0"+
    "\1\u0160\45\0\1\11\1\0\1\11\6\0\15\11\1\u0161"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\20\0\1\u0162"+
    "\57\0\1\11\1\0\1\11\6\0\3\11\1\u0163\12\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\5\11\1\u0164\10\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\16\0\1\u0165\61\0\1\11"+
    "\1\0\1\11\6\0\1\11\1\u0166\14\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\5\11\1\u0167\10\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\6\11"+
    "\1\u0168\7\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\5\11\1\u0169\10\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\24\0\1\u016a"+
    "\53\0\1\11\1\0\1\11\6\0\7\11\1\u016b\6\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\24\0\1\u016c"+
    "\53\0\1\11\1\0\1\11\6\0\7\11\1\u016d\6\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\4\0\1\11"+
    "\1\0\1\11\6\0\3\11\1\u016e\12\11\1\0\10\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\3\11\1\u016f\12\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\5\11"+
    "\1\u0170\10\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\23\0\1\u0171\54\0\1\11\1\0\1\11\6\0\6\11"+
    "\1\u0172\7\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\23\0\1\u0173\54\0\1\11\1\0\1\11\6\0\6\11"+
    "\1\u0174\7\11\1\0\10\11\1\0\3\11\23\0\1\11"+
    "\4\0\1\11\1\0\1\11\6\0\4\11\1\u0175\11\11"+
    "\1\0\10\11\1\0\3\11\23\0\1\11\33\0\2\u0176"+
    "\43\0\1\11\1\0\1\11\6\0\16\11\1\u0176\1\u0177"+
    "\7\11\1\0\3\11\23\0\1\11\33\0\2\u0178\43\0"+
    "\1\11\1\0\1\11\6\0\16\11\1\u0178\1\u0179\7\11"+
    "\1\0\3\11\23\0\1\11\4\0\1\11\1\0\1\11"+
    "\6\0\7\11\1\u017a\6\11\1\0\10\11\1\0\3\11"+
    "\23\0\1\11\4\0\1\11\1\0\1\11\6\0\13\11"+
    "\1\u017b\2\11\1\0\10\11\1\0\3\11\23\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\4\1\2\11\26\1\12\11"+
    "\2\1\3\11\1\1\2\11\1\1\2\11\1\1\2\11"+
    "\1\1\1\0\1\1\2\0\1\11\1\0\1\11\2\1"+
    "\1\0\30\1\1\0\5\1\2\0\11\1\1\0\2\1"+
    "\22\11\1\1\1\11\2\0\1\1\1\11\11\1\1\0"+
    "\1\1\1\0\11\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\2\0\11\1\1\0"+
    "\2\1\1\0\7\1\1\11\1\1\1\11\11\1\1\0"+
    "\3\1\1\11\3\1\1\0\1\1\1\0\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\3\1\2\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\11\1\1\1\0\11\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\2\1\2\0\4\1\1\11"+
    "\3\1\1\11\1\1\1\0\3\1\1\11\5\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\2\11\4\1\1\0\2\1\1\11\5\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\2\1\1\11"+
    "\3\1\1\0\4\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\4\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\11\1\1\1\11"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[379];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    StringBuilder NuevoString = new StringBuilder();
    char NuevoChar;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 252) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); 
                          DosLang.errores.add(new Excepcion(TIPOERROR.LEXICO, 
                                                        "El caracter '"+yytext()+"' no pertenece al lenguaje", 
                                                        yyline, 
                                                        yycolumn));
            }
          case 111: break;
          case 2: 
            { 
            }
          case 112: break;
          case 3: 
            { return symbol(sym.numero, yytext().toLowerCase());
            }
          case 113: break;
          case 4: 
            { return symbol(sym.punto, ".");
            }
          case 114: break;
          case 5: 
            { return symbol(sym.identificador, yytext().toLowerCase());
            }
          case 115: break;
          case 6: 
            { return symbol(sym.parenI, "(");
            }
          case 116: break;
          case 7: 
            { return symbol(sym.por, "*");
            }
          case 117: break;
          case 8: 
            { return symbol(sym.parenD, ")");
            }
          case 118: break;
          case 9: 
            { return symbol(sym.dosPuntos, ":");
            }
          case 119: break;
          case 10: 
            { return symbol(sym.igualacion, "=");
            }
          case 120: break;
          case 11: 
            { return symbol(sym.mas, "+");
            }
          case 121: break;
          case 12: 
            { return symbol(sym.menos, "-");
            }
          case 122: break;
          case 13: 
            { return symbol(sym.division, "/");
            }
          case 123: break;
          case 14: 
            { return symbol(sym.pComa, ";");
            }
          case 124: break;
          case 15: 
            { return symbol(sym.corI, "[");
            }
          case 125: break;
          case 16: 
            { return symbol(sym.corD, "]");
            }
          case 126: break;
          case 17: 
            { return symbol(sym.coma, ",");
            }
          case 127: break;
          case 18: 
            { return symbol(sym.potencia, "^");
            }
          case 128: break;
          case 19: 
            { return symbol(sym.modulo, "%");
            }
          case 129: break;
          case 20: 
            { return symbol(sym.menorque, "<");
            }
          case 130: break;
          case 21: 
            { return symbol(sym.mayorque, ">");
            }
          case 131: break;
          case 22: 
            { yybegin(STRING); NuevoString.setLength(0);
            }
          case 132: break;
          case 23: 
            { yybegin(CHARACTER); NuevoChar = ' ';
            }
          case 133: break;
          case 24: 
            { NuevoString.append(yytext());
            }
          case 134: break;
          case 25: 
            { yybegin(YYINITIAL);
                                   DosLang.errores.add(new Excepcion(TIPOERROR.LEXICO, 
                                                                 "String sin finalizar", 
                                                                 yyline, 
                                                                 yycolumn));
            }
          case 135: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(sym.cadena, NuevoString.toString());
            }
          case 136: break;
          case 27: 
            { NuevoString.append('\\');
            }
          case 137: break;
          case 28: 
            { NuevoString.append('?');
            }
          case 138: break;
          case 29: 
            { NuevoChar = yytext().charAt(0);
            }
          case 139: break;
          case 30: 
            { yybegin(YYINITIAL);
                                   DosLang.errores.add(new Excepcion(TIPOERROR.LEXICO, 
                                                                 "Char sin finalizar", 
                                                                 yyline, 
                                                                 yycolumn));
            }
          case 140: break;
          case 31: 
            { yybegin(YYINITIAL); 
                                   return symbol(sym.caracter, NuevoChar);
            }
          case 141: break;
          case 32: 
            { NuevoChar = '\\';
            }
          case 142: break;
          case 33: 
            { return symbol(sym.dosP, "..");
            }
          case 143: break;
          case 34: 
            { /* ignore */
            }
          case 144: break;
          case 35: 
            { return symbol(sym.si, yytext().toLowerCase());
            }
          case 145: break;
          case 36: 
            { return symbol(sym.to, yytext().toLowerCase());
            }
          case 146: break;
          case 37: 
            { return symbol(sym.or, yytext().toLowerCase());
            }
          case 147: break;
          case 38: 
            { return symbol(sym.of, yytext().toLowerCase());
            }
          case 148: break;
          case 39: 
            { return symbol(sym.hacer, yytext().toLowerCase());
            }
          case 149: break;
          case 40: 
            { return symbol(sym.igual, ":=");
            }
          case 150: break;
          case 41: 
            { return symbol(sym.menorigual, "<=");
            }
          case 151: break;
          case 42: 
            { return symbol(sym.diferente, "<>");
            }
          case 152: break;
          case 43: 
            { return symbol(sym.mayorigual, ">=");
            }
          case 153: break;
          case 44: 
            { NuevoString.append('\n');
            }
          case 154: break;
          case 45: 
            { NuevoString.append('\t');
            }
          case 155: break;
          case 46: 
            { NuevoString.append('\r');
            }
          case 156: break;
          case 47: 
            { NuevoString.append('a');
            }
          case 157: break;
          case 48: 
            { NuevoString.append('\b');
            }
          case 158: break;
          case 49: 
            { NuevoString.append('\f');
            }
          case 159: break;
          case 50: 
            { NuevoString.append('v');
            }
          case 160: break;
          case 51: 
            { NuevoString.append('\"');
            }
          case 161: break;
          case 52: 
            { NuevoString.append('\'');
            }
          case 162: break;
          case 53: 
            { NuevoString.append('\0');
            }
          case 163: break;
          case 54: 
            { NuevoChar = '\n';
            }
          case 164: break;
          case 55: 
            { NuevoChar = '\t';
            }
          case 165: break;
          case 56: 
            { NuevoChar = '\r';
            }
          case 166: break;
          case 57: 
            { NuevoChar = '\"';
            }
          case 167: break;
          case 58: 
            { return symbol(sym.decimal, yytext().toLowerCase());
            }
          case 168: break;
          case 59: 
            { return symbol(sym.tresP, "...");
            }
          case 169: break;
          case 60: 
            { return symbol(sym.nil, yytext().toLowerCase());
            }
          case 170: break;
          case 61: 
            { return symbol(sym.not, yytext().toLowerCase());
            }
          case 171: break;
          case 62: 
            { return symbol(sym.nor, yytext().toLowerCase());
            }
          case 172: break;
          case 63: 
            { return symbol(sym.end, yytext().toLowerCase());
            }
          case 173: break;
          case 64: 
            { return symbol(sym.and, yytext().toLowerCase());
            }
          case 174: break;
          case 65: 
            { return symbol(sym.para, yytext().toLowerCase());
            }
          case 175: break;
          case 66: 
            { return symbol(sym.var, yytext().toLowerCase());
            }
          case 176: break;
          case 67: 
            { return symbol(sym.nand, yytext().toLowerCase());
            }
          case 177: break;
          case 68: 
            { return symbol(sym.verdadero, yytext().toLowerCase());
            }
          case 178: break;
          case 69: 
            { return symbol(sym.then, yytext().toLowerCase());
            }
          case 179: break;
          case 70: 
            { return symbol(sym.type, yytext().toLowerCase());
            }
          case 180: break;
          case 71: 
            { return symbol(sym.sino, yytext().toLowerCase());
            }
          case 181: break;
          case 72: 
            { return symbol(sym.salir, yytext().toLowerCase());
            }
          case 182: break;
          case 73: 
            { return symbol(sym.real,  yytext().toLowerCase());
            }
          case 183: break;
          case 74: 
            { return symbol(sym.leer, yytext().toLowerCase());
            }
          case 184: break;
          case 75: 
            { return symbol(sym.caso, yytext().toLowerCase());
            }
          case 185: break;
          case 76: 
            { return symbol(sym.character, yytext().toLowerCase());
            }
          case 186: break;
          case 77: 
            { return symbol(sym.con, yytext().toLowerCase());
            }
          case 187: break;
          case 78: 
            { return symbol(sym.word, yytext().toLowerCase());
            }
          case 188: break;
          case 79: 
            { return symbol(sym.free, yytext().toLowerCase());
            }
          case 189: break;
          case 80: 
            { return symbol(sym.uses, yytext().toLowerCase());
            }
          case 190: break;
          case 81: 
            { return symbol(sym.array, yytext().toLowerCase());
            }
          case 191: break;
          case 82: 
            { return symbol(sym.constante, yytext().toLowerCase());
            }
          case 192: break;
          case 83: 
            { return symbol(sym.begin, yytext().toLowerCase());
            }
          case 193: break;
          case 84: 
            { return symbol(sym.detener, yytext().toLowerCase());
            }
          case 194: break;
          case 85: 
            { return symbol(sym.escribir, yytext().toLowerCase());
            }
          case 195: break;
          case 86: 
            { return symbol(sym.mientras, yytext().toLowerCase());
            }
          case 196: break;
          case 87: 
            { return symbol(sym.falso, yytext().toLowerCase());
            }
          case 197: break;
          case 88: 
            { return symbol(sym.until, yytext().toLowerCase());
            }
          case 198: break;
          case 89: 
            { return symbol(sym.Equals, yytext().toLowerCase());
            }
          case 199: break;
          case 90: 
            { return symbol(sym.record, yytext().toLowerCase());
            }
          case 200: break;
          case 91: 
            { return symbol(sym.repeat, yytext().toLowerCase());
            }
          case 201: break;
          case 92: 
            { return symbol(sym.downto, yytext().toLowerCase());
            }
          case 202: break;
          case 93: 
            { return symbol(sym.sizeof, yytext().toLowerCase());
            }
          case 203: break;
          case 94: 
            { return symbol(sym.string, yytext().toLowerCase());
            }
          case 204: break;
          case 95: 
            { return symbol(sym.malloc, yytext().toLowerCase());
            }
          case 205: break;
          case 96: 
            { return symbol(sym.integer, yytext().toLowerCase());
            }
          case 206: break;
          case 97: 
            { return symbol(sym.Truncar, yytext().toLowerCase());
            }
          case 207: break;
          case 98: 
            { return symbol(sym.chartEn, yytext().toLowerCase());
            }
          case 208: break;
          case 99: 
            { return symbol(sym.bool, yytext().toLowerCase());
            }
          case 209: break;
          case 100: 
            { return symbol(sym.escribirln, yytext().toLowerCase());
            }
          case 210: break;
          case 101: 
            { return symbol(sym.program, yytext().toLowerCase());
            }
          case 211: break;
          case 102: 
            { return symbol(sym.longitud, yytext().toLowerCase());
            }
          case 212: break;
          case 103: 
            { return symbol(sym.continuar, yytext().toLowerCase());
            }
          case 213: break;
          case 104: 
            { return symbol(sym.function, yytext().toLowerCase());
            }
          case 214: break;
          case 105: 
            { return symbol(sym.Redondear, yytext().toLowerCase());
            }
          case 215: break;
          case 106: 
            { return symbol(sym.procedure, yytext().toLowerCase());
            }
          case 216: break;
          case 107: 
            { return symbol(sym.reemplazar, yytext().toLowerCase());
            }
          case 217: break;
          case 108: 
            { return symbol(sym.aMinusculas, yytext().toLowerCase());
            }
          case 218: break;
          case 109: 
            { return symbol(sym.aMayusculas, yytext().toLowerCase());
            }
          case 219: break;
          case 110: 
            { return symbol(sym.toCharArreglo, yytext().toLowerCase());
            }
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
