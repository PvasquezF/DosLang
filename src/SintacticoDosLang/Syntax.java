
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 22 09:35:41 CST 2019
//----------------------------------------------------

package SintacticoDosLang;

import java.util.ArrayList;
import java_cup.runtime.*;
import doslang.DosLang;
import Conexion.Compilacion;
import Instrucciones.*;
import Expresiones.*;
import Interfaces.*;
import TablaSimbolos.*;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;
import Expresiones.Operacion.Operador;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 22 09:35:41 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\274\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\005\006\000\002\005\003\000\002\006\005" +
    "\000\002\006\003\000\002\007\004\000\002\007\003\000" +
    "\002\033\004\000\002\035\005\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\004\000\002\063" +
    "\004\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\004\000\002\064\004\000\002\066\010\000" +
    "\002\066\010\000\002\066\010\000\002\072\005\000\002" +
    "\071\010\000\002\071\010\000\002\025\005\000\002\024" +
    "\005\000\002\024\003\000\002\023\005\000\002\023\003" +
    "\000\002\030\003\000\002\030\006\000\002\030\006\000" +
    "\002\030\005\000\002\031\005\000\002\031\003\000\002" +
    "\065\006\000\002\065\006\000\002\065\006\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\067\005\000\002\067\003\000\002\067\005\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\015\005\000\002\015\003\000\002\016\004" +
    "\000\002\016\003\000\002\036\010\000\002\014\004\000" +
    "\002\014\003\000\002\012\004\000\002\013\004\000\002" +
    "\013\003\000\002\034\010\000\002\034\006\000\002\011" +
    "\004\000\002\011\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\042\012\000" +
    "\002\042\011\000\002\042\013\000\002\042\012\000\002" +
    "\045\010\000\002\045\007\000\002\045\011\000\002\045" +
    "\010\000\002\075\005\000\002\075\004\000\002\076\007" +
    "\000\002\076\010\000\002\076\005\000\002\076\006\000" +
    "\002\027\005\000\002\026\004\000\002\026\003\000\002" +
    "\073\006\000\002\043\006\000\002\043\005\000\002\017" +
    "\006\000\002\017\005\000\002\010\004\000\002\010\003" +
    "\000\002\037\003\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\007\000\002\037\004\000\002\037\003" +
    "\000\002\037\003\000\002\041\010\000\002\040\005\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\046\010\000\002\046\006\000\002\020\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\005\000\002\021\004" +
    "\000\002\047\010\000\002\047\012\000\002\077\004\000" +
    "\002\077\003\000\002\074\005\000\002\074\005\000\002" +
    "\022\004\000\002\022\004\000\002\050\006\000\002\050" +
    "\006\000\002\052\007\000\002\053\010\000\002\053\010" +
    "\000\002\053\010\000\002\053\010\000\002\044\007\000" +
    "\002\044\007\000\002\051\007\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\005\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\032\003\000\002\032\006\000\002\032\005\000" +
    "\002\062\010\000\002\062\006\000\002\062\010\000\002" +
    "\062\006\000\002\062\006\000\002\062\006\000\002\062" +
    "\010\000\002\062\006\000\002\062\006\000\002\062\006" +
    "\000\002\062\005\000\002\056\004\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\004\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\004\055\004\001\002\000\004\011\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\011\001\002\000" +
    "\020\022\027\040\013\042\026\050\023\054\012\062\032" +
    "\066\021\001\002\000\004\011\u0195\001\002\000\066\011" +
    "\u0109\036\u0116\041\u0118\046\u0191\047\u0113\050\023\051\u010e" +
    "\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112\u0106\113" +
    "\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102\122\111" +
    "\123\112\124\113\125\116\126\122\127\127\130\120\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\uffc4\001\002" +
    "\000\004\002\uffbd\001\002\000\010\040\013\050\023\054" +
    "\012\001\002\000\004\002\uffc9\001\002\000\004\011\035" +
    "\001\002\000\010\040\uffb9\050\uffb9\054\uffb9\001\002\000" +
    "\004\011\363\001\002\000\010\040\013\050\023\054\012" +
    "\001\002\000\004\002\ufffb\001\002\000\004\011\035\001" +
    "\002\000\004\011\035\001\002\000\010\040\uffba\050\uffba" +
    "\054\uffba\001\002\000\004\002\ufffd\001\002\000\004\011" +
    "\035\001\002\000\012\011\uffc1\040\uffc1\050\uffc1\054\uffc1" +
    "\001\002\000\006\023\040\067\041\001\002\000\012\007" +
    "\uffe2\023\uffe2\067\uffe2\076\uffe2\001\002\000\012\011\035" +
    "\040\uffc3\050\uffc3\054\uffc3\001\002\000\012\011\uffc2\040" +
    "\uffc2\050\uffc2\054\uffc2\001\002\000\004\011\334\001\002" +
    "\000\036\004\050\005\045\011\065\012\063\013\061\014" +
    "\042\015\057\016\064\017\043\020\044\024\051\027\052" +
    "\105\056\131\054\001\002\000\010\007\uffd6\025\uffd6\076" +
    "\uffd6\001\002\000\010\007\uffd3\025\uffd3\076\uffd3\001\002" +
    "\000\012\007\uffd2\011\324\025\uffd2\076\uffd2\001\002\000" +
    "\004\026\ufff4\001\002\000\004\026\314\001\002\000\010" +
    "\007\uffcc\025\uffcc\076\uffcc\001\002\000\004\026\ufff5\001" +
    "\002\000\056\004\077\005\075\010\074\011\126\021\103" +
    "\024\104\034\114\035\117\052\076\102\121\103\115\105" +
    "\107\120\125\121\102\122\111\123\112\124\113\125\116" +
    "\126\122\127\127\130\120\131\106\001\002\000\004\030" +
    "\262\001\002\000\010\007\uffce\025\uffce\076\uffce\001\002" +
    "\000\004\026\ufff6\001\002\000\006\007\070\076\071\001" +
    "\002\000\006\004\066\005\067\001\002\000\010\007\uffd5" +
    "\025\uffd5\076\uffd5\001\002\000\010\007\uffcd\025\uffcd\076" +
    "\uffcd\001\002\000\010\007\uffd7\025\uffd7\076\uffd7\001\002" +
    "\000\010\007\uffcb\025\uffcb\076\uffcb\001\002\000\010\007" +
    "\uffd8\025\uffd8\076\uffd8\001\002\000\010\007\uffd4\025\uffd4" +
    "\076\uffd4\001\002\000\010\007\uffd0\025\uffd0\076\uffd0\001" +
    "\002\000\004\026\ufff3\001\002\000\004\026\ufff2\001\002" +
    "\000\012\011\uffbf\040\uffbf\050\uffbf\054\uffbf\001\002\000" +
    "\056\004\077\005\075\010\074\011\126\021\103\024\104" +
    "\034\114\035\117\052\076\102\121\103\115\105\107\120" +
    "\125\121\102\122\111\123\112\124\113\125\116\126\122" +
    "\127\127\130\120\131\106\001\002\000\070\007\uff71\023" +
    "\uff71\025\uff71\031\uff71\032\uff71\033\uff71\037\uff71\043\uff71" +
    "\044\uff71\053\uff71\057\uff71\060\uff71\067\uff71\070\uff71\071" +
    "\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71" +
    "\100\uff71\101\uff71\104\uff71\105\uff71\106\uff71\107\uff71\001" +
    "\002\000\070\007\uff6d\023\uff6d\025\uff6d\031\uff6d\032\uff6d" +
    "\033\uff6d\037\uff6d\043\uff6d\044\uff6d\053\uff6d\057\uff6d\060" +
    "\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d" +
    "\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\104\uff6d\105" +
    "\uff6d\106\uff6d\107\uff6d\001\002\000\070\007\uff4c\023\uff4c" +
    "\025\uff4c\031\uff4c\032\uff4c\033\uff4c\037\uff4c\043\uff4c\044" +
    "\uff4c\053\uff4c\057\uff4c\060\uff4c\067\uff4c\070\uff4c\071\uff4c" +
    "\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c\077\uff4c\100" +
    "\uff4c\101\uff4c\104\uff4c\105\uff4c\106\uff4c\107\uff4c\001\002" +
    "\000\070\007\uff47\023\uff47\025\uff47\031\uff47\032\uff47\033" +
    "\uff47\037\uff47\043\uff47\044\uff47\053\uff47\057\uff47\060\uff47" +
    "\067\uff47\070\uff47\071\uff47\072\uff47\073\uff47\074\uff47\075" +
    "\uff47\076\uff47\077\uff47\100\uff47\101\uff47\104\uff47\105\uff47" +
    "\106\uff47\107\uff47\001\002\000\056\004\077\005\075\010" +
    "\074\011\126\021\103\024\104\034\114\035\117\052\076" +
    "\102\121\103\115\105\107\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\131\106" +
    "\001\002\000\070\007\uff48\023\uff48\025\uff48\031\uff48\032" +
    "\uff48\033\uff48\037\uff48\043\uff48\044\uff48\053\uff48\057\uff48" +
    "\060\uff48\067\uff48\070\uff48\071\uff48\072\uff48\073\uff48\074" +
    "\uff48\075\uff48\076\uff48\077\uff48\100\uff48\101\uff48\104\uff48" +
    "\105\uff48\106\uff48\107\uff48\001\002\000\070\007\uff74\023" +
    "\uff74\025\uff74\031\uff74\032\uff74\033\uff74\037\uff74\043\uff74" +
    "\044\uff74\053\uff74\057\uff74\060\uff74\067\uff74\070\uff74\071" +
    "\uff74\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74" +
    "\100\uff74\101\uff74\104\uff74\105\uff74\106\uff74\107\uff74\001" +
    "\002\000\070\007\uff73\023\uff73\025\uff73\031\uff73\032\uff73" +
    "\033\uff73\037\uff73\043\uff73\044\uff73\053\uff73\057\uff73\060" +
    "\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73" +
    "\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73\104\uff73\105" +
    "\uff73\106\uff73\107\uff73\001\002\000\004\024\256\001\002" +
    "\000\070\007\uff46\023\uff46\025\uff46\031\uff46\032\uff46\033" +
    "\uff46\037\uff46\043\uff46\044\uff46\053\uff46\057\uff46\060\uff46" +
    "\067\uff46\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075" +
    "\uff46\076\uff46\077\uff46\100\uff46\101\uff46\104\uff46\105\uff46" +
    "\106\uff46\107\uff46\001\002\000\056\004\077\005\075\010" +
    "\074\011\126\021\103\024\104\034\114\035\117\052\076" +
    "\102\121\103\115\105\107\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\131\106" +
    "\001\002\000\074\007\uff6f\023\uff6f\025\uff6f\030\250\031" +
    "\uff6f\032\uff6f\033\uff6f\037\uff6f\043\uff6f\044\uff6f\053\uff6f" +
    "\057\uff6f\060\uff6f\063\247\067\uff6f\070\uff6f\071\uff6f\072" +
    "\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f" +
    "\101\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002\000" +
    "\070\007\uff4b\023\uff4b\025\uff4b\031\uff4b\032\uff4b\033\uff4b" +
    "\037\uff4b\043\uff4b\044\uff4b\053\uff4b\057\uff4b\060\uff4b\067" +
    "\uff4b\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b" +
    "\076\uff4b\077\uff4b\100\uff4b\101\uff4b\104\uff4b\105\uff4b\106" +
    "\uff4b\107\uff4b\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\070\007\uff72\023\uff72\025\uff72\031\uff72\032\uff72" +
    "\033\uff72\037\uff72\043\uff72\044\uff72\053\uff72\057\uff72\060" +
    "\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72" +
    "\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72\104\uff72\105" +
    "\uff72\106\uff72\107\uff72\001\002\000\004\024\241\001\002" +
    "\000\004\024\236\001\002\000\004\024\233\001\002\000" +
    "\004\024\226\001\002\000\070\007\uff4a\023\uff4a\025\uff4a" +
    "\031\uff4a\032\uff4a\033\uff4a\037\uff4a\043\uff4a\044\uff4a\053" +
    "\uff4a\057\uff4a\060\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a" +
    "\073\uff4a\074\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101" +
    "\uff4a\104\uff4a\105\uff4a\106\uff4a\107\uff4a\001\002\000\004" +
    "\024\223\001\002\000\004\024\220\001\002\000\004\024" +
    "\215\001\002\000\070\007\uff49\023\uff49\025\uff49\031\uff49" +
    "\032\uff49\033\uff49\037\uff49\043\uff49\044\uff49\053\uff49\057" +
    "\uff49\060\uff49\067\uff49\070\uff49\071\uff49\072\uff49\073\uff49" +
    "\074\uff49\075\uff49\076\uff49\077\uff49\100\uff49\101\uff49\104" +
    "\uff49\105\uff49\106\uff49\107\uff49\001\002\000\004\024\210" +
    "\001\002\000\070\007\uff6e\023\uff6e\025\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\037\uff6e\043\uff6e\044\uff6e\053\uff6e\057\uff6e" +
    "\060\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074" +
    "\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\104\uff6e" +
    "\105\uff6e\106\uff6e\107\uff6e\001\002\000\044\007\207\037" +
    "\140\053\136\070\132\071\144\072\152\073\147\074\133" +
    "\075\135\076\143\077\142\100\145\101\134\104\151\105" +
    "\137\106\146\107\141\001\002\000\004\024\202\001\002" +
    "\000\076\007\uff6c\023\uff6c\024\173\025\uff6c\030\uff6c\031" +
    "\uff6c\032\uff6c\033\uff6c\037\uff6c\043\uff6c\044\uff6c\053\uff6c" +
    "\057\uff6c\060\uff6c\063\uff6c\067\uff6c\070\uff6c\071\uff6c\072" +
    "\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c" +
    "\101\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\001\002\000" +
    "\004\024\130\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\044\025\150\037\140\053\136\070\132\071\144" +
    "\072\152\073\147\074\133\075\135\076\143\077\142\100" +
    "\145\101\134\104\151\105\137\106\146\107\141\001\002" +
    "\000\056\004\077\005\075\010\074\011\126\021\103\024" +
    "\104\034\114\035\117\052\076\102\121\103\115\105\107" +
    "\120\125\121\102\122\111\123\112\124\113\125\116\126" +
    "\122\127\127\130\120\131\106\001\002\000\056\004\077" +
    "\005\075\010\074\011\126\021\103\024\104\034\114\035" +
    "\117\052\076\102\121\103\115\105\107\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\131\106\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\056\004\077\005\075\010\074\011\126\021\103" +
    "\024\104\034\114\035\117\052\076\102\121\103\115\105" +
    "\107\120\125\121\102\122\111\123\112\124\113\125\116" +
    "\126\122\127\127\130\120\131\106\001\002\000\056\004" +
    "\077\005\075\010\074\011\126\021\103\024\104\034\114" +
    "\035\117\052\076\102\121\103\115\105\107\120\125\121" +
    "\102\122\111\123\112\124\113\125\116\126\122\127\127" +
    "\130\120\131\106\001\002\000\056\004\077\005\075\010" +
    "\074\011\126\021\103\024\104\034\114\035\117\052\076" +
    "\102\121\103\115\105\107\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\131\106" +
    "\001\002\000\056\004\077\005\075\010\074\011\126\021" +
    "\103\024\104\034\114\035\117\052\076\102\121\103\115" +
    "\105\107\120\125\121\102\122\111\123\112\124\113\125" +
    "\116\126\122\127\127\130\120\131\106\001\002\000\056" +
    "\004\077\005\075\010\074\011\126\021\103\024\104\034" +
    "\114\035\117\052\076\102\121\103\115\105\107\120\125" +
    "\121\102\122\111\123\112\124\113\125\116\126\122\127" +
    "\127\130\120\131\106\001\002\000\056\004\077\005\075" +
    "\010\074\011\126\021\103\024\104\034\114\035\117\052" +
    "\076\102\121\103\115\105\107\120\125\121\102\122\111" +
    "\123\112\124\113\125\116\126\122\127\127\130\120\131" +
    "\106\001\002\000\056\004\077\005\075\010\074\011\126" +
    "\021\103\024\104\034\114\035\117\052\076\102\121\103" +
    "\115\105\107\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\131\106\001\002\000" +
    "\056\004\077\005\075\010\074\011\126\021\103\024\104" +
    "\034\114\035\117\052\076\102\121\103\115\105\107\120" +
    "\125\121\102\122\111\123\112\124\113\125\116\126\122" +
    "\127\127\130\120\131\106\001\002\000\056\004\077\005" +
    "\075\010\074\011\126\021\103\024\104\034\114\035\117" +
    "\052\076\102\121\103\115\105\107\120\125\121\102\122" +
    "\111\123\112\124\113\125\116\126\122\127\127\130\120" +
    "\131\106\001\002\000\056\004\077\005\075\010\074\011" +
    "\126\021\103\024\104\034\114\035\117\052\076\102\121" +
    "\103\115\105\107\120\125\121\102\122\111\123\112\124" +
    "\113\125\116\126\122\127\127\130\120\131\106\001\002" +
    "\000\056\004\077\005\075\010\074\011\126\021\103\024" +
    "\104\034\114\035\117\052\076\102\121\103\115\105\107" +
    "\120\125\121\102\122\111\123\112\124\113\125\116\126" +
    "\122\127\127\130\120\131\106\001\002\000\070\007\uff62" +
    "\023\uff62\025\uff62\031\uff62\032\uff62\033\uff62\037\uff62\043" +
    "\uff62\044\uff62\053\uff62\057\uff62\060\uff62\067\uff62\070\uff62" +
    "\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077" +
    "\uff62\100\uff62\101\uff62\104\uff62\105\uff62\106\uff62\107\uff62" +
    "\001\002\000\056\004\077\005\075\010\074\011\126\021" +
    "\103\024\104\034\114\035\117\052\076\102\121\103\115" +
    "\105\107\120\125\121\102\122\111\123\112\124\113\125" +
    "\116\126\122\127\127\130\120\131\106\001\002\000\056" +
    "\004\077\005\075\010\074\011\126\021\103\024\104\034" +
    "\114\035\117\052\076\102\121\103\115\105\107\120\125" +
    "\121\102\122\111\123\112\124\113\125\116\126\122\127" +
    "\127\130\120\131\106\001\002\000\070\007\uff54\023\uff54" +
    "\025\uff54\031\uff54\032\uff54\033\uff54\037\uff54\043\uff54\044" +
    "\uff54\053\uff54\057\uff54\060\uff54\067\uff54\070\132\071\144" +
    "\072\uff54\073\uff54\074\uff54\075\uff54\076\uff54\077\uff54\100" +
    "\uff54\101\uff54\104\151\105\137\106\146\107\141\001\002" +
    "\000\070\007\uff5d\023\uff5d\025\uff5d\031\uff5d\032\uff5d\033" +
    "\uff5d\037\uff5d\043\uff5d\044\uff5d\053\uff5d\057\uff5d\060\uff5d" +
    "\067\uff5d\070\132\071\144\072\uff5d\073\uff5d\074\uff5d\075" +
    "\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\104\uff5d\105\uff5d" +
    "\106\146\107\141\001\002\000\070\007\uff55\023\uff55\025" +
    "\uff55\031\uff55\032\uff55\033\uff55\037\uff55\043\uff55\044\uff55" +
    "\053\uff55\057\uff55\060\uff55\067\uff55\070\132\071\144\072" +
    "\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\100\uff55" +
    "\101\uff55\104\151\105\137\106\146\107\141\001\002\000" +
    "\070\007\uff5b\023\uff5b\025\uff5b\031\uff5b\032\uff5b\033\uff5b" +
    "\037\uff5b\043\uff5b\044\uff5b\053\uff5b\057\uff5b\060\uff5b\067" +
    "\uff5b\070\132\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b" +
    "\076\uff5b\077\uff5b\100\uff5b\101\uff5b\104\uff5b\105\uff5b\106" +
    "\uff5b\107\uff5b\001\002\000\070\007\uff4f\023\uff4f\025\uff4f" +
    "\031\uff4f\032\uff4f\033\uff4f\037\140\043\uff4f\044\uff4f\053" +
    "\uff4f\057\uff4f\060\uff4f\067\uff4f\070\132\071\144\072\152" +
    "\073\147\074\133\075\135\076\143\077\142\100\uff4f\101" +
    "\uff4f\104\151\105\137\106\146\107\141\001\002\000\070" +
    "\007\uff58\023\uff58\025\uff58\031\uff58\032\uff58\033\uff58\037" +
    "\uff58\043\uff58\044\uff58\053\uff58\057\uff58\060\uff58\067\uff58" +
    "\070\132\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076" +
    "\uff58\077\uff58\100\uff58\101\uff58\104\uff58\105\uff58\106\uff58" +
    "\107\uff58\001\002\000\070\007\uff53\023\uff53\025\uff53\031" +
    "\uff53\032\uff53\033\uff53\037\uff53\043\uff53\044\uff53\053\uff53" +
    "\057\uff53\060\uff53\067\uff53\070\132\071\144\072\152\073" +
    "\147\074\133\075\135\076\uff53\077\uff53\100\uff53\101\uff53" +
    "\104\151\105\137\106\146\107\141\001\002\000\070\007" +
    "\uff52\023\uff52\025\uff52\031\uff52\032\uff52\033\uff52\037\uff52" +
    "\043\uff52\044\uff52\053\uff52\057\uff52\060\uff52\067\uff52\070" +
    "\132\071\144\072\152\073\147\074\133\075\135\076\uff52" +
    "\077\uff52\100\uff52\101\uff52\104\151\105\137\106\146\107" +
    "\141\001\002\000\070\007\uff5a\023\uff5a\025\uff5a\031\uff5a" +
    "\032\uff5a\033\uff5a\037\uff5a\043\uff5a\044\uff5a\053\uff5a\057" +
    "\uff5a\060\uff5a\067\uff5a\070\132\071\uff5a\072\uff5a\073\uff5a" +
    "\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\104" +
    "\uff5a\105\uff5a\106\uff5a\107\uff5a\001\002\000\070\007\uff50" +
    "\023\uff50\025\uff50\031\uff50\032\uff50\033\uff50\037\uff50\043" +
    "\uff50\044\uff50\053\uff50\057\uff50\060\uff50\067\uff50\070\132" +
    "\071\144\072\152\073\147\074\133\075\135\076\143\077" +
    "\142\100\uff50\101\uff50\104\151\105\137\106\146\107\141" +
    "\001\002\000\070\007\uff5c\023\uff5c\025\uff5c\031\uff5c\032" +
    "\uff5c\033\uff5c\037\uff5c\043\uff5c\044\uff5c\053\uff5c\057\uff5c" +
    "\060\uff5c\067\uff5c\070\132\071\144\072\uff5c\073\uff5c\074" +
    "\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c\104\uff5c" +
    "\105\uff5c\106\146\107\141\001\002\000\070\007\uff51\023" +
    "\uff51\025\uff51\031\uff51\032\uff51\033\uff51\037\140\043\uff51" +
    "\044\uff51\053\uff51\057\uff51\060\uff51\067\uff51\070\132\071" +
    "\144\072\152\073\147\074\133\075\135\076\143\077\142" +
    "\100\145\101\134\104\151\105\137\106\146\107\141\001" +
    "\002\000\070\007\uff56\023\uff56\025\uff56\031\uff56\032\uff56" +
    "\033\uff56\037\uff56\043\uff56\044\uff56\053\uff56\057\uff56\060" +
    "\uff56\067\uff56\070\132\071\144\072\uff56\073\uff56\074\uff56" +
    "\075\uff56\076\uff56\077\uff56\100\uff56\101\uff56\104\151\105" +
    "\137\106\146\107\141\001\002\000\070\007\uff4e\023\uff4e" +
    "\025\uff4e\031\uff4e\032\uff4e\033\uff4e\037\140\043\uff4e\044" +
    "\uff4e\053\uff4e\057\uff4e\060\uff4e\067\uff4e\070\132\071\144" +
    "\072\152\073\147\074\133\075\135\076\143\077\142\100" +
    "\uff4e\101\uff4e\104\151\105\137\106\146\107\141\001\002" +
    "\000\070\007\uff57\023\uff57\025\uff57\031\uff57\032\uff57\033" +
    "\uff57\037\uff57\043\uff57\044\uff57\053\uff57\057\uff57\060\uff57" +
    "\067\uff57\070\132\071\144\072\uff57\073\uff57\074\uff57\075" +
    "\uff57\076\uff57\077\uff57\100\uff57\101\uff57\104\151\105\137" +
    "\106\146\107\141\001\002\000\070\007\uff59\023\uff59\025" +
    "\uff59\031\uff59\032\uff59\033\uff59\037\uff59\043\uff59\044\uff59" +
    "\053\uff59\057\uff59\060\uff59\067\uff59\070\uff59\071\uff59\072" +
    "\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59" +
    "\101\uff59\104\uff59\105\uff59\106\uff59\107\uff59\001\002\000" +
    "\060\004\077\005\075\010\074\011\126\021\103\024\104" +
    "\025\174\034\114\035\117\052\076\102\121\103\115\105" +
    "\107\120\125\121\102\122\111\123\112\124\113\125\116" +
    "\126\122\127\127\130\120\131\106\001\002\000\070\007" +
    "\uff5f\023\uff5f\025\uff5f\031\uff5f\032\uff5f\033\uff5f\037\uff5f" +
    "\043\uff5f\044\uff5f\053\uff5f\057\uff5f\060\uff5f\067\uff5f\070" +
    "\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f" +
    "\077\uff5f\100\uff5f\101\uff5f\104\uff5f\105\uff5f\106\uff5f\107" +
    "\uff5f\001\002\000\006\023\177\025\200\001\002\000\052" +
    "\023\uffdc\025\uffdc\031\uffdc\037\140\053\136\067\uffdc\070" +
    "\132\071\144\072\152\073\147\074\133\075\135\076\143" +
    "\077\142\100\145\101\134\104\151\105\137\106\146\107" +
    "\141\001\002\000\056\004\077\005\075\010\074\011\126" +
    "\021\103\024\104\034\114\035\117\052\076\102\121\103" +
    "\115\105\107\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\131\106\001\002\000" +
    "\070\007\uff60\023\uff60\025\uff60\031\uff60\032\uff60\033\uff60" +
    "\037\uff60\043\uff60\044\uff60\053\uff60\057\uff60\060\uff60\067" +
    "\uff60\070\uff60\071\uff60\072\uff60\073\uff60\074\uff60\075\uff60" +
    "\076\uff60\077\uff60\100\uff60\101\uff60\104\uff60\105\uff60\106" +
    "\uff60\107\uff60\001\002\000\052\023\uffdd\025\uffdd\031\uffdd" +
    "\037\140\053\136\067\uffdd\070\132\071\144\072\152\073" +
    "\147\074\133\075\135\076\143\077\142\100\145\101\134" +
    "\104\151\105\137\106\146\107\141\001\002\000\056\004" +
    "\077\005\075\010\074\011\126\021\103\024\104\034\114" +
    "\035\117\052\076\102\121\103\115\105\107\120\125\121" +
    "\102\122\111\123\112\124\113\125\116\126\122\127\127" +
    "\130\120\131\106\001\002\000\044\023\204\037\140\053" +
    "\136\070\132\071\144\072\152\073\147\074\133\075\135" +
    "\076\143\077\142\100\145\101\134\104\151\105\137\106" +
    "\146\107\141\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\044\025\206\037\140\053\136\070\132\071\144" +
    "\072\152\073\147\074\133\075\135\076\143\077\142\100" +
    "\145\101\134\104\151\105\137\106\146\107\141\001\002" +
    "\000\070\007\uff69\023\uff69\025\uff69\031\uff69\032\uff69\033" +
    "\uff69\037\uff69\043\uff69\044\uff69\053\uff69\057\uff69\060\uff69" +
    "\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074\uff69\075" +
    "\uff69\076\uff69\077\uff69\100\uff69\101\uff69\104\uff69\105\uff69" +
    "\106\uff69\107\uff69\001\002\000\012\011\uffc0\040\uffc0\050" +
    "\uffc0\054\uffc0\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\044\023\212\037\140\053\136\070\132\071\144" +
    "\072\152\073\147\074\133\075\135\076\143\077\142\100" +
    "\145\101\134\104\151\105\137\106\146\107\141\001\002" +
    "\000\056\004\077\005\075\010\074\011\126\021\103\024" +
    "\104\034\114\035\117\052\076\102\121\103\115\105\107" +
    "\120\125\121\102\122\111\123\112\124\113\125\116\126" +
    "\122\127\127\130\120\131\106\001\002\000\044\025\214" +
    "\037\140\053\136\070\132\071\144\072\152\073\147\074" +
    "\133\075\135\076\143\077\142\100\145\101\134\104\151" +
    "\105\137\106\146\107\141\001\002\000\070\007\uff63\023" +
    "\uff63\025\uff63\031\uff63\032\uff63\033\uff63\037\uff63\043\uff63" +
    "\044\uff63\053\uff63\057\uff63\060\uff63\067\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63" +
    "\100\uff63\101\uff63\104\uff63\105\uff63\106\uff63\107\uff63\001" +
    "\002\000\056\004\077\005\075\010\074\011\126\021\103" +
    "\024\104\034\114\035\117\052\076\102\121\103\115\105" +
    "\107\120\125\121\102\122\111\123\112\124\113\125\116" +
    "\126\122\127\127\130\120\131\106\001\002\000\044\025" +
    "\217\037\140\053\136\070\132\071\144\072\152\073\147" +
    "\074\133\075\135\076\143\077\142\100\145\101\134\104" +
    "\151\105\137\106\146\107\141\001\002\000\070\007\uff61" +
    "\023\uff61\025\uff61\031\uff61\032\uff61\033\uff61\037\uff61\043" +
    "\uff61\044\uff61\053\uff61\057\uff61\060\uff61\067\uff61\070\uff61" +
    "\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077" +
    "\uff61\100\uff61\101\uff61\104\uff61\105\uff61\106\uff61\107\uff61" +
    "\001\002\000\056\004\077\005\075\010\074\011\126\021" +
    "\103\024\104\034\114\035\117\052\076\102\121\103\115" +
    "\105\107\120\125\121\102\122\111\123\112\124\113\125" +
    "\116\126\122\127\127\130\120\131\106\001\002\000\044" +
    "\025\222\037\140\053\136\070\132\071\144\072\152\073" +
    "\147\074\133\075\135\076\143\077\142\100\145\101\134" +
    "\104\151\105\137\106\146\107\141\001\002\000\070\007" +
    "\uffd9\023\uffd9\025\uffd9\031\uffd9\032\uffd9\033\uffd9\037\uffd9" +
    "\043\uffd9\044\uffd9\053\uffd9\057\uffd9\060\uffd9\067\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\100\uffd9\101\uffd9\104\uffd9\105\uffd9\106\uffd9\107" +
    "\uffd9\001\002\000\056\004\077\005\075\010\074\011\126" +
    "\021\103\024\104\034\114\035\117\052\076\102\121\103" +
    "\115\105\107\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\131\106\001\002\000" +
    "\044\025\225\037\140\053\136\070\132\071\144\072\152" +
    "\073\147\074\133\075\135\076\143\077\142\100\145\101" +
    "\134\104\151\105\137\106\146\107\141\001\002\000\070" +
    "\007\uff64\023\uff64\025\uff64\031\uff64\032\uff64\033\uff64\037" +
    "\uff64\043\uff64\044\uff64\053\uff64\057\uff64\060\uff64\067\uff64" +
    "\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076" +
    "\uff64\077\uff64\100\uff64\101\uff64\104\uff64\105\uff64\106\uff64" +
    "\107\uff64\001\002\000\056\004\077\005\075\010\074\011" +
    "\230\021\103\024\104\034\114\035\117\052\076\102\121" +
    "\103\115\105\107\120\125\121\102\122\111\123\112\124" +
    "\113\125\116\126\122\127\127\130\120\131\106\001\002" +
    "\000\044\025\232\037\140\053\136\070\132\071\144\072" +
    "\152\073\147\074\133\075\135\076\143\077\142\100\145" +
    "\101\134\104\151\105\137\106\146\107\141\001\002\000" +
    "\052\024\173\025\231\030\uff6c\037\uff6c\053\uff6c\063\uff6c" +
    "\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076" +
    "\uff6c\077\uff6c\100\uff6c\101\uff6c\104\uff6c\105\uff6c\106\uff6c" +
    "\107\uff6c\001\002\000\070\007\uffda\023\uffda\025\uffda\031" +
    "\uffda\032\uffda\033\uffda\037\uffda\043\uffda\044\uffda\053\uffda" +
    "\057\uffda\060\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda" +
    "\104\uffda\105\uffda\106\uffda\107\uffda\001\002\000\070\007" +
    "\uffdb\023\uffdb\025\uffdb\031\uffdb\032\uffdb\033\uffdb\037\uffdb" +
    "\043\uffdb\044\uffdb\053\uffdb\057\uffdb\060\uffdb\067\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\077\uffdb\100\uffdb\101\uffdb\104\uffdb\105\uffdb\106\uffdb\107" +
    "\uffdb\001\002\000\056\004\077\005\075\010\074\011\126" +
    "\021\103\024\104\034\114\035\117\052\076\102\121\103" +
    "\115\105\107\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\131\106\001\002\000" +
    "\044\025\235\037\140\053\136\070\132\071\144\072\152" +
    "\073\147\074\133\075\135\076\143\077\142\100\145\101" +
    "\134\104\151\105\137\106\146\107\141\001\002\000\070" +
    "\007\uff65\023\uff65\025\uff65\031\uff65\032\uff65\033\uff65\037" +
    "\uff65\043\uff65\044\uff65\053\uff65\057\uff65\060\uff65\067\uff65" +
    "\070\uff65\071\uff65\072\uff65\073\uff65\074\uff65\075\uff65\076" +
    "\uff65\077\uff65\100\uff65\101\uff65\104\uff65\105\uff65\106\uff65" +
    "\107\uff65\001\002\000\056\004\077\005\075\010\074\011" +
    "\126\021\103\024\104\034\114\035\117\052\076\102\121" +
    "\103\115\105\107\120\125\121\102\122\111\123\112\124" +
    "\113\125\116\126\122\127\127\130\120\131\106\001\002" +
    "\000\044\025\240\037\140\053\136\070\132\071\144\072" +
    "\152\073\147\074\133\075\135\076\143\077\142\100\145" +
    "\101\134\104\151\105\137\106\146\107\141\001\002\000" +
    "\070\007\uff66\023\uff66\025\uff66\031\uff66\032\uff66\033\uff66" +
    "\037\uff66\043\uff66\044\uff66\053\uff66\057\uff66\060\uff66\067" +
    "\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\075\uff66" +
    "\076\uff66\077\uff66\100\uff66\101\uff66\104\uff66\105\uff66\106" +
    "\uff66\107\uff66\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\044\023\243\037\140\053\136\070\132\071\144" +
    "\072\152\073\147\074\133\075\135\076\143\077\142\100" +
    "\145\101\134\104\151\105\137\106\146\107\141\001\002" +
    "\000\056\004\077\005\075\010\074\011\126\021\103\024" +
    "\104\034\114\035\117\052\076\102\121\103\115\105\107" +
    "\120\125\121\102\122\111\123\112\124\113\125\116\126" +
    "\122\127\127\130\120\131\106\001\002\000\044\025\245" +
    "\037\140\053\136\070\132\071\144\072\152\073\147\074" +
    "\133\075\135\076\143\077\142\100\145\101\134\104\151" +
    "\105\137\106\146\107\141\001\002\000\070\007\uff67\023" +
    "\uff67\025\uff67\031\uff67\032\uff67\033\uff67\037\uff67\043\uff67" +
    "\044\uff67\053\uff67\057\uff67\060\uff67\067\uff67\070\uff67\071" +
    "\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67" +
    "\100\uff67\101\uff67\104\uff67\105\uff67\106\uff67\107\uff67\001" +
    "\002\000\070\007\uff5e\023\uff5e\025\uff5e\031\uff5e\032\uff5e" +
    "\033\uff5e\037\uff5e\043\uff5e\044\uff5e\053\uff5e\057\uff5e\060" +
    "\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e" +
    "\075\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\104\uff5e\105" +
    "\uff5e\106\uff5e\107\uff5e\001\002\000\004\011\253\001\002" +
    "\000\056\004\077\005\075\010\074\011\126\021\103\024" +
    "\104\034\114\035\117\052\076\102\121\103\115\105\107" +
    "\120\125\121\102\122\111\123\112\124\113\125\116\126" +
    "\122\127\127\130\120\131\106\001\002\000\006\023\177" +
    "\031\252\001\002\000\074\007\uff6b\023\uff6b\025\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\037\uff6b\043\uff6b\044\uff6b" +
    "\053\uff6b\057\uff6b\060\uff6b\063\uff6b\067\uff6b\070\uff6b\071" +
    "\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b" +
    "\100\uff6b\101\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\001" +
    "\002\000\074\007\uff6a\023\uff6a\025\uff6a\030\uff6a\031\uff6a" +
    "\032\uff6a\033\uff6a\037\uff6a\043\uff6a\044\uff6a\053\uff6a\057" +
    "\uff6a\060\uff6a\063\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a" +
    "\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101" +
    "\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\001\002\000\044" +
    "\025\255\037\140\053\136\070\132\071\144\072\152\073" +
    "\147\074\133\075\135\076\143\077\142\100\145\101\134" +
    "\104\151\105\137\106\146\107\141\001\002\000\070\007" +
    "\uff70\023\uff70\025\uff70\031\uff70\032\uff70\033\uff70\037\uff70" +
    "\043\uff70\044\uff70\053\uff70\057\uff70\060\uff70\067\uff70\070" +
    "\uff70\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70" +
    "\077\uff70\100\uff70\101\uff70\104\uff70\105\uff70\106\uff70\107" +
    "\uff70\001\002\000\056\004\077\005\075\010\074\011\126" +
    "\021\103\024\104\034\114\035\117\052\076\102\121\103" +
    "\115\105\107\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\131\106\001\002\000" +
    "\044\025\260\037\140\053\136\070\132\071\144\072\152" +
    "\073\147\074\133\075\135\076\143\077\142\100\145\101" +
    "\134\104\151\105\137\106\146\107\141\001\002\000\070" +
    "\007\uff68\023\uff68\025\uff68\031\uff68\032\uff68\033\uff68\037" +
    "\uff68\043\uff68\044\uff68\053\uff68\057\uff68\060\uff68\067\uff68" +
    "\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076" +
    "\uff68\077\uff68\100\uff68\101\uff68\104\uff68\105\uff68\106\uff68" +
    "\107\uff68\001\002\000\070\007\uff4d\023\uff4d\025\uff4d\031" +
    "\uff4d\032\uff4d\033\uff4d\037\uff4d\043\uff4d\044\uff4d\053\uff4d" +
    "\057\uff4d\060\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073" +
    "\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d" +
    "\104\uff4d\105\uff4d\106\uff4d\107\uff4d\001\002\000\056\004" +
    "\077\005\075\010\074\011\126\021\103\024\104\034\114" +
    "\035\117\052\076\102\121\103\115\105\107\120\125\121" +
    "\102\122\111\123\112\124\113\125\116\126\122\127\127" +
    "\130\120\131\106\001\002\000\004\031\306\001\002\000" +
    "\006\023\271\031\270\001\002\000\044\032\266\037\140" +
    "\053\136\070\132\071\144\072\152\073\147\074\133\075" +
    "\135\076\143\077\142\100\145\101\134\104\151\105\137" +
    "\106\146\107\141\001\002\000\056\004\077\005\075\010" +
    "\074\011\126\021\103\024\104\034\114\035\117\052\076" +
    "\102\121\103\115\105\107\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\131\106" +
    "\001\002\000\046\023\uffe9\031\uffe9\037\140\053\136\070" +
    "\132\071\144\072\152\073\147\074\133\075\135\076\143" +
    "\077\142\100\145\101\134\104\151\105\137\106\146\107" +
    "\141\001\002\000\004\033\276\001\002\000\056\004\077" +
    "\005\075\010\074\011\126\021\103\024\104\034\114\035" +
    "\117\052\076\102\121\103\115\105\107\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\131\106\001\002\000\006\023\uffe4\031\uffe4\001\002" +
    "\000\006\023\274\031\uffe6\001\002\000\056\004\077\005" +
    "\075\010\074\011\126\021\103\024\104\034\114\035\117" +
    "\052\076\102\121\103\115\105\107\120\125\121\102\122" +
    "\111\123\112\124\113\125\116\126\122\127\127\130\120" +
    "\131\106\001\002\000\006\023\uffe5\031\uffe5\001\002\000" +
    "\024\011\303\012\063\013\061\014\042\015\057\016\064" +
    "\017\043\020\300\027\301\001\002\000\010\007\uffeb\025" +
    "\uffeb\076\uffeb\001\002\000\010\007\uffd2\025\uffd2\076\uffd2" +
    "\001\002\000\004\030\304\001\002\000\010\007\uffec\025" +
    "\uffec\076\uffec\001\002\000\010\007\uffea\025\uffea\076\uffea" +
    "\001\002\000\056\004\077\005\075\010\074\011\126\021" +
    "\103\024\104\034\114\035\117\052\076\102\121\103\115" +
    "\105\107\120\125\121\102\122\111\123\112\124\113\125" +
    "\116\126\122\127\127\130\120\131\106\001\002\000\004" +
    "\031\270\001\002\000\004\033\307\001\002\000\022\011" +
    "\311\012\063\013\061\014\042\015\057\016\064\017\043" +
    "\020\300\001\002\000\010\007\uffe8\025\uffe8\076\uffe8\001" +
    "\002\000\010\007\uffe7\025\uffe7\076\uffe7\001\002\000\006" +
    "\023\177\025\313\001\002\000\010\007\uffcf\025\uffcf\076" +
    "\uffcf\001\002\000\012\004\316\005\317\105\320\131\321" +
    "\001\002\000\010\007\uffd1\025\uffd1\076\uffd1\001\002\000" +
    "\010\007\ufff0\025\ufff0\076\ufff0\001\002\000\010\007\uffef" +
    "\025\uffef\076\uffef\001\002\000\006\004\322\005\323\001" +
    "\002\000\010\007\ufff1\025\ufff1\076\ufff1\001\002\000\010" +
    "\007\uffee\025\uffee\076\uffee\001\002\000\010\007\uffed\025" +
    "\uffed\076\uffed\001\002\000\004\067\331\001\002\000\006" +
    "\011\uffa8\046\uffa8\001\002\000\006\011\324\046\327\001" +
    "\002\000\010\007\uffaa\025\uffaa\076\uffaa\001\002\000\006" +
    "\011\uffa9\046\uffa9\001\002\000\036\004\050\005\045\011" +
    "\065\012\063\013\061\014\042\015\057\016\064\017\043" +
    "\020\044\024\051\027\052\105\056\131\054\001\002\000" +
    "\004\007\333\001\002\000\006\011\uffa7\046\uffa7\001\002" +
    "\000\012\007\uffe3\023\uffe3\067\uffe3\076\uffe3\001\002\000" +
    "\006\023\040\076\344\001\002\000\016\011\035\040\013" +
    "\042\026\050\023\054\012\062\032\001\002\000\004\007" +
    "\341\001\002\000\016\011\ufff9\040\ufff9\042\ufff9\050\ufff9" +
    "\054\ufff9\062\ufff9\001\002\000\016\011\ufff8\040\ufff8\042" +
    "\ufff8\050\ufff8\054\ufff8\062\ufff8\001\002\000\016\011\ufffa" +
    "\040\ufffa\042\ufffa\050\ufffa\054\ufffa\062\ufffa\001\002\000" +
    "\004\002\ufffc\001\002\000\036\004\050\005\045\011\065" +
    "\012\063\013\061\014\042\015\057\016\064\017\043\020" +
    "\044\024\051\027\052\105\056\131\054\001\002\000\004" +
    "\007\ufff7\001\002\000\014\011\uffc7\040\uffc7\050\uffc7\054" +
    "\uffc7\062\uffc7\001\002\000\006\023\040\067\353\001\002" +
    "\000\014\011\035\040\013\050\023\054\012\062\032\001" +
    "\002\000\004\002\uffca\001\002\000\014\011\uffc8\040\uffc8" +
    "\050\uffc8\054\uffc8\062\uffc8\001\002\000\036\004\050\005" +
    "\045\011\065\012\063\013\061\014\042\015\057\016\064" +
    "\017\043\020\044\024\051\027\052\105\056\131\054\001" +
    "\002\000\004\076\355\001\002\000\056\004\077\005\075" +
    "\010\074\011\126\021\103\024\104\034\114\035\117\052" +
    "\076\102\121\103\115\105\107\120\125\121\102\122\111" +
    "\123\112\124\113\125\116\126\122\127\127\130\120\131" +
    "\106\001\002\000\044\007\357\037\140\053\136\070\132" +
    "\071\144\072\152\073\147\074\133\075\135\076\143\077" +
    "\142\100\145\101\134\104\151\105\137\106\146\107\141" +
    "\001\002\000\014\011\uffc6\040\uffc6\050\uffc6\054\uffc6\062" +
    "\uffc6\001\002\000\010\040\uffbb\050\uffbb\054\uffbb\001\002" +
    "\000\010\040\uffbc\050\uffbc\054\uffbc\001\002\000\004\002" +
    "\uffbe\001\002\000\004\024\364\001\002\000\010\011\035" +
    "\025\u017d\062\u017b\001\002\000\004\067\366\001\002\000" +
    "\036\004\050\005\045\011\065\012\063\013\061\014\042" +
    "\015\057\016\064\017\043\020\044\024\051\027\052\105" +
    "\056\131\054\001\002\000\004\007\370\001\002\000\012" +
    "\040\371\050\023\054\012\062\032\001\002\000\066\011" +
    "\u0109\036\u0116\041\u0118\046\u010d\047\u0113\050\023\051\u010e" +
    "\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112\u0106\113" +
    "\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102\122\111" +
    "\123\112\124\113\125\116\126\122\127\127\130\120\001" +
    "\002\000\010\040\371\050\023\054\012\001\002\000\130" +
    "\004\uffb7\005\uffb7\010\uffb7\011\uffb7\021\uffb7\024\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\056\uffb7\061" +
    "\uffb7\064\uffb7\065\uffb7\067\uffb7\102\uffb7\103\uffb7\105\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117" +
    "\uffb7\120\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7" +
    "\126\uffb7\127\uffb7\130\uffb7\131\uffb7\001\002\000\010\040" +
    "\371\050\023\054\012\001\002\000\130\004\uffb5\005\uffb5" +
    "\010\uffb5\011\uffb5\021\uffb5\024\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\041\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\054\uffb5\056\uffb5\061\uffb5\064\uffb5\065" +
    "\uffb5\067\uffb5\102\uffb5\103\uffb5\105\uffb5\111\uffb5\112\uffb5" +
    "\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5\121" +
    "\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5" +
    "\130\uffb5\131\uffb5\001\002\000\130\004\uffb8\005\uffb8\010" +
    "\uffb8\011\uffb8\021\uffb8\024\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\040\uffb8\041\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\054\uffb8\056\uffb8\061\uffb8\064\uffb8\065\uffb8" +
    "\067\uffb8\102\uffb8\103\uffb8\105\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8" +
    "\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\130" +
    "\uffb8\131\uffb8\001\002\000\010\040\371\050\023\054\012" +
    "\001\002\000\130\004\uffb6\005\uffb6\010\uffb6\011\uffb6\021" +
    "\uffb6\024\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054" +
    "\uffb6\056\uffb6\061\uffb6\064\uffb6\065\uffb6\067\uffb6\102\uffb6" +
    "\103\uffb6\105\uffb6\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115" +
    "\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6" +
    "\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\001" +
    "\002\000\004\007\u0179\001\002\000\126\004\uffa0\005\uffa0" +
    "\010\uffa0\011\uffa0\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\041\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\054\uffa0\056\uffa0\061\uffa0\064\uffa0\065\uffa0\067" +
    "\uffa0\102\uffa0\103\uffa0\105\uffa0\111\uffa0\112\uffa0\113\uffa0" +
    "\114\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0\122" +
    "\uffa0\123\uffa0\124\uffa0\125\uffa0\126\uffa0\127\uffa0\130\uffa0" +
    "\131\uffa0\001\002\000\126\004\uff9d\005\uff9d\010\uff9d\011" +
    "\uff9d\021\uff9d\024\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054" +
    "\uff9d\056\uff9d\061\uff9d\064\uff9d\065\uff9d\067\uff9d\102\uff9d" +
    "\103\uff9d\105\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\115" +
    "\uff9d\116\uff9d\117\uff9d\120\uff9d\121\uff9d\122\uff9d\123\uff9d" +
    "\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131\uff9d\001" +
    "\002\000\126\004\uff94\005\uff94\010\uff94\011\uff94\021\uff94" +
    "\024\uff94\034\uff94\035\uff94\036\uff94\041\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94\056\uff94" +
    "\061\uff94\064\uff94\065\uff94\067\uff94\102\uff94\103\uff94\105" +
    "\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\116\uff94" +
    "\117\uff94\120\uff94\121\uff94\122\uff94\123\uff94\124\uff94\125" +
    "\uff94\126\uff94\127\uff94\130\uff94\131\uff94\001\002\000\004" +
    "\011\u0142\001\002\000\004\007\u0173\001\002\000\126\004" +
    "\uff9b\005\uff9b\010\uff9b\011\uff9b\021\uff9b\024\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\041\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\054\uff9b\056\uff9b\061\uff9b\064\uff9b" +
    "\065\uff9b\067\uff9b\102\uff9b\103\uff9b\105\uff9b\111\uff9b\112" +
    "\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b" +
    "\121\uff9b\122\uff9b\123\uff9b\124\uff9b\125\uff9b\126\uff9b\127" +
    "\uff9b\130\uff9b\131\uff9b\001\002\000\070\011\uffa1\036\uffa1" +
    "\041\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\054\uffa1\056" +
    "\uffa1\061\uffa1\064\uffa1\065\uffa1\111\uffa1\112\uffa1\113\uffa1" +
    "\114\uffa1\115\uffa1\116\uffa1\120\uffa1\121\uffa1\122\uffa1\123" +
    "\uffa1\124\uffa1\125\uffa1\126\uffa1\127\uffa1\130\uffa1\001\002" +
    "\000\012\006\uffe1\024\173\030\uffe1\063\uffe1\001\002\000" +
    "\126\004\uff9a\005\uff9a\010\uff9a\011\uff9a\021\uff9a\024\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\041\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\056\uff9a\061\uff9a" +
    "\064\uff9a\065\uff9a\067\uff9a\102\uff9a\103\uff9a\105\uff9a\111" +
    "\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a" +
    "\120\uff9a\121\uff9a\122\uff9a\123\uff9a\124\uff9a\125\uff9a\126" +
    "\uff9a\127\uff9a\130\uff9a\131\uff9a\001\002\000\066\011\u0109" +
    "\036\u0116\041\u0118\046\u0171\047\u0113\050\023\051\u010e\054" +
    "\012\056\u0114\064\u0111\065\u0105\111\u0112\112\u0106\113\u0101" +
    "\114\u0110\115\u010f\116\u011e\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\001\002" +
    "\000\126\004\uff99\005\uff99\010\uff99\011\uff99\021\uff99\024" +
    "\uff99\034\uff99\035\uff99\036\uff99\041\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\052\uff99\054\uff99\056\uff99\061" +
    "\uff99\064\uff99\065\uff99\067\uff99\102\uff99\103\uff99\105\uff99" +
    "\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117" +
    "\uff99\120\uff99\121\uff99\122\uff99\123\uff99\124\uff99\125\uff99" +
    "\126\uff99\127\uff99\130\uff99\131\uff99\001\002\000\004\007" +
    "\u0170\001\002\000\056\004\077\005\075\010\074\011\126" +
    "\021\103\024\104\034\114\035\117\052\076\102\121\103" +
    "\115\105\107\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\131\106\001\002\000" +
    "\004\024\u0160\001\002\000\004\007\u015f\001\002\000\056" +
    "\004\077\005\075\010\074\011\126\021\103\024\104\034" +
    "\114\035\117\052\076\102\121\103\115\105\107\120\125" +
    "\121\102\122\111\123\112\124\113\125\116\126\122\127" +
    "\127\130\120\131\106\001\002\000\004\024\u0157\001\002" +
    "\000\004\011\u0142\001\002\000\064\011\u0109\036\u0116\041" +
    "\u0118\047\u0113\050\023\051\u010e\054\012\056\u0114\064\u0111" +
    "\065\u0105\111\u0112\112\u0106\113\u0101\114\u0110\115\u010f\116" +
    "\u011e\120\125\121\102\122\111\123\112\124\113\125\116" +
    "\126\122\127\127\130\120\001\002\000\004\007\u0146\001" +
    "\002\000\004\024\u0141\001\002\000\126\004\uff97\005\uff97" +
    "\010\uff97\011\uff97\021\uff97\024\uff97\034\uff97\035\uff97\036" +
    "\uff97\041\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\054\uff97\056\uff97\061\uff97\064\uff97\065\uff97\067" +
    "\uff97\102\uff97\103\uff97\105\uff97\111\uff97\112\uff97\113\uff97" +
    "\114\uff97\115\uff97\116\uff97\117\uff97\120\uff97\121\uff97\122" +
    "\uff97\123\uff97\124\uff97\125\uff97\126\uff97\127\uff97\130\uff97" +
    "\131\uff97\001\002\000\056\004\077\005\075\010\074\011" +
    "\126\021\103\024\104\034\114\035\117\052\076\102\121" +
    "\103\115\105\107\120\125\121\102\122\111\123\112\124" +
    "\113\125\116\126\122\127\127\130\120\131\106\001\002" +
    "\000\012\006\u0127\024\u0126\030\u0128\063\u0125\001\002\000" +
    "\126\004\uff98\005\uff98\010\uff98\011\uff98\021\uff98\024\uff98" +
    "\034\uff98\035\uff98\036\uff98\041\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\054\uff98\056\uff98\061\uff98" +
    "\064\uff98\065\uff98\067\uff98\102\uff98\103\uff98\105\uff98\111" +
    "\uff98\112\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98" +
    "\120\uff98\121\uff98\122\uff98\123\uff98\124\uff98\125\uff98\126" +
    "\uff98\127\uff98\130\uff98\131\uff98\001\002\000\126\004\uff9c" +
    "\005\uff9c\010\uff9c\011\uff9c\021\uff9c\024\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\041\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\054\uff9c\056\uff9c\061\uff9c\064\uff9c\065" +
    "\uff9c\067\uff9c\102\uff9c\103\uff9c\105\uff9c\111\uff9c\112\uff9c" +
    "\113\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\121" +
    "\uff9c\122\uff9c\123\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c" +
    "\130\uff9c\131\uff9c\001\002\000\004\007\u0124\001\002\000" +
    "\126\004\uff9e\005\uff9e\010\uff9e\011\uff9e\021\uff9e\024\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\041\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\054\uff9e\056\uff9e\061\uff9e" +
    "\064\uff9e\065\uff9e\067\uff9e\102\uff9e\103\uff9e\105\uff9e\111" +
    "\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e\117\uff9e" +
    "\120\uff9e\121\uff9e\122\uff9e\123\uff9e\124\uff9e\125\uff9e\126" +
    "\uff9e\127\uff9e\130\uff9e\131\uff9e\001\002\000\004\024\u0120" +
    "\001\002\000\126\004\uff93\005\uff93\010\uff93\011\uff93\021" +
    "\uff93\024\uff93\034\uff93\035\uff93\036\uff93\041\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\054\uff93\056" +
    "\uff93\061\uff93\064\uff93\065\uff93\067\uff93\102\uff93\103\uff93" +
    "\105\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93\116" +
    "\uff93\117\uff93\120\uff93\121\uff93\122\uff93\123\uff93\124\uff93" +
    "\125\uff93\126\uff93\127\uff93\130\uff93\131\uff93\001\002\000" +
    "\056\004\077\005\075\010\074\011\126\021\103\024\104" +
    "\034\114\035\117\052\076\102\121\103\115\105\107\120" +
    "\125\121\102\122\111\123\112\124\113\125\116\126\122" +
    "\127\127\130\120\131\106\001\002\000\006\023\177\025" +
    "\u0122\001\002\000\004\007\u0123\001\002\000\126\004\uff76" +
    "\005\uff76\010\uff76\011\uff76\021\uff76\024\uff76\034\uff76\035" +
    "\uff76\036\uff76\041\uff76\045\uff76\046\uff76\047\uff76\050\uff76" +
    "\051\uff76\052\uff76\054\uff76\056\uff76\061\uff76\064\uff76\065" +
    "\uff76\067\uff76\102\uff76\103\uff76\105\uff76\111\uff76\112\uff76" +
    "\113\uff76\114\uff76\115\uff76\116\uff76\117\uff76\120\uff76\121" +
    "\uff76\122\uff76\123\uff76\124\uff76\125\uff76\126\uff76\127\uff76" +
    "\130\uff76\131\uff76\001\002\000\126\004\uff95\005\uff95\010" +
    "\uff95\011\uff95\021\uff95\024\uff95\034\uff95\035\uff95\036\uff95" +
    "\041\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\054\uff95\056\uff95\061\uff95\064\uff95\065\uff95\067\uff95" +
    "\102\uff95\103\uff95\105\uff95\111\uff95\112\uff95\113\uff95\114" +
    "\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95\122\uff95" +
    "\123\uff95\124\uff95\125\uff95\126\uff95\127\uff95\130\uff95\131" +
    "\uff95\001\002\000\004\011\u012e\001\002\000\056\004\077" +
    "\005\075\010\074\011\126\021\103\024\104\034\114\035" +
    "\117\052\076\102\121\103\115\105\107\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\131\106\001\002\000\056\004\077\005\075\010\074" +
    "\011\126\021\103\024\104\034\114\035\117\052\076\102" +
    "\121\103\115\105\107\120\125\121\102\122\111\123\112" +
    "\124\113\125\116\126\122\127\127\130\120\131\106\001" +
    "\002\000\056\004\077\005\075\010\074\011\126\021\103" +
    "\024\104\034\114\035\117\052\076\102\121\103\115\105" +
    "\107\120\125\121\102\122\111\123\112\124\113\125\116" +
    "\126\122\127\127\130\120\131\106\001\002\000\006\023" +
    "\177\031\u012a\001\002\000\016\006\uffe0\024\uffe0\025\uffe0" +
    "\030\uffe0\043\uffe0\063\uffe0\001\002\000\050\007\uff91\037" +
    "\140\044\uff91\053\136\060\uff91\070\132\071\144\072\152" +
    "\073\147\074\133\075\135\076\143\077\142\100\145\101" +
    "\134\104\151\105\137\106\146\107\141\001\002\000\006" +
    "\023\177\025\u012d\001\002\000\016\006\uffdf\024\uffdf\025" +
    "\uffdf\030\uffdf\043\uffdf\063\uffdf\001\002\000\016\006\uffde" +
    "\024\uffde\025\uffde\030\uffde\043\uffde\063\uffde\001\002\000" +
    "\044\033\u0130\037\140\053\136\070\132\071\144\072\152" +
    "\073\147\074\133\075\135\076\143\077\142\100\145\101" +
    "\134\104\151\105\137\106\146\107\141\001\002\000\056" +
    "\004\077\005\075\010\074\011\126\021\103\024\104\034" +
    "\114\035\117\052\076\102\121\103\115\105\107\120\125" +
    "\121\102\122\111\123\112\124\113\125\116\126\122\127" +
    "\127\130\120\131\106\001\002\000\062\004\077\005\075" +
    "\010\074\011\126\021\103\024\104\034\114\035\117\046" +
    "\u0137\052\076\102\121\103\115\105\107\117\u0138\120\125" +
    "\121\102\122\111\123\112\124\113\125\116\126\122\127" +
    "\127\130\120\131\106\001\002\000\006\023\177\067\u0134" +
    "\001\002\000\062\004\uff83\005\uff83\010\uff83\011\uff83\021" +
    "\uff83\024\uff83\034\uff83\035\uff83\046\uff83\052\uff83\102\uff83" +
    "\103\uff83\105\uff83\117\uff83\120\uff83\121\uff83\122\uff83\123" +
    "\uff83\124\uff83\125\uff83\126\uff83\127\uff83\130\uff83\131\uff83" +
    "\001\002\000\066\011\u0109\036\u0116\040\371\041\u0118\047" +
    "\u0113\050\023\051\u010e\054\012\056\u0114\064\u0111\065\u0105" +
    "\111\u0112\112\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120" +
    "\125\121\102\122\111\123\112\124\113\125\116\126\122" +
    "\127\127\130\120\001\002\000\062\004\uff82\005\uff82\010" +
    "\uff82\011\uff82\021\uff82\024\uff82\034\uff82\035\uff82\046\uff82" +
    "\052\uff82\102\uff82\103\uff82\105\uff82\117\uff82\120\uff82\121" +
    "\uff82\122\uff82\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82" +
    "\130\uff82\131\uff82\001\002\000\062\004\uff81\005\uff81\010" +
    "\uff81\011\uff81\021\uff81\024\uff81\034\uff81\035\uff81\046\uff81" +
    "\052\uff81\102\uff81\103\uff81\105\uff81\117\uff81\120\uff81\121" +
    "\uff81\122\uff81\123\uff81\124\uff81\125\uff81\126\uff81\127\uff81" +
    "\130\uff81\131\uff81\001\002\000\004\007\u0140\001\002\000" +
    "\066\011\u0109\036\u0116\040\371\041\u0118\047\u0113\050\023" +
    "\051\u010e\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112" +
    "\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\001\002\000\004\067\u013b\001\002\000\062\004\uff84" +
    "\005\uff84\010\uff84\011\uff84\021\uff84\024\uff84\034\uff84\035" +
    "\uff84\046\uff84\052\uff84\102\uff84\103\uff84\105\uff84\117\uff84" +
    "\120\uff84\121\uff84\122\uff84\123\uff84\124\uff84\125\uff84\126" +
    "\uff84\127\uff84\130\uff84\131\uff84\001\002\000\004\046\u013c" +
    "\001\002\000\004\007\u013d\001\002\000\126\004\uff85\005" +
    "\uff85\010\uff85\011\uff85\021\uff85\024\uff85\034\uff85\035\uff85" +
    "\036\uff85\041\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051" +
    "\uff85\052\uff85\054\uff85\056\uff85\061\uff85\064\uff85\065\uff85" +
    "\067\uff85\102\uff85\103\uff85\105\uff85\111\uff85\112\uff85\113" +
    "\uff85\114\uff85\115\uff85\116\uff85\117\uff85\120\uff85\121\uff85" +
    "\122\uff85\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130" +
    "\uff85\131\uff85\001\002\000\004\067\uff80\001\002\000\004" +
    "\067\uff7f\001\002\000\126\004\uff86\005\uff86\010\uff86\011" +
    "\uff86\021\uff86\024\uff86\034\uff86\035\uff86\036\uff86\041\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\054" +
    "\uff86\056\uff86\061\uff86\064\uff86\065\uff86\067\uff86\102\uff86" +
    "\103\uff86\105\uff86\111\uff86\112\uff86\113\uff86\114\uff86\115" +
    "\uff86\116\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123\uff86" +
    "\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86\131\uff86\001" +
    "\002\000\004\011\u0142\001\002\000\016\006\uffe1\024\uffe1" +
    "\025\uffe1\030\uffe1\043\uffe1\063\uffe1\001\002\000\012\024" +
    "\u0126\025\u0144\030\u0128\063\u0125\001\002\000\004\007\u0145" +
    "\001\002\000\126\004\uff96\005\uff96\010\uff96\011\uff96\021" +
    "\uff96\024\uff96\034\uff96\035\uff96\036\uff96\041\uff96\045\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\054\uff96\056" +
    "\uff96\061\uff96\064\uff96\065\uff96\067\uff96\102\uff96\103\uff96" +
    "\105\uff96\111\uff96\112\uff96\113\uff96\114\uff96\115\uff96\116" +
    "\uff96\117\uff96\120\uff96\121\uff96\122\uff96\123\uff96\124\uff96" +
    "\125\uff96\126\uff96\127\uff96\130\uff96\131\uff96\001\002\000" +
    "\126\004\uff9f\005\uff9f\010\uff9f\011\uff9f\021\uff9f\024\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\041\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\054\uff9f\056\uff9f\061\uff9f" +
    "\064\uff9f\065\uff9f\067\uff9f\102\uff9f\103\uff9f\105\uff9f\111" +
    "\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f" +
    "\120\uff9f\121\uff9f\122\uff9f\123\uff9f\124\uff9f\125\uff9f\126" +
    "\uff9f\127\uff9f\130\uff9f\131\uff9f\001\002\000\066\011\u0109" +
    "\036\u0116\041\u0118\047\u0113\050\023\051\u010e\054\012\056" +
    "\u0114\061\u0149\064\u0111\065\u0105\111\u0112\112\u0106\113\u0101" +
    "\114\u0110\115\u010f\116\u011e\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\001\002" +
    "\000\070\011\uffa2\036\uffa2\041\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\054\uffa2\056\uffa2\061\uffa2\064\uffa2\065\uffa2" +
    "\111\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2\120" +
    "\uffa2\121\uffa2\122\uffa2\123\uffa2\124\uffa2\125\uffa2\126\uffa2" +
    "\127\uffa2\130\uffa2\001\002\000\056\004\077\005\075\010" +
    "\074\011\126\021\103\024\104\034\114\035\117\052\076" +
    "\102\121\103\115\105\107\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\131\106" +
    "\001\002\000\044\007\u014b\037\140\053\136\070\132\071" +
    "\144\072\152\073\147\074\133\075\135\076\143\077\142" +
    "\100\145\101\134\104\151\105\137\106\146\107\141\001" +
    "\002\000\126\004\uff7c\005\uff7c\010\uff7c\011\uff7c\021\uff7c" +
    "\024\uff7c\034\uff7c\035\uff7c\036\uff7c\041\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\054\uff7c\056\uff7c" +
    "\061\uff7c\064\uff7c\065\uff7c\067\uff7c\102\uff7c\103\uff7c\105" +
    "\uff7c\111\uff7c\112\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c" +
    "\117\uff7c\120\uff7c\121\uff7c\122\uff7c\123\uff7c\124\uff7c\125" +
    "\uff7c\126\uff7c\127\uff7c\130\uff7c\131\uff7c\001\002\000\006" +
    "\044\u014d\060\u014e\001\002\000\056\004\077\005\075\010" +
    "\074\011\126\021\103\024\104\034\114\035\117\052\076" +
    "\102\121\103\115\105\107\120\125\121\102\122\111\123" +
    "\112\124\113\125\116\126\122\127\127\130\120\131\106" +
    "\001\002\000\056\004\077\005\075\010\074\011\126\021" +
    "\103\024\104\034\114\035\117\052\076\102\121\103\115" +
    "\105\107\120\125\121\102\122\111\123\112\124\113\125" +
    "\116\126\122\127\127\130\120\131\106\001\002\000\044" +
    "\037\140\043\u0150\053\136\070\132\071\144\072\152\073" +
    "\147\074\133\075\135\076\143\077\142\100\145\101\134" +
    "\104\151\105\137\106\146\107\141\001\002\000\066\011" +
    "\u0109\036\u0116\040\371\041\u0118\047\u0113\050\023\051\u010e" +
    "\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112\u0106\113" +
    "\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102\122\111" +
    "\123\112\124\113\125\116\126\122\127\127\130\120\001" +
    "\002\000\126\004\uff79\005\uff79\010\uff79\011\uff79\021\uff79" +
    "\024\uff79\034\uff79\035\uff79\036\uff79\041\uff79\045\uff79\046" +
    "\uff79\047\uff79\050\uff79\051\uff79\052\uff79\054\uff79\056\uff79" +
    "\061\uff79\064\uff79\065\uff79\067\uff79\102\uff79\103\uff79\105" +
    "\uff79\111\uff79\112\uff79\113\uff79\114\uff79\115\uff79\116\uff79" +
    "\117\uff79\120\uff79\121\uff79\122\uff79\123\uff79\124\uff79\125" +
    "\uff79\126\uff79\127\uff79\130\uff79\131\uff79\001\002\000\126" +
    "\004\uff7b\005\uff7b\010\uff7b\011\uff7b\021\uff7b\024\uff7b\034" +
    "\uff7b\035\uff7b\036\uff7b\041\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\051\uff7b\052\uff7b\054\uff7b\056\uff7b\061\uff7b\064" +
    "\uff7b\065\uff7b\067\uff7b\102\uff7b\103\uff7b\105\uff7b\111\uff7b" +
    "\112\uff7b\113\uff7b\114\uff7b\115\uff7b\116\uff7b\117\uff7b\120" +
    "\uff7b\121\uff7b\122\uff7b\123\uff7b\124\uff7b\125\uff7b\126\uff7b" +
    "\127\uff7b\130\uff7b\131\uff7b\001\002\000\044\037\140\043" +
    "\u0154\053\136\070\132\071\144\072\152\073\147\074\133" +
    "\075\135\076\143\077\142\100\145\101\134\104\151\105" +
    "\137\106\146\107\141\001\002\000\066\011\u0109\036\u0116" +
    "\040\371\041\u0118\047\u0113\050\023\051\u010e\054\012\056" +
    "\u0114\064\u0111\065\u0105\111\u0112\112\u0106\113\u0101\114\u0110" +
    "\115\u010f\116\u011e\120\125\121\102\122\111\123\112\124" +
    "\113\125\116\126\122\127\127\130\120\001\002\000\126" +
    "\004\uff78\005\uff78\010\uff78\011\uff78\021\uff78\024\uff78\034" +
    "\uff78\035\uff78\036\uff78\041\uff78\045\uff78\046\uff78\047\uff78" +
    "\050\uff78\051\uff78\052\uff78\054\uff78\056\uff78\061\uff78\064" +
    "\uff78\065\uff78\067\uff78\102\uff78\103\uff78\105\uff78\111\uff78" +
    "\112\uff78\113\uff78\114\uff78\115\uff78\116\uff78\117\uff78\120" +
    "\uff78\121\uff78\122\uff78\123\uff78\124\uff78\125\uff78\126\uff78" +
    "\127\uff78\130\uff78\131\uff78\001\002\000\126\004\uff7a\005" +
    "\uff7a\010\uff7a\011\uff7a\021\uff7a\024\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\041\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051" +
    "\uff7a\052\uff7a\054\uff7a\056\uff7a\061\uff7a\064\uff7a\065\uff7a" +
    "\067\uff7a\102\uff7a\103\uff7a\105\uff7a\111\uff7a\112\uff7a\113" +
    "\uff7a\114\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a\121\uff7a" +
    "\122\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\127\uff7a\130" +
    "\uff7a\131\uff7a\001\002\000\004\011\u0142\001\002\000\012" +
    "\024\u0126\025\u0159\030\u0128\063\u0125\001\002\000\004\007" +
    "\u015a\001\002\000\126\004\uff75\005\uff75\010\uff75\011\uff75" +
    "\021\uff75\024\uff75\034\uff75\035\uff75\036\uff75\041\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\054\uff75" +
    "\056\uff75\061\uff75\064\uff75\065\uff75\067\uff75\102\uff75\103" +
    "\uff75\105\uff75\111\uff75\112\uff75\113\uff75\114\uff75\115\uff75" +
    "\116\uff75\117\uff75\120\uff75\121\uff75\122\uff75\123\uff75\124" +
    "\uff75\125\uff75\126\uff75\127\uff75\130\uff75\131\uff75\001\002" +
    "\000\044\037\140\043\u015c\053\136\070\132\071\144\072" +
    "\152\073\147\074\133\075\135\076\143\077\142\100\145" +
    "\101\134\104\151\105\137\106\146\107\141\001\002\000" +
    "\066\011\u0109\036\u0116\040\371\041\u0118\047\u0113\050\023" +
    "\051\u010e\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112" +
    "\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\001\002\000\126\004\uff7d\005\uff7d\010\uff7d\011\uff7d" +
    "\021\uff7d\024\uff7d\034\uff7d\035\uff7d\036\uff7d\041\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\054\uff7d" +
    "\056\uff7d\061\uff7d\064\uff7d\065\uff7d\067\uff7d\102\uff7d\103" +
    "\uff7d\105\uff7d\111\uff7d\112\uff7d\113\uff7d\114\uff7d\115\uff7d" +
    "\116\uff7d\117\uff7d\120\uff7d\121\uff7d\122\uff7d\123\uff7d\124" +
    "\uff7d\125\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\001\002" +
    "\000\126\004\uff7e\005\uff7e\010\uff7e\011\uff7e\021\uff7e\024" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\041\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\051\uff7e\052\uff7e\054\uff7e\056\uff7e\061" +
    "\uff7e\064\uff7e\065\uff7e\067\uff7e\102\uff7e\103\uff7e\105\uff7e" +
    "\111\uff7e\112\uff7e\113\uff7e\114\uff7e\115\uff7e\116\uff7e\117" +
    "\uff7e\120\uff7e\121\uff7e\122\uff7e\123\uff7e\124\uff7e\125\uff7e" +
    "\126\uff7e\127\uff7e\130\uff7e\131\uff7e\001\002\000\126\004" +
    "\uff8e\005\uff8e\010\uff8e\011\uff8e\021\uff8e\024\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\041\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\052\uff8e\054\uff8e\056\uff8e\061\uff8e\064\uff8e" +
    "\065\uff8e\067\uff8e\102\uff8e\103\uff8e\105\uff8e\111\uff8e\112" +
    "\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\121\uff8e\122\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127" +
    "\uff8e\130\uff8e\131\uff8e\001\002\000\056\004\077\005\075" +
    "\010\074\011\126\021\103\024\104\034\114\035\117\052" +
    "\076\102\121\103\115\105\107\120\125\121\102\122\111" +
    "\123\112\124\113\125\116\126\122\127\127\130\120\131" +
    "\106\001\002\000\006\023\177\025\u0162\001\002\000\004" +
    "\007\u0163\001\002\000\126\004\uff77\005\uff77\010\uff77\011" +
    "\uff77\021\uff77\024\uff77\034\uff77\035\uff77\036\uff77\041\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\054" +
    "\uff77\056\uff77\061\uff77\064\uff77\065\uff77\067\uff77\102\uff77" +
    "\103\uff77\105\uff77\111\uff77\112\uff77\113\uff77\114\uff77\115" +
    "\uff77\116\uff77\117\uff77\120\uff77\121\uff77\122\uff77\123\uff77" +
    "\124\uff77\125\uff77\126\uff77\127\uff77\130\uff77\131\uff77\001" +
    "\002\000\044\037\140\053\136\057\u0165\070\132\071\144" +
    "\072\152\073\147\074\133\075\135\076\143\077\142\100" +
    "\145\101\134\104\151\105\137\106\146\107\141\001\002" +
    "\000\066\011\u0109\036\u0116\040\u0167\041\u0118\047\u0113\050" +
    "\023\051\u010e\054\012\056\u0114\064\u0111\065\u0105\111\u0112" +
    "\112\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120\125\121" +
    "\102\122\111\123\112\124\113\125\116\126\122\127\127" +
    "\130\120\001\002\000\126\004\uff89\005\uff89\010\uff89\011" +
    "\uff89\021\uff89\024\uff89\034\uff89\035\uff89\036\uff89\041\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\054" +
    "\uff89\056\uff89\061\uff89\064\uff89\065\uff89\067\uff89\102\uff89" +
    "\103\uff89\105\uff89\111\uff89\112\uff89\113\uff89\114\uff89\115" +
    "\uff89\116\uff89\117\uff89\120\uff89\121\uff89\122\uff89\123\uff89" +
    "\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89\001" +
    "\002\000\066\011\u0109\036\u0116\041\u0118\046\u016e\047\u0113" +
    "\050\023\051\u010e\054\012\056\u0114\064\u0111\065\u0105\111" +
    "\u0112\112\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120\125" +
    "\121\102\122\111\123\112\124\113\125\116\126\122\127" +
    "\127\130\120\001\002\000\126\004\uff8c\005\uff8c\010\uff8c" +
    "\011\uff8c\021\uff8c\024\uff8c\034\uff8c\035\uff8c\036\uff8c\041" +
    "\uff8c\045\u016b\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\054\uff8c\056\uff8c\061\uff8c\064\uff8c\065\uff8c\067\uff8c\102" +
    "\uff8c\103\uff8c\105\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c" +
    "\115\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123" +
    "\uff8c\124\uff8c\125\uff8c\126\uff8c\127\uff8c\130\uff8c\131\uff8c" +
    "\001\002\000\130\004\uff8b\005\uff8b\007\u016a\010\uff8b\011" +
    "\uff8b\021\uff8b\024\uff8b\034\uff8b\035\uff8b\036\uff8b\041\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\054" +
    "\uff8b\056\uff8b\061\uff8b\064\uff8b\065\uff8b\067\uff8b\102\uff8b" +
    "\103\uff8b\105\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115" +
    "\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uff8b\123\uff8b" +
    "\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b\001" +
    "\002\000\126\004\uff8a\005\uff8a\010\uff8a\011\uff8a\021\uff8a" +
    "\024\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\054\uff8a\056\uff8a" +
    "\061\uff8a\064\uff8a\065\uff8a\067\uff8a\102\uff8a\103\uff8a\105" +
    "\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116\uff8a" +
    "\117\uff8a\120\uff8a\121\uff8a\122\uff8a\123\uff8a\124\uff8a\125" +
    "\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\001\002\000\066" +
    "\011\u0109\036\u0116\040\u0167\041\u0118\047\u0113\050\023\051" +
    "\u010e\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112\u0106" +
    "\113\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102\122" +
    "\111\123\112\124\113\125\116\126\122\127\127\130\120" +
    "\001\002\000\126\004\uff8d\005\uff8d\010\uff8d\011\uff8d\021" +
    "\uff8d\024\uff8d\034\uff8d\035\uff8d\036\uff8d\041\uff8d\045\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\054\uff8d\056" +
    "\uff8d\061\uff8d\064\uff8d\065\uff8d\067\uff8d\102\uff8d\103\uff8d" +
    "\105\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\116" +
    "\uff8d\117\uff8d\120\uff8d\121\uff8d\122\uff8d\123\uff8d\124\uff8d" +
    "\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d\001\002\000" +
    "\066\011\u0109\036\u0116\041\u0118\046\u016f\047\u0113\050\023" +
    "\051\u010e\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112" +
    "\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\001\002\000\130\004\uff87\005\uff87\007\uff87\010\uff87" +
    "\011\uff87\021\uff87\024\uff87\034\uff87\035\uff87\036\uff87\041" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\054\uff87\056\uff87\061\uff87\064\uff87\065\uff87\067\uff87\102" +
    "\uff87\103\uff87\105\uff87\111\uff87\112\uff87\113\uff87\114\uff87" +
    "\115\uff87\116\uff87\117\uff87\120\uff87\121\uff87\122\uff87\123" +
    "\uff87\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87" +
    "\001\002\000\130\004\uff88\005\uff88\007\uff88\010\uff88\011" +
    "\uff88\021\uff88\024\uff88\034\uff88\035\uff88\036\uff88\041\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\054" +
    "\uff88\056\uff88\061\uff88\064\uff88\065\uff88\067\uff88\102\uff88" +
    "\103\uff88\105\uff88\111\uff88\112\uff88\113\uff88\114\uff88\115" +
    "\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122\uff88\123\uff88" +
    "\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131\uff88\001" +
    "\002\000\130\004\uffa3\005\uffa3\010\uffa3\011\uffa3\021\uffa3" +
    "\024\uffa3\034\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\054\uffa3" +
    "\056\uffa3\061\uffa3\064\uffa3\065\uffa3\067\uffa3\102\uffa3\103" +
    "\uffa3\105\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3" +
    "\116\uffa3\117\uffa3\120\uffa3\121\uffa3\122\uffa3\123\uffa3\124" +
    "\uffa3\125\uffa3\126\uffa3\127\uffa3\130\uffa3\131\uffa3\001\002" +
    "\000\004\007\u0172\001\002\000\130\004\uffa4\005\uffa4\010" +
    "\uffa4\011\uffa4\021\uffa4\024\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\040\uffa4\041\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\054\uffa4\056\uffa4\061\uffa4\064\uffa4\065\uffa4" +
    "\067\uffa4\102\uffa4\103\uffa4\105\uffa4\111\uffa4\112\uffa4\113" +
    "\uffa4\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4" +
    "\122\uffa4\123\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130" +
    "\uffa4\131\uffa4\001\002\000\126\004\uff90\005\uff90\010\uff90" +
    "\011\uff90\021\uff90\024\uff90\034\uff90\035\uff90\036\uff90\041" +
    "\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90" +
    "\054\uff90\056\uff90\061\uff90\064\uff90\065\uff90\067\uff90\102" +
    "\uff90\103\uff90\105\uff90\111\uff90\112\uff90\113\uff90\114\uff90" +
    "\115\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122\uff90\123" +
    "\uff90\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90" +
    "\001\002\000\012\024\u0126\030\u0128\043\u0175\063\u0125\001" +
    "\002\000\064\011\u0109\036\u0116\041\u0118\047\u0113\050\023" +
    "\051\u010e\054\012\056\u0114\064\u0111\065\u0105\111\u0112\112" +
    "\u0106\113\u0101\114\u0110\115\u010f\116\u011e\120\125\121\102" +
    "\122\111\123\112\124\113\125\116\126\122\127\127\130" +
    "\120\001\002\000\066\011\u0109\036\u0116\041\u0118\046\u0177" +
    "\047\u0113\050\023\051\u010e\054\012\056\u0114\064\u0111\065" +
    "\u0105\111\u0112\112\u0106\113\u0101\114\u0110\115\u010f\116\u011e" +
    "\120\125\121\102\122\111\123\112\124\113\125\116\126" +
    "\122\127\127\130\120\001\002\000\004\007\u0178\001\002" +
    "\000\126\004\uff92\005\uff92\010\uff92\011\uff92\021\uff92\024" +
    "\uff92\034\uff92\035\uff92\036\uff92\041\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\uff92\054\uff92\056\uff92\061" +
    "\uff92\064\uff92\065\uff92\067\uff92\102\uff92\103\uff92\105\uff92" +
    "\111\uff92\112\uff92\113\uff92\114\uff92\115\uff92\116\uff92\117" +
    "\uff92\120\uff92\121\uff92\122\uff92\123\uff92\124\uff92\125\uff92" +
    "\126\uff92\127\uff92\130\uff92\131\uff92\001\002\000\126\004" +
    "\uff8f\005\uff8f\010\uff8f\011\uff8f\021\uff8f\024\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\041\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\054\uff8f\056\uff8f\061\uff8f\064\uff8f" +
    "\065\uff8f\067\uff8f\102\uff8f\103\uff8f\105\uff8f\111\uff8f\112" +
    "\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f" +
    "\121\uff8f\122\uff8f\123\uff8f\124\uff8f\125\uff8f\126\uff8f\127" +
    "\uff8f\130\uff8f\131\uff8f\001\002\000\006\023\040\067\u018a" +
    "\001\002\000\004\011\035\001\002\000\006\007\u017e\025" +
    "\u017f\001\002\000\006\007\uffaf\067\uffaf\001\002\000\006" +
    "\011\035\062\u0181\001\002\000\006\007\uffb0\067\uffb0\001" +
    "\002\000\006\023\040\067\u0185\001\002\000\004\011\035" +
    "\001\002\000\006\023\040\067\u0183\001\002\000\036\004" +
    "\050\005\045\011\065\012\063\013\061\014\042\015\057" +
    "\016\064\017\043\020\044\024\051\027\052\105\056\131" +
    "\054\001\002\000\006\007\uffad\025\uffad\001\002\000\036" +
    "\004\050\005\045\011\065\012\063\013\061\014\042\015" +
    "\057\016\064\017\043\020\044\024\051\027\052\105\056" +
    "\131\054\001\002\000\006\007\uffae\025\uffae\001\002\000" +
    "\006\023\040\067\u0188\001\002\000\036\004\050\005\045" +
    "\011\065\012\063\013\061\014\042\015\057\016\064\017" +
    "\043\020\044\024\051\027\052\105\056\131\054\001\002" +
    "\000\006\007\uffab\025\uffab\001\002\000\036\004\050\005" +
    "\045\011\065\012\063\013\061\014\042\015\057\016\064" +
    "\017\043\020\044\024\051\027\052\105\056\131\054\001" +
    "\002\000\006\007\uffac\025\uffac\001\002\000\006\007\u018d" +
    "\023\040\001\002\000\016\022\027\040\013\042\026\050" +
    "\023\054\012\062\032\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffc5\001\002\000\066\011\u0109\036\u0116\041" +
    "\u0118\046\u0193\047\u0113\050\023\051\u010e\054\012\056\u0114" +
    "\064\u0111\065\u0105\111\u0112\112\u0106\113\u0101\114\u0110\115" +
    "\u010f\116\u011e\120\125\121\102\122\111\123\112\124\113" +
    "\125\116\126\122\127\127\130\120\001\002\000\004\063" +
    "\u0192\001\002\000\004\002\uffa5\001\002\000\004\063\u0194" +
    "\001\002\000\004\002\uffa6\001\002\000\004\024\364\001" +
    "\002\000\004\007\u0197\001\002\000\012\040\371\050\023" +
    "\054\012\062\032\001\002\000\010\040\371\050\023\054" +
    "\012\001\002\000\010\040\371\050\023\054\012\001\002" +
    "\000\130\004\uffb3\005\uffb3\010\uffb3\011\uffb3\021\uffb3\024" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3\056" +
    "\uffb3\061\uffb3\064\uffb3\065\uffb3\067\uffb3\102\uffb3\103\uffb3" +
    "\105\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116" +
    "\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3" +
    "\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\001\002\000" +
    "\130\004\uffb1\005\uffb1\010\uffb1\011\uffb1\021\uffb1\024\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\056\uffb1" +
    "\061\uffb1\064\uffb1\065\uffb1\067\uffb1\102\uffb1\103\uffb1\105" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1" +
    "\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125" +
    "\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001\002\000\130" +
    "\004\uffb4\005\uffb4\010\uffb4\011\uffb4\021\uffb4\024\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\056\uffb4\061" +
    "\uffb4\064\uffb4\065\uffb4\067\uffb4\102\uffb4\103\uffb4\105\uffb4" +
    "\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117" +
    "\uffb4\120\uffb4\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4" +
    "\126\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002\000\010\040" +
    "\371\050\023\054\012\001\002\000\130\004\uffb2\005\uffb2" +
    "\010\uffb2\011\uffb2\021\uffb2\024\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\040\uffb2\041\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\056\uffb2\061\uffb2\064\uffb2\065" +
    "\uffb2\067\uffb2\102\uffb2\103\uffb2\105\uffb2\111\uffb2\112\uffb2" +
    "\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121" +
    "\uffb2\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2" +
    "\130\uffb2\131\uffb2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\023\005\013\006\030\011" +
    "\014\012\016\014\017\015\024\042\027\043\015\045\021" +
    "\001\001\000\002\001\001\000\042\010\u018f\030\u0118\037" +
    "\u0107\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102" +
    "\047\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\023\011\u018e\042\027\043\015\045" +
    "\021\001\001\000\002\001\001\000\004\023\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\360\043" +
    "\361\045\357\001\001\000\002\001\001\000\010\016\347" +
    "\023\346\036\345\001\001\000\012\007\335\023\334\033" +
    "\337\035\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\035\023\033\034\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\033" +
    "\034\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\027\061\063\045\066\057\067\054\070\052\071\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\325\073\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\031\311\032" +
    "\104\055\071\056\077\057\107\060\100\061\175\062\072" +
    "\065\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\032\104\055\071\056\077\057\107\060\100\061\123" +
    "\062\072\065\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\032\104" +
    "\055\071\056\077\057\107\060\100\061\260\062\072\065" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\032" +
    "\104\055\071\056\077\057\107\060\100\061\253\062\072" +
    "\065\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\032\104\055\071\056\077\057\107\060\100\061\245" +
    "\062\072\065\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\032\104\055\071\056\077" +
    "\057\107\060\100\061\130\062\072\065\122\001\001\000" +
    "\002\001\001\000\022\032\104\055\071\056\077\057\107" +
    "\060\100\061\171\062\072\065\122\001\001\000\022\032" +
    "\104\055\071\056\077\057\107\060\100\061\170\062\072" +
    "\065\122\001\001\000\022\032\104\055\071\056\077\057" +
    "\107\060\100\061\167\062\072\065\122\001\001\000\022" +
    "\032\104\055\071\056\077\057\107\060\100\061\166\062" +
    "\072\065\122\001\001\000\022\032\104\055\071\056\077" +
    "\057\107\060\100\061\165\062\072\065\122\001\001\000" +
    "\022\032\104\055\071\056\077\057\107\060\100\061\164" +
    "\062\072\065\122\001\001\000\022\032\104\055\071\056" +
    "\077\057\107\060\100\061\163\062\072\065\122\001\001" +
    "\000\022\032\104\055\071\056\077\057\107\060\100\061" +
    "\162\062\072\065\122\001\001\000\022\032\104\055\071" +
    "\056\077\057\107\060\100\061\161\062\072\065\122\001" +
    "\001\000\022\032\104\055\071\056\077\057\107\060\100" +
    "\061\160\062\072\065\122\001\001\000\022\032\104\055" +
    "\071\056\077\057\107\060\100\061\157\062\072\065\122" +
    "\001\001\000\022\032\104\055\071\056\077\057\107\060" +
    "\100\061\156\062\072\065\122\001\001\000\022\032\104" +
    "\055\071\056\077\057\107\060\100\061\155\062\072\065" +
    "\122\001\001\000\022\032\104\055\071\056\077\057\107" +
    "\060\100\061\154\062\072\065\122\001\001\000\002\001" +
    "\001\000\022\032\104\055\071\056\077\057\107\060\100" +
    "\061\153\062\072\065\122\001\001\000\022\032\104\055" +
    "\071\056\077\057\107\060\100\061\152\062\072\065\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\031\174\032\104\055\071\056\077\057\107" +
    "\060\100\061\175\062\072\065\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\032\104" +
    "\055\071\056\077\057\107\060\100\061\200\062\072\065" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\104\055\071\056\077\057\107\060\100\061\202\062" +
    "\072\065\122\001\001\000\002\001\001\000\022\032\104" +
    "\055\071\056\077\057\107\060\100\061\204\062\072\065" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\032\104\055\071\056\077\057\107\060" +
    "\100\061\210\062\072\065\122\001\001\000\002\001\001" +
    "\000\022\032\104\055\071\056\077\057\107\060\100\061" +
    "\212\062\072\065\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\032\104\055\071\056\077\057\107\060" +
    "\100\061\215\062\072\065\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\032\104\055\071\056\077\057" +
    "\107\060\100\061\220\062\072\065\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\032\104\055\071\056" +
    "\077\057\107\060\100\061\223\062\072\065\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\032\104\055" +
    "\071\056\077\057\107\060\100\061\226\062\072\065\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\032\104\055\071\056\077" +
    "\057\107\060\100\061\233\062\072\065\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\032\104\055\071" +
    "\056\077\057\107\060\100\061\236\062\072\065\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\032\104" +
    "\055\071\056\077\057\107\060\100\061\241\062\072\065" +
    "\122\001\001\000\002\001\001\000\022\032\104\055\071" +
    "\056\077\057\107\060\100\061\243\062\072\065\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\031\250\032\104\055\071\056" +
    "\077\057\107\060\100\061\175\062\072\065\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\032\104\055\071" +
    "\056\077\057\107\060\100\061\256\062\072\065\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\025\262\032\104\055\071\056\077\057\107\060" +
    "\100\061\264\062\072\065\122\072\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\032" +
    "\104\055\071\056\077\057\107\060\100\061\266\062\072" +
    "\065\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\024\272\032\104\055\071\056\077\057\107\060\100" +
    "\061\264\062\072\065\122\072\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\032\104\055\071\056\077" +
    "\057\107\060\100\061\264\062\072\065\122\072\274\001" +
    "\001\000\002\001\001\000\006\066\301\070\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\032\104\055\071" +
    "\056\077\057\107\060\100\061\264\062\072\065\122\072" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\061\063\045\066\057\067\331\070\052\071\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\023\011\014\012\016\014" +
    "\017\015\342\023\334\033\341\035\336\042\027\043\015" +
    "\045\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\061\063\045\066\057\067\344\070\052\071\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\023\011\014\012\016\014\350\023\346\036" +
    "\351\042\027\043\015\045\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\061\063\045\066\057\067" +
    "\353\070\052\071\046\001\001\000\002\001\001\000\022" +
    "\032\104\055\071\056\077\057\107\060\100\061\355\062" +
    "\072\065\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\364\001\001\000\006\023\u0179\076\u017b\001\001" +
    "\000\002\001\001\000\016\027\061\063\045\066\057\067" +
    "\366\070\052\071\046\001\001\000\002\001\001\000\014" +
    "\003\373\012\371\017\372\042\027\045\021\001\001\000" +
    "\042\010\u010a\030\u0118\037\u0107\040\u0114\041\u0101\042\u0103" +
    "\044\u010b\045\u011e\046\u0102\047\u0116\050\u011a\051\u0119\052" +
    "\u0106\053\u0109\054\u011c\062\u011b\001\001\000\012\003\376" +
    "\017\375\042\027\045\021\001\001\000\002\001\001\000" +
    "\010\017\374\042\360\045\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\377\042\360\045\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\030\u0118\037" +
    "\u0147\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102" +
    "\047\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\104\055\071\056\077\057\107\060\100\061\u0163\062" +
    "\072\065\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\032\104\055\071\056\077\057\107\060\100\061" +
    "\u015a\062\072\065\122\001\001\000\002\001\001\000\006" +
    "\030\u0118\040\u014b\001\001\000\042\010\u0146\030\u0118\037" +
    "\u0107\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102" +
    "\047\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\032\104\055\071\056\077\057\107\060" +
    "\100\061\u012e\062\072\065\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\031\u0120\032\104\055\071\056\077\057\107\060\100\061" +
    "\175\062\072\065\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\031\u012b\032\104\055\071\056\077\057\107" +
    "\060\100\061\175\062\072\065\122\001\001\000\022\032" +
    "\104\055\071\056\077\057\107\060\100\061\u012a\062\072" +
    "\065\122\001\001\000\024\031\u0128\032\104\055\071\056" +
    "\077\057\107\060\100\061\175\062\072\065\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\031\u0131\032\104\055\071\056\077\057" +
    "\107\060\100\061\175\062\072\065\122\074\u0132\077\u0130" +
    "\001\001\000\030\022\u0138\031\u0131\032\104\055\071\056" +
    "\077\057\107\060\100\061\175\062\072\065\122\074\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\017" +
    "\u0135\030\u0118\037\u0134\040\u0114\041\u0101\042\u0103\044\u010b" +
    "\045\u011e\046\u0102\047\u0116\050\u011a\051\u0119\052\u0106\053" +
    "\u0109\054\u011c\062\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\017\u013e\030\u0118\037" +
    "\u013d\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102" +
    "\047\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u0142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\030\u0118" +
    "\037\u0147\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046" +
    "\u0102\047\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c" +
    "\062\u011b\001\001\000\002\001\001\000\022\032\104\055" +
    "\071\056\077\057\107\060\100\061\u0149\062\072\065\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\032\104\055\071\056\077\057\107\060\100" +
    "\061\u0152\062\072\065\122\001\001\000\022\032\104\055" +
    "\071\056\077\057\107\060\100\061\u014e\062\072\065\122" +
    "\001\001\000\002\001\001\000\042\017\u0151\030\u0118\037" +
    "\u0150\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102" +
    "\047\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\017\u0155\030\u0118\037\u0154\040\u0114\041" +
    "\u0101\042\u0103\044\u010b\045\u011e\046\u0102\047\u0116\050\u011a" +
    "\051\u0119\052\u0106\053\u0109\054\u011c\062\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\017\u015d\030\u0118\037\u015c\040\u0114" +
    "\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102\047\u0116\050" +
    "\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062\u011b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\031\u0160\032\104\055\071\056\077\057\107\060\100" +
    "\061\175\062\072\065\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\020\u0167\021\u0168\030\u0118\037\u0165\040\u0114\041\u0101\042" +
    "\u0103\044\u010b\045\u011e\046\u0102\047\u0116\050\u011a\051\u0119" +
    "\052\u0106\053\u0109\054\u011c\062\u011b\001\001\000\002\001" +
    "\001\000\042\010\u016c\030\u0118\037\u0107\040\u0114\041\u0101" +
    "\042\u0103\044\u010b\045\u011e\046\u0102\047\u0116\050\u011a\051" +
    "\u0119\052\u0106\053\u0109\054\u011c\062\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\020" +
    "\u016b\021\u0168\030\u0118\037\u0165\040\u0114\041\u0101\042\u0103" +
    "\044\u010b\045\u011e\046\u0102\047\u0116\050\u011a\051\u0119\052" +
    "\u0106\053\u0109\054\u011c\062\u011b\001\001\000\002\001\001" +
    "\000\040\030\u0118\037\u0147\040\u0114\041\u0101\042\u0103\044" +
    "\u010b\045\u011e\046\u0102\047\u0116\050\u011a\051\u0119\052\u0106" +
    "\053\u0109\054\u011c\062\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\010" +
    "\u0175\030\u0118\037\u0107\040\u0114\041\u0101\042\u0103\044\u010b" +
    "\045\u011e\046\u0102\047\u0116\050\u011a\051\u0119\052\u0106\053" +
    "\u0109\054\u011c\062\u011b\001\001\000\040\030\u0118\037\u0147" +
    "\040\u0114\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102\047" +
    "\u0116\050\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0186\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u017f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0181\001\001" +
    "\000\002\001\001\000\016\027\061\063\045\066\057\067" +
    "\u0183\070\052\071\046\001\001\000\002\001\001\000\016" +
    "\027\061\063\045\066\057\067\u0185\070\052\071\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\061" +
    "\063\045\066\057\067\u0188\070\052\071\046\001\001\000" +
    "\002\001\001\000\016\027\061\063\045\066\057\067\u018a" +
    "\070\052\071\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\023\006\u018d\011\014\012\016\014\017" +
    "\015\024\042\027\043\015\045\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\030\u0118\037\u0147\040\u0114" +
    "\041\u0101\042\u0103\044\u010b\045\u011e\046\u0102\047\u0116\050" +
    "\u011a\051\u0119\052\u0106\053\u0109\054\u011c\062\u011b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\u0195\001\001\000\002\001\001" +
    "\000\014\003\u0198\012\u0197\017\u0199\042\027\045\021\001" +
    "\001\000\012\003\u019c\017\u019b\042\027\045\021\001\001" +
    "\000\010\017\u019a\042\360\045\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\u019d" +
    "\042\360\045\357\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Tree tree;
    public Tree getArbol() {
            return tree;
    }
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            Compilacion.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            Compilacion.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // PRIMITIVO ::= nil 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Nil()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // PRIMITIVO ::= decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // PRIMITIVO ::= numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PRIMITIVO ::= falso 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(false); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // PRIMITIVO ::= verdadero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // PRIMITIVO ::= caracter 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // PRIMITIVO ::= cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LOGICA ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.NOT, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LOGICA ::= EXPRESION nor EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NOR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LOGICA ::= EXPRESION nand EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NAND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LOGICA ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.AND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // LOGICA ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.OR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIFERENTE_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // RELACIONAL ::= EXPRESION igualacion EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.IGUAL_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // RELACIONAL ::= EXPRESION menorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RELACIONAL ::= EXPRESION mayorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ARITMETICA ::= EXPRESION modulo EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MODULO, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIVISION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MULTIPLICACION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.RESTA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.SUMA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ARITMETICA ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.MENOS_UNARIO, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LLAMADA ::= identificador parenI parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Llamada(e, new ArrayList<Expresion>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LLAMADA ::= identificador parenI LISTA_EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Llamada(e, e1, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LLAMADA ::= Redondear parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Redondear(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LLAMADA ::= Truncar parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Trunk(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LLAMADA ::= Equals parenI EXPRESION coma EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Iguals(e, e1, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LLAMADA ::= aMayusculas parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new aMayusculas(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LLAMADA ::= aMinusculas parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new aMinusculas(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LLAMADA ::= toCharArreglo parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new toCharArray(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LLAMADA ::= reemplazar parenI EXPRESION coma EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Reemplazar(e, e1, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LLAMADA ::= longitud parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Longitud(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LLAMADA ::= chartEn parenI EXPRESION coma EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new CharAt(e, e1, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ACCESO ::= ACCESO punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ACCESO ::= ACCESO corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; RESULT.add(new AccesoArreglo(e1));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ACCESO ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, true, eleft,eright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= LLAMADA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= MEMORIA_VIRTUAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= ACCESO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Acceso(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= PRIMITIVO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= LOGICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= ARITMETICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // READ ::= leer parenI VARIABLE parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Read(new AccesoVariable(e, eleft, eright), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("READ",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WRITE ::= escribirln parenI LISTA_EXPRESION parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 RESULT = new Writeln(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // WRITE ::= escribir parenI LISTA_EXPRESION parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 RESULT = new Write(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FOR ::= para ASIGNACION downto EXPRESION hacer INSTRUCCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insFor = new ArrayList<>(); insFor.add(e2); RESULT = new For(e, e1, insFor, false, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FOR ::= para ASIGNACION to EXPRESION hacer INSTRUCCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insFor = new ArrayList<>(); insFor.add(e2); RESULT = new For(e, e1, insFor, true, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FOR ::= para ASIGNACION downto EXPRESION hacer BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new For(e, e1, e2, false, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FOR ::= para ASIGNACION to EXPRESION hacer BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new For(e, e1, e2, true, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // REPEAT ::= repeat LISTA_INSTRUCCIONES until EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Repeat(e1, e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REPEAT",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // WHILE ::= mientras EXPRESION hacer INSTRUCCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insWhile = new ArrayList<>(); insWhile.add(e1); RESULT = new While(e, insWhile, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // WHILE ::= mientras EXPRESION hacer BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new While(e, e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DEFECTO ::= defecto BLOQUE_INSTRUCCIONES 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DEFECTO ::= defecto INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CASE ::= LISTA_EXPRESION dosPuntos BLOQUE_INSTRUCCIONES 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Case(e, e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASE ::= LISTA_EXPRESION dosPuntos INSTRUCCION 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insSwitch = new ArrayList<>(); insSwitch.add(e1); RESULT = new Case(e, insSwitch);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASELIST ::= CASE 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Case e = (Case)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Case>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASELIST ::= CASELIST CASE 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Case> e = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Case e1 = (Case)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SWITCH ::= caso EXPRESION of CASELIST DEFECTO dosPuntos end pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Case> e1 = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		RESULT = new SwitchCase(e, e1, e2, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SWITCH ::= caso EXPRESION of CASELIST end pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Case> e1 = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new SwitchCase(e, e1, new ArrayList<AST>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSTRUCCIONESIF ::= begin end 
            {
              ArrayList<AST> RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCCIONESIF ::= begin LISTA_INSTRUCCIONES end 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INSIF ::= INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSIF ::= INSTRUCCIONESIF pComa 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INSIF ::= INSTRUCCIONESIF 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SI ::= si EXPRESION then INSIF 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new If(e, e1, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SI ::= si EXPRESION then INSIF sino INSIF 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new If(e, e1, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TRANSFERENCIA ::= salir pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Salir(eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TRANSFERENCIA ::= continuar pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Continue(eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TRANSFERENCIA ::= detener pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Break(eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ASIGNACION ::= VARIABLE igual EXPRESION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Asignacion(new AccesoVariable(e, eleft, eright), e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WITH ::= con VARIABLE hacer LISTA_INSTRUCCIONES end pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
                                                RESULT = new With(new AccesoVariable(e, eleft, eright), e1, eleft, eright);
                                                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSTRUCCION ::= PROCEDURE 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSTRUCCION ::= FUNCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTRUCCION ::= LLAMADA pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCCION ::= free parenI VARIABLE parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Free(new AccesoVariable(e, eleft, eright), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSTRUCCION ::= SWITCH 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCCION ::= READ 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCION ::= WRITE 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCCION ::= FOR 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSTRUCCION ::= REPEAT 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCCION ::= WHILE 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCCION ::= SI 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTRUCCION ::= TRANSFERENCIA 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCCION ::= ASIGNACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCCION ::= WITH 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BLOQUE_INSTRUCCIONES ::= begin end pComa 
            {
              ArrayList<AST> RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BLOQUE_INSTRUCCIONES ::= begin LISTA_INSTRUCCIONES end pComa 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MAIN ::= begin end punto 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Main(new ArrayList<AST>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MAIN ::= begin LISTA_INSTRUCCIONES end punto 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Main(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RECORDS ::= identificador dosPuntos TIPO pComa 
            {
              Registro RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Registro(e1, e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_RECORDS ::= RECORDS 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Registro e = (Registro)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Registro>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_RECORDS ::= LISTA_RECORDS RECORDS 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Registro e1 = (Registro)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // REGISTRO ::= record LISTA_RECORDS end 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGISTRO",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_PARAMETROS ::= var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(e1, e, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_PARAMETROS ::= LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(e1, e, false, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Parametro(e2, e1, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Parametro(e2, e1, false, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS ::= parenI parenD 
            {
              ArrayList<Parametro> RESULT =null;
		RESULT = new ArrayList<Parametro>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS ::= parenI LISTA_PARAMETROS parenD 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PROCEDURE ::= procedure identificador PARAMETROS pComa METHOD_LIST BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Procedimiento(e, e1, new Tipo(Tipo.tipo.VOID), e3, new ArrayList<AST>(), e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PROCEDURE ::= procedure identificador PARAMETROS pComa VARINIT METHOD_LIST BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Procedimiento(e, e1, new Tipo(Tipo.tipo.VOID), e3, e2, e4, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PROCEDURE ::= procedure identificador PARAMETROS pComa BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Procedimiento(e, e1, new Tipo(Tipo.tipo.VOID), e2, new ArrayList<AST>(), new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PROCEDURE ::= procedure identificador PARAMETROS pComa VARINIT BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Procedimiento(e, e1, new Tipo(Tipo.tipo.VOID), e3, e2, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa METHOD_LIST BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, new ArrayList<AST>(), e3, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa VARINIT METHOD_LIST BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e5 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, e3, e5, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, new ArrayList<AST>(), new ArrayList<AST>(),eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa VARINIT BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, e3, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METHOD_LIST ::= PROCEDURE 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METHOD_LIST ::= FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METHOD_LIST ::= METHOD_LIST PROCEDURE 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(e1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METHOD_LIST ::= METHOD_LIST FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(e1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SECCION_FUNCION ::= MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SECCION_FUNCION ::= METHOD_LIST MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO igualacion EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, e2, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_VAR ::= VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_VAR ::= DECLARACION_VAR VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARINIT ::= var DECLARACION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARINIT",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SECCION_VAR ::= SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SECCION_VAR ::= VARINIT SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONST ::= LISTA_IDENTIFICADORES dosPuntos TIPO igualacion EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionConstante(e1, e, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONST",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_CONST ::= CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_CONST ::= DECLARACION_CONST CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SECCION_CONST ::= SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SECCION_CONST ::= constante DECLARACION_CONST SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= REGISTRO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= ARRAY_DECLARATION_MULTI 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= ARRAY_DECLARATION 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; 
        Collections.reverse(RESULT.getDimensiones());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO ::= TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= parenI LISTA_EXPRESION parenD 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Tipo(Tipo.tipo.ENUMERADO, null, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.OBJETO, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= LOWER_LIMIT tresP UPPER_LIMIT 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.RANGE, null, e1, e2);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_PRIMITIVO ::= record 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.RECORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_PRIMITIVO ::= string 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.STRING);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_PRIMITIVO ::= word 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.WORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_PRIMITIVO ::= bool 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.BOOLEAN);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_PRIMITIVO ::= character 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.CHAR);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_PRIMITIVO ::= real 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.REAL);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_PRIMITIVO ::= integer 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.INTEGER);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MEMORIA_VIRTUAL ::= malloc parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Malloc(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MEMORIA_VIRTUAL ::= sizeof parenI identificador parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Sizeof(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MEMORIA_VIRTUAL ::= sizeof parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Sizeof(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_EXPRESION ::= EXPRESION 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARIABLE ::= VARIABLE punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLE ::= VARIABLE parenI LISTA_EXPRESION parenD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARIABLE ::= VARIABLE corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; RESULT.add(new AccesoArreglo(e1));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLE ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_IDENTIFICADORES ::= identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<String>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES coma identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_RANGO_ARRAY ::= RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Dimension>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_RANGO_ARRAY ::= LISTA_RANGO_ARRAY coma RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Dimension e1 = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARRAY_MULTI ::= RANGO_ARRAY coma LISTA_RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Dimension> e1 = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e1; RESULT.add(0, e);  
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_MULTI",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARRAY_DECLARATION_MULTI ::= array corI ARRAY_MULTI corD of identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.ARREGLO, Tipo.tipo.OBJETO, e1, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION_MULTI",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARRAY_DECLARATION_MULTI ::= array corI ARRAY_MULTI corD of TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.ARREGLO, e1.getType(), null, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION_MULTI",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RANGO_ARRAY ::= EXPRESION dosP EXPRESION 
            {
              Dimension RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Dimension(e, e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RANGO_ARRAY",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                                ArrayList<Dimension> dims = new ArrayList<>(); dims.add(e);  
                                RESULT = new Tipo(Tipo.tipo.ARREGLO, Tipo.tipo.OBJETO, e1, dims);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                                ArrayList<Dimension> dims = new ArrayList<>(); dims.add(e);  
                                RESULT = new Tipo(Tipo.tipo.ARREGLO, e1.getType(), null, dims);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of ARRAY_DECLARATION 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = e1;
                                RESULT.getDimensiones().add(e);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UPPER_LIMIT ::= menos decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UPPER_LIMIT ::= menos numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UPPER_LIMIT ::= decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UPPER_LIMIT ::= numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UPPER_LIMIT ::= caracter 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LOWER_LIMIT ::= menos decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LOWER_LIMIT ::= menos numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LOWER_LIMIT ::= decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LOWER_LIMIT ::= numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LOWER_LIMIT ::= caracter 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igualacion TIPO 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new DeclaracionType(e1, e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_TIPOS ::= TIPO_DECLARACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DECLARACION_TIPOS ::= DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DECLARACION_TIPOS ::= LISTA_DECLARACION_TIPOS DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_TIPO ::= SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_TIPO ::= type LISTA_DECLARACION_TIPOS SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // USES ::= uses LISTA_IDENTIFICADORES pComa SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e1; RESULT.add(0, new Uses(e, eleft, eright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= program identificador pComa USES 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(new Program(e)); RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAM",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("Termino Correctamente"); parser.tree = new Tree(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

