
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 10 01:09:13 CST 2019
//----------------------------------------------------

package SintacticoDosLang;

import java.util.ArrayList;
import java_cup.runtime.*;
import doslang.DosLang;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 10 01:09:13 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\024" +
    "\006\000\002\025\006\000\002\025\003\000\002\003\005" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\006\005\000\002\011\007\000\002\012" +
    "\007\000\002\013\003\000\002\014\003\000\002\015\005" +
    "\000\002\020\010\000\002\020\010\000\002\016\005\000" +
    "\002\007\005\000\002\007\003\000\002\022\003\000\002" +
    "\022\005\000\002\022\006\000\002\023\005\000\002\023" +
    "\003\000\002\021\007\000\002\021\007\000\002\021\007" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\032\003\000\002\032\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\004\000\002\027\003" +
    "\000\002\030\010\000\002\031\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\005\000\002\033\004\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\004\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\065\004\001\002\000\004\012\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\012\023\017\043\021\073\016\100\012\001\002\000\004" +
    "\012\025\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\uffd7\001\002\000\004\002\ufffd\001\002\000\004\012\025" +
    "\001\002\000\004\012\025\001\002\000\004\002\uffff\001" +
    "\002\000\004\012\025\001\002\000\010\002\uffd5\012\uffd5" +
    "\073\uffd5\001\002\000\006\024\030\101\031\001\002\000" +
    "\006\012\025\073\016\001\002\000\014\007\uffea\010\uffea" +
    "\024\uffea\026\uffea\101\uffea\001\002\000\010\002\uffd6\012" +
    "\uffd6\073\uffd6\001\002\000\004\002\uffd8\001\002\000\004" +
    "\012\130\001\002\000\022\012\043\013\035\014\042\015" +
    "\040\016\033\017\032\020\037\021\036\001\002\000\006" +
    "\007\uffdd\010\uffdd\001\002\000\006\007\uffde\010\uffde\001" +
    "\002\000\006\007\uffd9\010\uffd9\001\002\000\006\007\uffe1" +
    "\010\uffe1\001\002\000\006\007\uffdb\010\uffdb\001\002\000" +
    "\006\007\uffdc\010\uffdc\001\002\000\006\007\uffdf\010\uffdf" +
    "\001\002\000\004\007\044\001\002\000\006\007\uffe0\010" +
    "\uffe0\001\002\000\006\007\uffda\010\uffda\001\002\000\024" +
    "\004\055\005\051\011\050\022\060\025\057\061\046\114" +
    "\053\115\052\117\054\001\002\000\054\010\uffd2\026\uffd2" +
    "\027\uffd2\032\uffd2\033\uffd2\040\uffd2\062\uffd2\102\uffd2\103" +
    "\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2" +
    "\112\uffd2\113\uffd2\116\uffd2\117\uffd2\120\uffd2\121\uffd2\001" +
    "\002\000\024\004\055\005\051\011\050\022\060\025\057" +
    "\061\046\114\053\115\052\117\054\001\002\000\054\010" +
    "\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf\040\uffcf\062\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110" +
    "\uffcf\111\uffcf\112\uffcf\113\uffcf\116\uffcf\117\uffcf\120\uffcf" +
    "\121\uffcf\001\002\000\054\010\uffbb\026\uffbb\027\uffbb\032" +
    "\uffbb\033\uffbb\040\uffbb\062\uffbb\102\uffbb\103\uffbb\104\uffbb" +
    "\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113" +
    "\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\001\002\000\054" +
    "\010\uffb7\026\uffb7\027\uffb7\032\uffb7\033\uffb7\040\uffb7\062" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\001\002\000\054\010\uffba\026\uffba\027\uffba" +
    "\032\uffba\033\uffba\040\uffba\062\uffba\102\uffba\103\uffba\104" +
    "\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba" +
    "\113\uffba\116\uffba\117\uffba\120\uffba\121\uffba\001\002\000" +
    "\054\010\uffb9\026\uffb9\027\uffb9\032\uffb9\033\uffb9\040\uffb9" +
    "\062\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\116\uffb9\117\uffb9" +
    "\120\uffb9\121\uffb9\001\002\000\024\004\055\005\051\011" +
    "\050\022\060\025\057\061\046\114\053\115\052\117\054" +
    "\001\002\000\054\010\uffb8\026\uffb8\027\uffb8\032\uffb8\033" +
    "\uffb8\040\uffb8\062\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\116" +
    "\uffb8\117\uffb8\120\uffb8\121\uffb8\001\002\000\054\010\uffd0" +
    "\026\uffd0\027\uffd0\032\uffd0\033\uffd0\040\uffd0\062\uffd0\102" +
    "\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0" +
    "\111\uffd0\112\uffd0\113\uffd0\116\uffd0\117\uffd0\120\uffd0\121" +
    "\uffd0\001\002\000\024\004\055\005\051\011\050\022\060" +
    "\025\057\061\046\114\053\115\052\117\054\001\002\000" +
    "\054\010\uffb6\026\uffb6\027\uffb6\032\uffb6\033\uffb6\040\uffb6" +
    "\062\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107" +
    "\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\116\uffb6\117\uffb6" +
    "\120\uffb6\121\uffb6\001\002\000\054\010\uffd1\026\uffd1\027" +
    "\uffd1\032\uffd1\033\uffd1\040\uffd1\062\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1\001\002" +
    "\000\044\010\100\040\070\062\067\102\063\103\075\104" +
    "\103\105\101\106\064\107\065\110\074\111\072\112\077" +
    "\113\066\116\102\117\071\120\076\121\073\001\002\000" +
    "\024\004\055\005\051\011\050\022\060\025\057\061\046" +
    "\114\053\115\052\117\054\001\002\000\024\004\055\005" +
    "\051\011\050\022\060\025\057\061\046\114\053\115\052" +
    "\117\054\001\002\000\024\004\055\005\051\011\050\022" +
    "\060\025\057\061\046\114\053\115\052\117\054\001\002" +
    "\000\024\004\055\005\051\011\050\022\060\025\057\061" +
    "\046\114\053\115\052\117\054\001\002\000\024\004\055" +
    "\005\051\011\050\022\060\025\057\061\046\114\053\115" +
    "\052\117\054\001\002\000\024\004\055\005\051\011\050" +
    "\022\060\025\057\061\046\114\053\115\052\117\054\001" +
    "\002\000\024\004\055\005\051\011\050\022\060\025\057" +
    "\061\046\114\053\115\052\117\054\001\002\000\024\004" +
    "\055\005\051\011\050\022\060\025\057\061\046\114\053" +
    "\115\052\117\054\001\002\000\024\004\055\005\051\011" +
    "\050\022\060\025\057\061\046\114\053\115\052\117\054" +
    "\001\002\000\024\004\055\005\051\011\050\022\060\025" +
    "\057\061\046\114\053\115\052\117\054\001\002\000\024" +
    "\004\055\005\051\011\050\022\060\025\057\061\046\114" +
    "\053\115\052\117\054\001\002\000\024\004\055\005\051" +
    "\011\050\022\060\025\057\061\046\114\053\115\052\117" +
    "\054\001\002\000\024\004\055\005\051\011\050\022\060" +
    "\025\057\061\046\114\053\115\052\117\054\001\002\000" +
    "\010\002\uffd4\012\uffd4\073\uffd4\001\002\000\024\004\055" +
    "\005\051\011\050\022\060\025\057\061\046\114\053\115" +
    "\052\117\054\001\002\000\024\004\055\005\051\011\050" +
    "\022\060\025\057\061\046\114\053\115\052\117\054\001" +
    "\002\000\024\004\055\005\051\011\050\022\060\025\057" +
    "\061\046\114\053\115\052\117\054\001\002\000\054\010" +
    "\uffc3\026\uffc3\027\uffc3\032\uffc3\033\uffc3\040\uffc3\062\uffc3" +
    "\102\063\103\075\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\113\uffc3\116\102\117\071\120\076" +
    "\121\073\001\002\000\054\010\uffcc\026\uffcc\027\uffcc\032" +
    "\uffcc\033\uffcc\040\uffcc\062\uffcc\102\063\103\075\104\uffcc" +
    "\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113" +
    "\uffcc\116\uffcc\117\uffcc\120\076\121\073\001\002\000\054" +
    "\010\uffc4\026\uffc4\027\uffc4\032\uffc4\033\uffc4\040\uffc4\062" +
    "\uffc4\102\063\103\075\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\111\uffc4\112\uffc4\113\uffc4\116\102\117\071\120" +
    "\076\121\073\001\002\000\054\010\uffbe\026\uffbe\027\uffbe" +
    "\032\uffbe\033\uffbe\040\070\062\uffbe\102\063\103\075\104" +
    "\103\105\101\106\064\107\065\110\074\111\072\112\uffbe" +
    "\113\uffbe\116\102\117\071\120\076\121\073\001\002\000" +
    "\054\010\uffca\026\uffca\027\uffca\032\uffca\033\uffca\040\uffca" +
    "\062\uffca\102\063\103\uffca\104\uffca\105\uffca\106\uffca\107" +
    "\uffca\110\uffca\111\uffca\112\uffca\113\uffca\116\uffca\117\uffca" +
    "\120\uffca\121\uffca\001\002\000\054\010\uffc7\026\uffc7\027" +
    "\uffc7\032\uffc7\033\uffc7\040\uffc7\062\uffc7\102\063\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\001\002" +
    "\000\054\010\uffc2\026\uffc2\027\uffc2\032\uffc2\033\uffc2\040" +
    "\uffc2\062\uffc2\102\063\103\075\104\103\105\101\106\064" +
    "\107\065\110\uffc2\111\uffc2\112\uffc2\113\uffc2\116\102\117" +
    "\071\120\076\121\073\001\002\000\054\010\uffc9\026\uffc9" +
    "\027\uffc9\032\uffc9\033\uffc9\040\uffc9\062\uffc9\102\063\103" +
    "\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9" +
    "\112\uffc9\113\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\001" +
    "\002\000\054\010\uffc1\026\uffc1\027\uffc1\032\uffc1\033\uffc1" +
    "\040\uffc1\062\uffc1\102\063\103\075\104\103\105\101\106" +
    "\064\107\065\110\uffc1\111\uffc1\112\uffc1\113\uffc1\116\102" +
    "\117\071\120\076\121\073\001\002\000\054\010\uffcb\026" +
    "\uffcb\027\uffcb\032\uffcb\033\uffcb\040\uffcb\062\uffcb\102\063" +
    "\103\075\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111" +
    "\uffcb\112\uffcb\113\uffcb\116\uffcb\117\uffcb\120\076\121\073" +
    "\001\002\000\054\010\uffbf\026\uffbf\027\uffbf\032\uffbf\033" +
    "\uffbf\040\uffbf\062\uffbf\102\063\103\075\104\103\105\101" +
    "\106\064\107\065\110\074\111\072\112\uffbf\113\uffbf\116" +
    "\102\117\071\120\076\121\073\001\002\000\054\010\uffc0" +
    "\026\uffc0\027\uffc0\032\uffc0\033\uffc0\040\070\062\uffc0\102" +
    "\063\103\075\104\103\105\101\106\064\107\065\110\074" +
    "\111\072\112\077\113\066\116\102\117\071\120\076\121" +
    "\073\001\002\000\054\010\uffbd\026\uffbd\027\uffbd\032\uffbd" +
    "\033\uffbd\040\070\062\uffbd\102\063\103\075\104\103\105" +
    "\101\106\064\107\065\110\074\111\072\112\uffbd\113\uffbd" +
    "\116\102\117\071\120\076\121\073\001\002\000\054\010" +
    "\uffc5\026\uffc5\027\uffc5\032\uffc5\033\uffc5\040\uffc5\062\uffc5" +
    "\102\063\103\075\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110" +
    "\uffc5\111\uffc5\112\uffc5\113\uffc5\116\102\117\071\120\076" +
    "\121\073\001\002\000\054\010\uffc6\026\uffc6\027\uffc6\032" +
    "\uffc6\033\uffc6\040\uffc6\062\uffc6\102\063\103\075\104\uffc6" +
    "\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113" +
    "\uffc6\116\102\117\071\120\076\121\073\001\002\000\054" +
    "\010\uffc8\026\uffc8\027\uffc8\032\uffc8\033\uffc8\040\uffc8\062" +
    "\uffc8\102\063\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\113\uffc8\116\uffc8\117\uffc8\120" +
    "\uffc8\121\uffc8\001\002\000\044\026\125\040\070\062\067" +
    "\102\063\103\075\104\103\105\101\106\064\107\065\110" +
    "\074\111\072\112\077\113\066\116\102\117\071\120\076" +
    "\121\073\001\002\000\054\010\uffce\026\uffce\027\uffce\032" +
    "\uffce\033\uffce\040\uffce\062\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113" +
    "\uffce\116\uffce\117\uffce\120\uffce\121\uffce\001\002\000\054" +
    "\010\uffcd\026\uffcd\027\uffcd\032\uffcd\033\uffcd\040\uffcd\062" +
    "\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd" +
    "\110\uffcd\111\uffcd\112\uffcd\113\uffcd\116\uffcd\117\uffcd\120" +
    "\uffcd\121\uffcd\001\002\000\054\010\uffbc\026\uffbc\027\uffbc" +
    "\032\uffbc\033\uffbc\040\uffbc\062\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc" +
    "\113\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc\001\002\000" +
    "\014\007\uffeb\010\uffeb\024\uffeb\026\uffeb\101\uffeb\001\002" +
    "\000\006\007\146\024\030\001\002\000\010\012\025\043" +
    "\021\073\016\001\002\000\004\010\143\001\002\000\004" +
    "\010\142\001\002\000\004\010\141\001\002\000\004\010" +
    "\140\001\002\000\010\012\ufff9\043\ufff9\073\ufff9\001\002" +
    "\000\010\012\ufff7\043\ufff7\073\ufff7\001\002\000\010\012" +
    "\ufff6\043\ufff6\073\ufff6\001\002\000\010\012\ufff8\043\ufff8" +
    "\073\ufff8\001\002\000\010\012\ufff5\043\ufff5\073\ufff5\001" +
    "\002\000\010\012\ufffa\043\ufffa\073\ufffa\001\002\000\004" +
    "\002\ufffc\001\002\000\046\004\055\005\051\011\050\012" +
    "\043\013\035\014\042\015\040\016\033\017\032\020\037" +
    "\021\036\022\060\025\150\030\151\061\046\114\053\115" +
    "\052\117\054\001\002\000\004\027\170\001\002\000\026" +
    "\004\055\005\051\011\050\012\025\022\060\025\057\061" +
    "\046\114\053\115\052\117\054\001\002\000\004\031\155" +
    "\001\002\000\004\010\ufff4\001\002\000\004\010\uffef\001" +
    "\002\000\044\027\ufff1\040\070\062\067\102\063\103\075" +
    "\104\103\105\101\106\064\107\065\110\074\111\072\112" +
    "\077\113\066\116\102\117\071\120\076\121\073\001\002" +
    "\000\024\004\055\005\051\011\050\022\060\025\057\061" +
    "\046\114\053\115\052\117\054\001\002\000\004\032\162" +
    "\001\002\000\044\033\160\040\070\062\067\102\063\103" +
    "\075\104\103\105\101\106\064\107\065\110\074\111\072" +
    "\112\077\113\066\116\102\117\071\120\076\121\073\001" +
    "\002\000\024\004\055\005\051\011\050\022\060\025\057" +
    "\061\046\114\053\115\052\117\054\001\002\000\044\032" +
    "\uffec\040\070\062\067\102\063\103\075\104\103\105\101" +
    "\106\064\107\065\110\074\111\072\112\077\113\066\116" +
    "\102\117\071\120\076\121\073\001\002\000\004\034\163" +
    "\001\002\000\022\013\035\014\042\015\040\016\033\017" +
    "\032\020\037\021\036\030\151\001\002\000\004\010\uffed" +
    "\001\002\000\004\010\uffee\001\002\000\006\024\030\026" +
    "\167\001\002\000\004\010\ufff3\001\002\000\024\004\055" +
    "\005\051\011\050\022\060\025\057\061\046\114\053\115" +
    "\052\117\054\001\002\000\004\010\ufff2\001\002\000\044" +
    "\010\ufff0\040\070\062\067\102\063\103\075\104\103\105" +
    "\101\106\064\107\065\110\074\111\072\112\077\113\066" +
    "\116\102\117\071\120\076\121\073\001\002\000\006\002" +
    "\uffd3\012\025\001\002\000\006\010\175\024\030\001\002" +
    "\000\010\023\017\043\021\073\016\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\006\002\004\024\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\014\025\017\026\012\031" +
    "\013\001\001\000\004\007\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\022\027" +
    "\172\030\021\001\001\000\020\004\131\005\136\006\133" +
    "\007\130\011\135\012\134\015\132\001\001\000\002\001" +
    "\001\000\010\007\022\027\023\030\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\022\030\025\031" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\033\032\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\061\033\044\034\055\035\060\036" +
    "\046\001\001\000\002\001\001\000\014\017\126\033\044" +
    "\034\055\035\060\036\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\125\033\044\034\055\035\060\036" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\123\033\044\034\055\035\060\036\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\122\033\044\034\055\035\060\036\046\001\001\000" +
    "\014\017\121\033\044\034\055\035\060\036\046\001\001" +
    "\000\014\017\120\033\044\034\055\035\060\036\046\001" +
    "\001\000\014\017\117\033\044\034\055\035\060\036\046" +
    "\001\001\000\014\017\116\033\044\034\055\035\060\036" +
    "\046\001\001\000\014\017\115\033\044\034\055\035\060" +
    "\036\046\001\001\000\014\017\114\033\044\034\055\035" +
    "\060\036\046\001\001\000\014\017\113\033\044\034\055" +
    "\035\060\036\046\001\001\000\014\017\112\033\044\034" +
    "\055\035\060\036\046\001\001\000\014\017\111\033\044" +
    "\034\055\035\060\036\046\001\001\000\014\017\110\033" +
    "\044\034\055\035\060\036\046\001\001\000\014\017\107" +
    "\033\044\034\055\035\060\036\046\001\001\000\014\017" +
    "\106\033\044\034\055\035\060\036\046\001\001\000\002" +
    "\001\001\000\014\017\105\033\044\034\055\035\060\036" +
    "\046\001\001\000\014\017\104\033\044\034\055\035\060" +
    "\036\046\001\001\000\014\017\103\033\044\034\055\035" +
    "\060\036\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\143\006\133\007\130\011\135\012" +
    "\134\015\132\026\144\031\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\033\013\146\017\153\020\152\032\151" +
    "\033\044\034\055\035\060\036\046\001\001\000\002\001" +
    "\001\000\016\007\165\017\123\033\044\034\055\035\060" +
    "\036\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\155\017\156" +
    "\033\044\034\055\035\060\036\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\160\033\044\034\055" +
    "\035\060\036\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\163\020\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\170\017\171\033\044\034\055\035\060\036\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\022\030\025\001\001\000\002\001\001\000\010\003\175" +
    "\026\012\031\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //ArrayList<Traduccion> tree;
    static int fila;
    static int columna;
    //public ArrayList<Traduccion> DevolverArbol() {
    //        return tree;
    //}
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    }  

    public static int getFila(){
        return fila;
    }
    
    public static int getColumna(){
        return columna;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRIMITIVO ::= nil 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(new Nulo()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRIMITIVO ::= decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRIMITIVO ::= numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRIMITIVO ::= falso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(false); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRIMITIVO ::= verdadero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRIMITIVO ::= cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(e.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOGICA ::= not EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, Operador.NOT); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOGICA ::= EXPRESION nor EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.AND); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOGICA ::= EXPRESION nand EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.AND); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOGICA ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.AND); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOGICA ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.OR); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.DIFERENTE_QUE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RELACIONAL ::= EXPRESION igualacion EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.IGUAL_IGUAL); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RELACIONAL ::= EXPRESION menorque EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MENOR_QUE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MENOR_IGUAL); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MAYOR_IGUAL); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RELACIONAL ::= EXPRESION mayorque EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MAYOR_QUE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARITMETICA ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.POTENCIA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.POTENCIA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.DIVISION); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MULTIPLICACION); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.RESTA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.SUMA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARITMETICA ::= menos EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, Operador.MENOS_UNARIO); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= PRIMITIVO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= RELACIONAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= LOGICA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= ARITMETICA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SECCION_VAR ::= var DECLARACION_CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONST ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONST",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_CONST ::= CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_CONST ::= DECLARACION_CONST CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SECCION_CONST ::= SECCION_VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SECCION_CONST ::= constante DECLARACION_CONST SECCION_VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_PRIMITIVO ::= record 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_PRIMITIVO ::= string 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_PRIMITIVO ::= word 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_PRIMITIVO ::= bool 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_PRIMITIVO ::= character 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_PRIMITIVO ::= real 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_PRIMITIVO ::= integer 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MEMORIA_VIRTUAL ::= free parenI VARIABLE parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MEMORIA_VIRTUAL ::= malloc parenI EXPRESION parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MEMORIA_VIRTUAL ::= sizeof parenI VARIABLE parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_EXPRESION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLE ::= VARIABLE corI LISTA_EXPRESION corD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLE ::= VARIABLE punto identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLE ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_IDENTIFICADORES ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES coma identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RANGO_ARRAY ::= EXPRESION dosP EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RANGO_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UPPER_LIMIT ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LOWER_LIMIT ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUBRANGE_TYPE ::= LISTA_IDENTIFICADORES igual LOWER_LIMIT tresP UPPER_LIMIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUBRANGE_TYPE",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ENUM_TYPE ::= LISTA_IDENTIFICADORES igual parenI LISTA_IDENTIFICADORES parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ENUM_TYPE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igual TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_TIPOS ::= ARRAY_TYPE pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_TIPOS ::= SUBRANGE_TYPE pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_TIPOS ::= ENUM_TYPE pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_TIPOS ::= TIPO_DECLARACION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DECLARACION_TIPOS ::= DECLARACION_TIPOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DECLARACION_TIPOS ::= LISTA_DECLARACION_TIPOS DECLARACION_TIPOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_TIPO ::= SECCION_CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_TIPO ::= type LISTA_DECLARACION_TIPOS SECCION_CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= SECCION_TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // USES ::= uses LISTA_IDENTIFICADORES pComa SECCION_TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= program identificador pComa USES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAM",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("Termino Correctamente"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

