
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 15 01:15:59 CST 2019
//----------------------------------------------------

package SintacticoDosLang;

import java.util.ArrayList;
import java_cup.runtime.*;
import doslang.DosLang;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 15 01:15:59 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\003\000\002\024" +
    "\006\000\002\025\006\000\002\025\003\000\002\003\005" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\006\005\000\002\006\005\000\002\011" +
    "\007\000\002\012\007\000\002\013\003\000\002\014\003" +
    "\000\002\015\005\000\002\015\005\000\002\020\010\000" +
    "\002\020\010\000\002\016\005\000\002\102\010\000\002" +
    "\052\005\000\002\103\005\000\002\103\003\000\002\007" +
    "\005\000\002\007\003\000\002\022\003\000\002\022\006" +
    "\000\002\022\006\000\002\022\005\000\002\023\005\000" +
    "\002\023\003\000\002\021\006\000\002\021\006\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\032\003\000\002\032\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\004\000\002\027\003\000\002" +
    "\030\010\000\002\031\004\000\002\031\003\000\002\072" +
    "\004\000\002\071\004\000\002\071\003\000\002\046\010" +
    "\000\002\046\006\000\002\046\006\000\002\037\004\000" +
    "\002\037\003\000\002\053\004\000\002\053\004\000\002" +
    "\053\003\000\002\053\003\000\002\047\011\000\002\051" +
    "\007\000\002\040\005\000\002\040\004\000\002\041\007" +
    "\000\002\041\010\000\002\041\005\000\002\041\006\000" +
    "\002\042\004\000\002\042\003\000\002\073\005\000\002" +
    "\074\004\000\002\074\003\000\002\075\006\000\002\075" +
    "\006\000\002\075\006\000\002\054\006\000\002\054\005" +
    "\000\002\043\006\000\002\043\005\000\002\044\004\000" +
    "\002\044\003\000\002\045\003\000\002\045\004\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\007\000\002\045\004\000\002\050\006\000" +
    "\002\050\006\000\002\055\006\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\057\010\000\002\057" +
    "\007\000\002\060\005\000\002\060\003\000\002\101\010" +
    "\000\002\101\011\000\002\077\004\000\002\077\003\000" +
    "\002\076\005\000\002\076\005\000\002\100\004\000\002" +
    "\100\004\000\002\063\007\000\002\063\006\000\002\064" +
    "\007\000\002\065\011\000\002\065\011\000\002\065\010" +
    "\000\002\065\010\000\002\066\007\000\002\066\007\000" +
    "\002\067\007\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\070\003\000\002\070\006" +
    "\000\002\070\006\000\002\070\005\000\002\104\006\000" +
    "\002\033\004\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\004\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\004\055\004\001\002\000\004\011\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\011\001\002\000" +
    "\020\022\027\040\013\042\025\050\023\054\012\062\031" +
    "\067\020\001\002\000\004\011\u015b\001\002\000\036\011" +
    "\353\036\341\041\327\046\u0157\047\324\056\337\064\332" +
    "\065\331\112\350\113\346\114\345\115\340\116\343\117" +
    "\344\001\002\000\004\002\uffff\001\002\000\004\002\uffc4" +
    "\001\002\000\004\002\uffcc\001\002\000\010\040\013\050" +
    "\023\054\012\001\002\000\004\011\035\001\002\000\004" +
    "\002\uffd1\001\002\000\010\040\uffc0\050\uffc0\054\uffc0\001" +
    "\002\000\004\011\307\001\002\000\010\040\013\050\023" +
    "\054\012\001\002\000\004\011\035\001\002\000\004\002" +
    "\ufffb\001\002\000\004\011\035\001\002\000\010\040\uffc1" +
    "\050\uffc1\054\uffc1\001\002\000\004\011\035\001\002\000" +
    "\004\002\ufffd\001\002\000\012\011\uffc9\040\uffc9\050\uffc9" +
    "\054\uffc9\001\002\000\006\023\040\070\041\001\002\000" +
    "\014\006\uffe4\007\uffe4\023\uffe4\025\uffe4\070\uffe4\001\002" +
    "\000\012\011\035\040\uffcb\050\uffcb\054\uffcb\001\002\000" +
    "\012\011\uffca\040\uffca\050\uffca\054\uffca\001\002\000\004" +
    "\011\235\001\002\000\022\011\054\012\045\013\052\014" +
    "\050\015\043\016\042\017\047\020\046\001\002\000\010" +
    "\006\uffd7\007\uffd7\025\uffd7\001\002\000\010\006\uffd8\007" +
    "\uffd8\025\uffd8\001\002\000\010\006\uffd3\007\uffd3\025\uffd3" +
    "\001\002\000\010\006\uffdb\007\uffdb\025\uffdb\001\002\000" +
    "\010\006\uffd5\007\uffd5\011\035\001\002\000\010\006\uffd6" +
    "\007\uffd6\025\uffd6\001\002\000\010\006\uffd9\007\uffd9\025" +
    "\uffd9\001\002\000\006\006\056\007\057\001\002\000\010" +
    "\006\uffda\007\uffda\025\uffda\001\002\000\004\007\055\001" +
    "\002\000\010\006\uffd4\007\uffd4\025\uffd4\001\002\000\012" +
    "\011\uffc6\040\uffc6\050\uffc6\054\uffc6\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\066\072\103\100\104\076\106\073\001" +
    "\002\000\012\011\uffc7\040\uffc7\050\uffc7\054\uffc7\001\002" +
    "\000\070\007\uff7f\023\uff7f\025\uff7f\026\uff7f\031\uff7f\032" +
    "\uff7f\033\uff7f\037\uff7f\043\uff7f\044\uff7f\053\uff7f\060\uff7f" +
    "\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076" +
    "\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\105\uff7f\106\uff7f" +
    "\107\uff7f\110\uff7f\001\002\000\070\007\uff64\023\uff64\025" +
    "\uff64\026\uff64\031\uff64\032\uff64\033\uff64\037\uff64\043\uff64" +
    "\044\uff64\053\uff64\060\uff64\070\uff64\071\uff64\072\uff64\073" +
    "\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\101\uff64" +
    "\102\uff64\105\uff64\106\uff64\107\uff64\110\uff64\001\002\000" +
    "\070\007\uff5f\023\uff5f\025\uff5f\026\uff5f\031\uff5f\032\uff5f" +
    "\033\uff5f\037\uff5f\043\uff5f\044\uff5f\053\uff5f\060\uff5f\070" +
    "\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f" +
    "\077\uff5f\100\uff5f\101\uff5f\102\uff5f\105\uff5f\106\uff5f\107" +
    "\uff5f\110\uff5f\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\070\007\uff60" +
    "\023\uff60\025\uff60\026\uff60\031\uff60\032\uff60\033\uff60\037" +
    "\uff60\043\uff60\044\uff60\053\uff60\060\uff60\070\uff60\071\uff60" +
    "\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60\100" +
    "\uff60\101\uff60\102\uff60\105\uff60\106\uff60\107\uff60\110\uff60" +
    "\001\002\000\070\007\uff82\023\uff82\025\uff82\026\uff82\031" +
    "\uff82\032\uff82\033\uff82\037\uff82\043\uff82\044\uff82\053\uff82" +
    "\060\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075" +
    "\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102\uff82\105\uff82" +
    "\106\uff82\107\uff82\110\uff82\001\002\000\070\007\uff81\023" +
    "\uff81\025\uff81\026\uff81\031\uff81\032\uff81\033\uff81\037\uff81" +
    "\043\uff81\044\uff81\053\uff81\060\uff81\070\uff81\071\uff81\072" +
    "\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81" +
    "\101\uff81\102\uff81\105\uff81\106\uff81\107\uff81\110\uff81\001" +
    "\002\000\070\007\uff5e\023\uff5e\025\uff5e\026\uff5e\031\uff5e" +
    "\032\uff5e\033\uff5e\037\uff5e\043\uff5e\044\uff5e\053\uff5e\060" +
    "\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e" +
    "\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\105\uff5e\106" +
    "\uff5e\107\uff5e\110\uff5e\001\002\000\034\004\064\005\062" +
    "\010\061\011\103\021\067\024\070\034\075\035\077\052" +
    "\063\066\072\103\100\104\076\106\073\001\002\000\076" +
    "\007\uff7d\023\uff7d\024\155\025\uff7d\026\uff7d\030\156\031" +
    "\uff7d\032\uff7d\033\uff7d\037\uff7d\043\uff7d\044\uff7d\053\uff7d" +
    "\060\uff7d\063\154\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\105\uff7d\106\uff7d\107\uff7d\110\uff7d\001\002\000\070\007" +
    "\uff63\023\uff63\025\uff63\026\uff63\031\uff63\032\uff63\033\uff63" +
    "\037\uff63\043\uff63\044\uff63\053\uff63\060\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63" +
    "\100\uff63\101\uff63\102\uff63\105\uff63\106\uff63\107\uff63\110" +
    "\uff63\001\002\000\034\004\064\005\062\010\061\011\103" +
    "\021\067\024\070\034\075\035\077\052\063\066\072\103" +
    "\100\104\076\106\073\001\002\000\070\007\uff80\023\uff80" +
    "\025\uff80\026\uff80\031\uff80\032\uff80\033\uff80\037\uff80\043" +
    "\uff80\044\uff80\053\uff80\060\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\102\uff80\105\uff80\106\uff80\107\uff80\110\uff80\001\002" +
    "\000\004\024\150\001\002\000\070\007\uff62\023\uff62\025" +
    "\uff62\026\uff62\031\uff62\032\uff62\033\uff62\037\uff62\043\uff62" +
    "\044\uff62\053\uff62\060\uff62\070\uff62\071\uff62\072\uff62\073" +
    "\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62" +
    "\102\uff62\105\uff62\106\uff62\107\uff62\110\uff62\001\002\000" +
    "\004\024\145\001\002\000\070\007\uff61\023\uff61\025\uff61" +
    "\026\uff61\031\uff61\032\uff61\033\uff61\037\uff61\043\uff61\044" +
    "\uff61\053\uff61\060\uff61\070\uff61\071\uff61\072\uff61\073\uff61" +
    "\074\uff61\075\uff61\076\uff61\077\uff61\100\uff61\101\uff61\102" +
    "\uff61\105\uff61\106\uff61\107\uff61\110\uff61\001\002\000\070" +
    "\007\uff7c\023\uff7c\025\uff7c\026\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\037\uff7c\043\uff7c\044\uff7c\053\uff7c\060\uff7c\070\uff7c" +
    "\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077" +
    "\uff7c\100\uff7c\101\uff7c\102\uff7c\105\uff7c\106\uff7c\107\uff7c" +
    "\110\uff7c\001\002\000\044\007\117\037\112\053\110\071" +
    "\104\072\116\073\124\074\122\075\106\076\105\077\115" +
    "\100\114\101\121\102\107\105\123\106\111\107\120\110" +
    "\113\001\002\000\076\007\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\026\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\037\uff7b\043" +
    "\uff7b\044\uff7b\053\uff7b\060\uff7b\063\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100" +
    "\uff7b\101\uff7b\102\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\066\072\103\100" +
    "\104\076\106\073\001\002\000\034\004\064\005\062\010" +
    "\061\011\103\021\067\024\070\034\075\035\077\052\063" +
    "\066\072\103\100\104\076\106\073\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\066\072\103\100\104\076\106\073\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\066\072\103\100\104" +
    "\076\106\073\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\066\072\103\100\104\076\106\073\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\066\072\103\100\104\076" +
    "\106\073\001\002\000\034\004\064\005\062\010\061\011" +
    "\103\021\067\024\070\034\075\035\077\052\063\066\072" +
    "\103\100\104\076\106\073\001\002\000\034\004\064\005" +
    "\062\010\061\011\103\021\067\024\070\034\075\035\077" +
    "\052\063\066\072\103\100\104\076\106\073\001\002\000" +
    "\034\004\064\005\062\010\061\011\103\021\067\024\070" +
    "\034\075\035\077\052\063\066\072\103\100\104\076\106" +
    "\073\001\002\000\034\004\064\005\062\010\061\011\103" +
    "\021\067\024\070\034\075\035\077\052\063\066\072\103" +
    "\100\104\076\106\073\001\002\000\012\011\uffc8\040\uffc8" +
    "\050\uffc8\054\uffc8\001\002\000\034\004\064\005\062\010" +
    "\061\011\103\021\067\024\070\034\075\035\077\052\063" +
    "\066\072\103\100\104\076\106\073\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\066\072\103\100\104\076\106\073\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\066\072\103\100\104" +
    "\076\106\073\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\066\072\103\100\104\076\106\073\001\002" +
    "\000\070\007\uff6c\023\uff6c\025\uff6c\026\uff6c\031\uff6c\032" +
    "\uff6c\033\uff6c\037\uff6c\043\uff6c\044\uff6c\053\uff6c\060\uff6c" +
    "\070\uff6c\071\104\072\116\073\uff6c\074\uff6c\075\uff6c\076" +
    "\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\105\123\106\111" +
    "\107\120\110\113\001\002\000\070\007\uff75\023\uff75\025" +
    "\uff75\026\uff75\031\uff75\032\uff75\033\uff75\037\uff75\043\uff75" +
    "\044\uff75\053\uff75\060\uff75\070\uff75\071\104\072\116\073" +
    "\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75" +
    "\102\uff75\105\uff75\106\uff75\107\120\110\113\001\002\000" +
    "\070\007\uff6d\023\uff6d\025\uff6d\026\uff6d\031\uff6d\032\uff6d" +
    "\033\uff6d\037\uff6d\043\uff6d\044\uff6d\053\uff6d\060\uff6d\070" +
    "\uff6d\071\104\072\116\073\uff6d\074\uff6d\075\uff6d\076\uff6d" +
    "\077\uff6d\100\uff6d\101\uff6d\102\uff6d\105\123\106\111\107" +
    "\120\110\113\001\002\000\070\007\uff67\023\uff67\025\uff67" +
    "\026\uff67\031\uff67\032\uff67\033\uff67\037\112\043\uff67\044" +
    "\uff67\053\uff67\060\uff67\070\uff67\071\104\072\116\073\124" +
    "\074\122\075\106\076\105\077\115\100\114\101\uff67\102" +
    "\uff67\105\123\106\111\107\120\110\113\001\002\000\070" +
    "\007\uff73\023\uff73\025\uff73\026\uff73\031\uff73\032\uff73\033" +
    "\uff73\037\uff73\043\uff73\044\uff73\053\uff73\060\uff73\070\uff73" +
    "\071\104\072\uff73\073\uff73\074\uff73\075\uff73\076\uff73\077" +
    "\uff73\100\uff73\101\uff73\102\uff73\105\uff73\106\uff73\107\uff73" +
    "\110\uff73\001\002\000\070\007\uff70\023\uff70\025\uff70\026" +
    "\uff70\031\uff70\032\uff70\033\uff70\037\uff70\043\uff70\044\uff70" +
    "\053\uff70\060\uff70\070\uff70\071\104\072\uff70\073\uff70\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\102\uff70" +
    "\105\uff70\106\uff70\107\uff70\110\uff70\001\002\000\070\007" +
    "\uff6b\023\uff6b\025\uff6b\026\uff6b\031\uff6b\032\uff6b\033\uff6b" +
    "\037\uff6b\043\uff6b\044\uff6b\053\uff6b\060\uff6b\070\uff6b\071" +
    "\104\072\116\073\124\074\122\075\106\076\105\077\uff6b" +
    "\100\uff6b\101\uff6b\102\uff6b\105\123\106\111\107\120\110" +
    "\113\001\002\000\070\007\uff6a\023\uff6a\025\uff6a\026\uff6a" +
    "\031\uff6a\032\uff6a\033\uff6a\037\uff6a\043\uff6a\044\uff6a\053" +
    "\uff6a\060\uff6a\070\uff6a\071\104\072\116\073\124\074\122" +
    "\075\106\076\105\077\uff6a\100\uff6a\101\uff6a\102\uff6a\105" +
    "\123\106\111\107\120\110\113\001\002\000\070\007\uff72" +
    "\023\uff72\025\uff72\026\uff72\031\uff72\032\uff72\033\uff72\037" +
    "\uff72\043\uff72\044\uff72\053\uff72\060\uff72\070\uff72\071\104" +
    "\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100" +
    "\uff72\101\uff72\102\uff72\105\uff72\106\uff72\107\uff72\110\uff72" +
    "\001\002\000\070\007\uff68\023\uff68\025\uff68\026\uff68\031" +
    "\uff68\032\uff68\033\uff68\037\uff68\043\uff68\044\uff68\053\uff68" +
    "\060\uff68\070\uff68\071\104\072\116\073\124\074\122\075" +
    "\106\076\105\077\115\100\114\101\uff68\102\uff68\105\123" +
    "\106\111\107\120\110\113\001\002\000\070\007\uff74\023" +
    "\uff74\025\uff74\026\uff74\031\uff74\032\uff74\033\uff74\037\uff74" +
    "\043\uff74\044\uff74\053\uff74\060\uff74\070\uff74\071\104\072" +
    "\116\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74" +
    "\101\uff74\102\uff74\105\uff74\106\uff74\107\120\110\113\001" +
    "\002\000\070\007\uff69\023\uff69\025\uff69\026\uff69\031\uff69" +
    "\032\uff69\033\uff69\037\112\043\uff69\044\uff69\053\uff69\060" +
    "\uff69\070\uff69\071\104\072\116\073\124\074\122\075\106" +
    "\076\105\077\115\100\114\101\121\102\107\105\123\106" +
    "\111\107\120\110\113\001\002\000\070\007\uff66\023\uff66" +
    "\025\uff66\026\uff66\031\uff66\032\uff66\033\uff66\037\112\043" +
    "\uff66\044\uff66\053\uff66\060\uff66\070\uff66\071\104\072\116" +
    "\073\124\074\122\075\106\076\105\077\115\100\114\101" +
    "\uff66\102\uff66\105\123\106\111\107\120\110\113\001\002" +
    "\000\070\007\uff6f\023\uff6f\025\uff6f\026\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\037\uff6f\043\uff6f\044\uff6f\053\uff6f\060\uff6f" +
    "\070\uff6f\071\104\072\116\073\uff6f\074\uff6f\075\uff6f\076" +
    "\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\105\123\106\111" +
    "\107\120\110\113\001\002\000\070\007\uff6e\023\uff6e\025" +
    "\uff6e\026\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e\043\uff6e" +
    "\044\uff6e\053\uff6e\060\uff6e\070\uff6e\071\104\072\116\073" +
    "\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e" +
    "\102\uff6e\105\123\106\111\107\120\110\113\001\002\000" +
    "\070\007\uff71\023\uff71\025\uff71\026\uff71\031\uff71\032\uff71" +
    "\033\uff71\037\uff71\043\uff71\044\uff71\053\uff71\060\uff71\070" +
    "\uff71\071\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71" +
    "\077\uff71\100\uff71\101\uff71\102\uff71\105\uff71\106\uff71\107" +
    "\uff71\110\uff71\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\044\025\147" +
    "\037\112\053\110\071\104\072\116\073\124\074\122\075" +
    "\106\076\105\077\115\100\114\101\121\102\107\105\123" +
    "\106\111\107\120\110\113\001\002\000\070\007\uffdc\023" +
    "\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\037\uffdc" +
    "\043\uffdc\044\uffdc\053\uffdc\060\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\066\072\103\100\104" +
    "\076\106\073\001\002\000\044\025\152\037\112\053\110" +
    "\071\104\072\116\073\124\074\122\075\106\076\105\077" +
    "\115\100\114\101\121\102\107\105\123\106\111\107\120" +
    "\110\113\001\002\000\070\007\uffdd\023\uffdd\025\uffdd\026" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\037\uffdd\043\uffdd\044\uffdd" +
    "\053\uffdd\060\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd" +
    "\105\uffdd\106\uffdd\107\uffdd\110\uffdd\001\002\000\070\007" +
    "\uff76\023\uff76\025\uff76\026\uff76\031\uff76\032\uff76\033\uff76" +
    "\037\uff76\043\uff76\044\uff76\053\uff76\060\uff76\070\uff76\071" +
    "\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76" +
    "\100\uff76\101\uff76\102\uff76\105\uff76\106\uff76\107\uff76\110" +
    "\uff76\001\002\000\004\011\166\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\066\072\103\100\104\076\106\073\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\066\072\103\100\104\076" +
    "\106\073\001\002\000\006\023\162\031\161\001\002\000" +
    "\050\023\uffde\025\uffde\031\uffde\037\112\053\110\071\104" +
    "\072\116\073\124\074\122\075\106\076\105\077\115\100" +
    "\114\101\121\102\107\105\123\106\111\107\120\110\113" +
    "\001\002\000\076\007\uff7a\023\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\037\uff7a\043\uff7a" +
    "\044\uff7a\053\uff7a\060\uff7a\063\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a" +
    "\101\uff7a\102\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\066\072\103\100\104" +
    "\076\106\073\001\002\000\050\023\uffdf\025\uffdf\031\uffdf" +
    "\037\112\053\110\071\104\072\116\073\124\074\122\075" +
    "\106\076\105\077\115\100\114\101\121\102\107\105\123" +
    "\106\111\107\120\110\113\001\002\000\006\023\162\025" +
    "\165\001\002\000\076\007\uff79\023\uff79\024\uff79\025\uff79" +
    "\026\uff79\030\uff79\031\uff79\032\uff79\033\uff79\037\uff79\043" +
    "\uff79\044\uff79\053\uff79\060\uff79\063\uff79\070\uff79\071\uff79" +
    "\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79\100" +
    "\uff79\101\uff79\102\uff79\105\uff79\106\uff79\107\uff79\110\uff79" +
    "\001\002\000\076\007\uff78\023\uff78\024\uff78\025\uff78\026" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\037\uff78\043\uff78" +
    "\044\uff78\053\uff78\060\uff78\063\uff78\070\uff78\071\uff78\072" +
    "\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\105\uff78\106\uff78\107\uff78\110\uff78\001" +
    "\002\000\044\025\170\037\112\053\110\071\104\072\116" +
    "\073\124\074\122\075\106\076\105\077\115\100\114\101" +
    "\121\102\107\105\123\106\111\107\120\110\113\001\002" +
    "\000\070\007\uff7e\023\uff7e\025\uff7e\026\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\037\uff7e\043\uff7e\044\uff7e\053\uff7e\060\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076" +
    "\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\105\uff7e\106\uff7e" +
    "\107\uff7e\110\uff7e\001\002\000\070\007\uff65\023\uff65\025" +
    "\uff65\026\uff65\031\uff65\032\uff65\033\uff65\037\uff65\043\uff65" +
    "\044\uff65\053\uff65\060\uff65\070\uff65\071\uff65\072\uff65\073" +
    "\uff65\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65" +
    "\102\uff65\105\uff65\106\uff65\107\uff65\110\uff65\001\002\000" +
    "\006\023\040\070\177\001\002\000\006\011\uffb3\046\uffb3" +
    "\001\002\000\006\011\035\046\175\001\002\000\004\007" +
    "\uffb5\001\002\000\006\011\uffb4\046\uffb4\001\002\000\024" +
    "\011\054\012\045\013\052\014\050\015\043\016\042\017" +
    "\047\020\200\027\202\001\002\000\010\006\uffd5\007\uffd5" +
    "\025\uffd5\001\002\000\004\007\234\001\002\000\004\030" +
    "\207\001\002\000\004\007\206\001\002\000\004\007\205" +
    "\001\002\000\006\011\uffb1\046\uffb1\001\002\000\006\011" +
    "\uffb2\046\uffb2\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\006\023\221" +
    "\031\220\001\002\000\004\031\215\001\002\000\044\032" +
    "\213\037\112\053\110\071\104\072\116\073\124\074\122" +
    "\075\106\076\105\077\115\100\114\101\121\102\107\105" +
    "\123\106\111\107\120\110\113\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\066\072\103\100\104\076\106\073\001\002" +
    "\000\046\023\uffea\031\uffea\037\112\053\110\071\104\072" +
    "\116\073\124\074\122\075\106\076\105\077\115\100\114" +
    "\101\121\102\107\105\123\106\111\107\120\110\113\001" +
    "\002\000\004\033\216\001\002\000\020\012\045\013\052" +
    "\014\050\015\043\016\042\017\047\020\200\001\002\000" +
    "\004\007\uffe9\001\002\000\004\033\226\001\002\000\034" +
    "\004\064\005\062\010\061\011\103\021\067\024\070\034" +
    "\075\035\077\052\063\066\072\103\100\104\076\106\073" +
    "\001\002\000\006\023\uffe6\031\uffe6\001\002\000\006\023" +
    "\224\031\uffe8\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\006\023\uffe7" +
    "\031\uffe7\001\002\000\022\012\045\013\052\014\050\015" +
    "\043\016\042\017\047\020\200\027\230\001\002\000\004" +
    "\007\uffeb\001\002\000\004\030\232\001\002\000\004\007" +
    "\uffec\001\002\000\034\004\064\005\062\010\061\011\103" +
    "\021\067\024\070\034\075\035\077\052\063\066\072\103" +
    "\100\104\076\106\073\001\002\000\004\031\220\001\002" +
    "\000\006\011\uffb0\046\uffb0\001\002\000\014\006\uffe5\007" +
    "\uffe5\023\uffe5\025\uffe5\070\uffe5\001\002\000\006\006\253" +
    "\023\040\001\002\000\016\011\035\040\013\042\025\050" +
    "\023\054\012\062\031\001\002\000\004\007\250\001\002" +
    "\000\004\007\247\001\002\000\004\007\246\001\002\000" +
    "\004\007\245\001\002\000\016\011\ufff9\040\ufff9\042\ufff9" +
    "\050\ufff9\054\ufff9\062\ufff9\001\002\000\016\011\ufff7\040" +
    "\ufff7\042\ufff7\050\ufff7\054\ufff7\062\ufff7\001\002\000\016" +
    "\011\ufff6\040\ufff6\042\ufff6\050\ufff6\054\ufff6\062\ufff6\001" +
    "\002\000\016\011\ufff8\040\ufff8\042\ufff8\050\ufff8\054\ufff8" +
    "\062\ufff8\001\002\000\016\011\ufff5\040\ufff5\042\ufff5\050" +
    "\ufff5\054\ufff5\062\ufff5\001\002\000\004\002\ufffc\001\002" +
    "\000\016\011\ufffa\040\ufffa\042\ufffa\050\ufffa\054\ufffa\062" +
    "\ufffa\001\002\000\054\004\064\005\062\010\061\011\263" +
    "\012\045\013\052\014\050\015\043\016\042\017\047\020" +
    "\046\021\067\024\256\027\202\034\075\035\077\052\063" +
    "\066\072\103\100\104\076\106\073\001\002\000\004\026" +
    "\267\001\002\000\004\007\uffed\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\066\072\103\100\104\076\106\073\001\002" +
    "\000\004\007\ufff4\001\002\000\004\007\uffee\001\002\000" +
    "\004\007\ufff3\001\002\000\044\026\ufff0\037\112\053\110" +
    "\071\104\072\116\073\124\074\122\075\106\076\105\077" +
    "\115\100\114\101\121\102\107\105\123\106\111\107\120" +
    "\110\113\001\002\000\054\007\uffd4\024\uff7b\026\uff7b\030" +
    "\uff7b\037\uff7b\053\uff7b\063\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102" +
    "\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b\001\002\000\006" +
    "\023\162\025\266\001\002\000\046\023\uffde\025\170\037" +
    "\112\053\110\071\104\072\116\073\124\074\122\075\106" +
    "\076\105\077\115\100\114\101\121\102\107\105\123\106" +
    "\111\107\120\110\113\001\002\000\004\007\ufff2\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\066\072\103\100\104\076" +
    "\106\073\001\002\000\004\007\ufff1\001\002\000\044\007" +
    "\uffef\037\112\053\110\071\104\072\116\073\124\074\122" +
    "\075\106\076\105\077\115\100\114\101\121\102\107\105" +
    "\123\106\111\107\120\110\113\001\002\000\014\011\uffcf" +
    "\040\uffcf\050\uffcf\054\uffcf\062\uffcf\001\002\000\006\023" +
    "\040\070\277\001\002\000\014\011\035\040\013\050\023" +
    "\054\012\062\031\001\002\000\004\002\uffd2\001\002\000" +
    "\014\011\uffd0\040\uffd0\050\uffd0\054\uffd0\062\uffd0\001\002" +
    "\000\022\011\054\012\045\013\052\014\050\015\043\016" +
    "\042\017\047\020\200\001\002\000\004\006\301\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\066\072\103\100\104\076" +
    "\106\073\001\002\000\044\007\303\037\112\053\110\071" +
    "\104\072\116\073\124\074\122\075\106\076\105\077\115" +
    "\100\114\101\121\102\107\105\123\106\111\107\120\110" +
    "\113\001\002\000\014\011\uffce\040\uffce\050\uffce\054\uffce" +
    "\062\uffce\001\002\000\010\040\uffc2\050\uffc2\054\uffc2\001" +
    "\002\000\010\040\uffc3\050\uffc3\054\uffc3\001\002\000\004" +
    "\002\uffc5\001\002\000\004\024\310\001\002\000\010\011" +
    "\035\025\u0143\062\u0141\001\002\000\004\070\312\001\002" +
    "\000\022\011\054\012\045\013\052\014\050\015\043\016" +
    "\042\017\047\020\200\001\002\000\004\007\314\001\002" +
    "\000\006\040\317\062\031\001\002\000\010\040\uffb6\050" +
    "\uffb6\054\uffb6\001\002\000\004\040\317\001\002\000\036" +
    "\011\353\036\341\041\327\046\326\047\324\056\337\064" +
    "\332\065\331\112\350\113\346\114\345\115\340\116\343" +
    "\117\344\001\002\000\010\040\uffbf\050\uffbf\054\uffbf\001" +
    "\002\000\072\004\uffa2\005\uffa2\010\uffa2\011\uffa2\021\uffa2" +
    "\024\uffa2\034\uffa2\035\uffa2\036\uffa2\041\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\052\uffa2\056\uffa2\061\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\103\uffa2\104\uffa2\106\uffa2\112\uffa2\113\uffa2\114" +
    "\uffa2\115\uffa2\116\uffa2\117\uffa2\001\002\000\004\007\u013e" +
    "\001\002\000\040\011\uffaa\036\uffaa\041\uffaa\046\uffaa\047" +
    "\uffaa\056\uffaa\061\uffaa\064\uffaa\065\uffaa\112\uffaa\113\uffaa" +
    "\114\uffaa\115\uffaa\116\uffaa\117\uffaa\001\002\000\004\011" +
    "\u0131\001\002\000\036\011\353\036\341\041\327\046\u012e" +
    "\047\324\056\337\064\332\065\331\112\350\113\346\114" +
    "\345\115\340\116\343\117\344\001\002\000\004\007\u012d" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\066\072\103\100" +
    "\104\076\106\073\001\002\000\072\004\uffa6\005\uffa6\010" +
    "\uffa6\011\uffa6\021\uffa6\024\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\041\uffa6\045\uffa6\046\uffa6\047\uffa6\052\uffa6\056\uffa6\061" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\103\uffa6\104\uffa6\106\uffa6" +
    "\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\001" +
    "\002\000\004\011\u0118\001\002\000\034\004\064\005\062" +
    "\010\061\011\103\021\067\024\070\034\075\035\077\052" +
    "\063\066\072\103\100\104\076\106\073\001\002\000\072" +
    "\004\uffa1\005\uffa1\010\uffa1\011\uffa1\021\uffa1\024\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\041\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\052\uffa1\056\uffa1\061\uffa1\064\uffa1\065\uffa1\066\uffa1\103" +
    "\uffa1\104\uffa1\106\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1" +
    "\116\uffa1\117\uffa1\001\002\000\012\024\u0109\030\u010a\063" +
    "\u0108\070\u010b\001\002\000\072\004\uffa3\005\uffa3\010\uffa3" +
    "\011\uffa3\021\uffa3\024\uffa3\034\uffa3\035\uffa3\036\uffa3\041" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\052\uffa3\056\uffa3\061\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\103\uffa3\104\uffa3\106\uffa3\112" +
    "\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\001\002" +
    "\000\072\004\uffa9\005\uffa9\010\uffa9\011\uffa9\021\uffa9\024" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\045\uffa9\046\uffa9" +
    "\047\uffa9\052\uffa9\056\uffa9\061\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\103\uffa9\104\uffa9\106\uffa9\112\uffa9\113\uffa9\114\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\001\002\000\034\011\353\036" +
    "\341\041\327\047\324\056\337\064\332\065\331\112\350" +
    "\113\346\114\345\115\340\116\343\117\344\001\002\000" +
    "\004\007\u0102\001\002\000\004\024\376\001\002\000\004" +
    "\007\375\001\002\000\004\024\371\001\002\000\004\024" +
    "\365\001\002\000\004\007\364\001\002\000\004\007\363" +
    "\001\002\000\072\004\uffa4\005\uffa4\010\uffa4\011\uffa4\021" +
    "\uffa4\024\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\052\uffa4\056\uffa4\061\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\103\uffa4\104\uffa4\106\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\116\uffa4\117\uffa4\001\002\000\004\024" +
    "\357\001\002\000\072\004\uffa5\005\uffa5\010\uffa5\011\uffa5" +
    "\021\uffa5\024\uffa5\034\uffa5\035\uffa5\036\uffa5\041\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\052\uffa5\056\uffa5\061\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\103\uffa5\104\uffa5\106\uffa5\112\uffa5\113" +
    "\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5\001\002\000\072" +
    "\004\uffa7\005\uffa7\010\uffa7\011\uffa7\021\uffa7\024\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\041\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\052\uffa7\056\uffa7\061\uffa7\064\uffa7\065\uffa7\066\uffa7\103" +
    "\uffa7\104\uffa7\106\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7" +
    "\116\uffa7\117\uffa7\001\002\000\012\024\354\030\uffe3\063" +
    "\uffe3\070\uffe3\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\006\023\162" +
    "\025\356\001\002\000\004\007\uff77\001\002\000\004\011" +
    "\035\001\002\000\006\023\040\025\361\001\002\000\004" +
    "\007\362\001\002\000\072\004\uff83\005\uff83\010\uff83\011" +
    "\uff83\021\uff83\024\uff83\034\uff83\035\uff83\036\uff83\041\uff83" +
    "\045\uff83\046\uff83\047\uff83\052\uff83\056\uff83\061\uff83\064" +
    "\uff83\065\uff83\066\uff83\103\uff83\104\uff83\106\uff83\112\uff83" +
    "\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\001\002\000" +
    "\072\004\uff9b\005\uff9b\010\uff9b\011\uff9b\021\uff9b\024\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\041\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\052\uff9b\056\uff9b\061\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\103\uff9b\104\uff9b\106\uff9b\112\uff9b\113\uff9b\114\uff9b\115" +
    "\uff9b\116\uff9b\117\uff9b\001\002\000\072\004\uff9a\005\uff9a" +
    "\010\uff9a\011\uff9a\021\uff9a\024\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\041\uff9a\045\uff9a\046\uff9a\047\uff9a\052\uff9a\056\uff9a" +
    "\061\uff9a\064\uff9a\065\uff9a\066\uff9a\103\uff9a\104\uff9a\106" +
    "\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\066\072\103\100" +
    "\104\076\106\073\001\002\000\006\023\162\025\367\001" +
    "\002\000\004\007\370\001\002\000\072\004\uff84\005\uff84" +
    "\010\uff84\011\uff84\021\uff84\024\uff84\034\uff84\035\uff84\036" +
    "\uff84\041\uff84\045\uff84\046\uff84\047\uff84\052\uff84\056\uff84" +
    "\061\uff84\064\uff84\065\uff84\066\uff84\103\uff84\104\uff84\106" +
    "\uff84\112\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\066\072\103\100" +
    "\104\076\106\073\001\002\000\006\023\162\025\373\001" +
    "\002\000\004\007\374\001\002\000\072\004\uff85\005\uff85" +
    "\010\uff85\011\uff85\021\uff85\024\uff85\034\uff85\035\uff85\036" +
    "\uff85\041\uff85\045\uff85\046\uff85\047\uff85\052\uff85\056\uff85" +
    "\061\uff85\064\uff85\065\uff85\066\uff85\103\uff85\104\uff85\106" +
    "\uff85\112\uff85\113\uff85\114\uff85\115\uff85\116\uff85\117\uff85" +
    "\001\002\000\072\004\uffa8\005\uffa8\010\uffa8\011\uffa8\021" +
    "\uffa8\024\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\052\uffa8\056\uffa8\061\uffa8\064\uffa8\065" +
    "\uffa8\066\uffa8\103\uffa8\104\uffa8\106\uffa8\112\uffa8\113\uffa8" +
    "\114\uffa8\115\uffa8\116\uffa8\117\uffa8\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\066\072\103\100\104\076\106\073\001" +
    "\002\000\044\025\u0100\037\112\053\110\071\104\072\116" +
    "\073\124\074\122\075\106\076\105\077\115\100\114\101" +
    "\121\102\107\105\123\106\111\107\120\110\113\001\002" +
    "\000\004\007\u0101\001\002\000\072\004\uffa0\005\uffa0\010" +
    "\uffa0\011\uffa0\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\041\uffa0\045\uffa0\046\uffa0\047\uffa0\052\uffa0\056\uffa0\061" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\103\uffa0\104\uffa0\106\uffa0" +
    "\112\uffa0\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\001" +
    "\002\000\072\004\uff99\005\uff99\010\uff99\011\uff99\021\uff99" +
    "\024\uff99\034\uff99\035\uff99\036\uff99\041\uff99\045\uff99\046" +
    "\uff99\047\uff99\052\uff99\056\uff99\061\uff99\064\uff99\065\uff99" +
    "\066\uff99\103\uff99\104\uff99\106\uff99\112\uff99\113\uff99\114" +
    "\uff99\115\uff99\116\uff99\117\uff99\001\002\000\036\011\353" +
    "\036\341\041\327\047\324\056\337\061\u0105\064\332\065" +
    "\331\112\350\113\346\114\345\115\340\116\343\117\344" +
    "\001\002\000\040\011\uffab\036\uffab\041\uffab\046\uffab\047" +
    "\uffab\056\uffab\061\uffab\064\uffab\065\uffab\112\uffab\113\uffab" +
    "\114\uffab\115\uffab\116\uffab\117\uffab\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\066\072\103\100\104\076\106\073\001" +
    "\002\000\044\007\u0107\037\112\053\110\071\104\072\116" +
    "\073\124\074\122\075\106\076\105\077\115\100\114\101" +
    "\121\102\107\105\123\106\111\107\120\110\113\001\002" +
    "\000\072\004\uff8a\005\uff8a\010\uff8a\011\uff8a\021\uff8a\024" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\052\uff8a\056\uff8a\061\uff8a\064\uff8a\065\uff8a\066" +
    "\uff8a\103\uff8a\104\uff8a\106\uff8a\112\uff8a\113\uff8a\114\uff8a" +
    "\115\uff8a\116\uff8a\117\uff8a\001\002\000\004\011\u0112\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\066\072\103\100\104" +
    "\076\106\073\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\004\006\u010c" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\066\072\103\100" +
    "\104\076\106\073\001\002\000\050\007\uff9c\037\112\044" +
    "\uff9c\053\110\060\uff9c\071\104\072\116\073\124\074\122" +
    "\075\106\076\105\077\115\100\114\101\121\102\107\105" +
    "\123\106\111\107\120\110\113\001\002\000\006\023\162" +
    "\031\u010f\001\002\000\012\024\uffe2\030\uffe2\063\uffe2\070" +
    "\uffe2\001\002\000\006\023\162\025\u0111\001\002\000\012" +
    "\024\uffe1\030\uffe1\063\uffe1\070\uffe1\001\002\000\012\024" +
    "\uffe0\030\uffe0\063\uffe0\070\uffe0\001\002\000\044\037\112" +
    "\043\u0114\053\110\071\104\072\116\073\124\074\122\075" +
    "\106\076\105\077\115\100\114\101\121\102\107\105\123" +
    "\106\111\107\120\110\113\001\002\000\036\011\353\036" +
    "\341\040\317\041\327\047\324\056\337\064\332\065\331" +
    "\112\350\113\346\114\345\115\340\116\343\117\344\001" +
    "\002\000\004\007\u0117\001\002\000\072\004\uff8b\005\uff8b" +
    "\010\uff8b\011\uff8b\021\uff8b\024\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\041\uff8b\045\uff8b\046\uff8b\047\uff8b\052\uff8b\056\uff8b" +
    "\061\uff8b\064\uff8b\065\uff8b\066\uff8b\103\uff8b\104\uff8b\106" +
    "\uff8b\112\uff8b\113\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b" +
    "\001\002\000\072\004\uff8c\005\uff8c\010\uff8c\011\uff8c\021" +
    "\uff8c\024\uff8c\034\uff8c\035\uff8c\036\uff8c\041\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\052\uff8c\056\uff8c\061\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\103\uff8c\104\uff8c\106\uff8c\112\uff8c\113\uff8c" +
    "\114\uff8c\115\uff8c\116\uff8c\117\uff8c\001\002\000\004\043" +
    "\u0119\001\002\000\036\011\353\036\341\040\317\041\327" +
    "\047\324\056\337\064\332\065\331\112\350\113\346\114" +
    "\345\115\340\116\343\117\344\001\002\000\072\004\uff9e" +
    "\005\uff9e\010\uff9e\011\uff9e\021\uff9e\024\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\041\uff9e\045\uff9e\046\uff9e\047\uff9e\052\uff9e" +
    "\056\uff9e\061\uff9e\064\uff9e\065\uff9e\066\uff9e\103\uff9e\104" +
    "\uff9e\106\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e" +
    "\117\uff9e\001\002\000\072\004\uff9d\005\uff9d\010\uff9d\011" +
    "\uff9d\021\uff9d\024\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\052\uff9d\056\uff9d\061\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\103\uff9d\104\uff9d\106\uff9d\112\uff9d" +
    "\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\001\002\000" +
    "\044\033\u011d\037\112\053\110\071\104\072\116\073\124" +
    "\074\122\075\106\076\105\077\115\100\114\101\121\102" +
    "\107\105\123\106\111\107\120\110\113\001\002\000\034" +
    "\004\064\005\062\010\061\011\103\021\067\024\070\034" +
    "\075\035\077\052\063\066\072\103\100\104\076\106\073" +
    "\001\002\000\040\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\045\u0125\046\u0124\052\063" +
    "\066\072\103\100\104\076\106\073\001\002\000\040\004" +
    "\uff91\005\uff91\010\uff91\011\uff91\021\uff91\024\uff91\034\uff91" +
    "\035\uff91\045\uff91\046\uff91\052\uff91\066\uff91\103\uff91\104" +
    "\uff91\106\uff91\001\002\000\044\037\112\053\110\070\u0121" +
    "\071\104\072\116\073\124\074\122\075\106\076\105\077" +
    "\115\100\114\101\121\102\107\105\123\106\111\107\120" +
    "\110\113\001\002\000\036\011\353\036\341\040\317\041" +
    "\327\047\324\056\337\064\332\065\331\112\350\113\346" +
    "\114\345\115\340\116\343\117\344\001\002\000\040\004" +
    "\uff8f\005\uff8f\010\uff8f\011\uff8f\021\uff8f\024\uff8f\034\uff8f" +
    "\035\uff8f\045\uff8f\046\uff8f\052\uff8f\066\uff8f\103\uff8f\104" +
    "\uff8f\106\uff8f\001\002\000\040\004\uff90\005\uff90\010\uff90" +
    "\011\uff90\021\uff90\024\uff90\034\uff90\035\uff90\045\uff90\046" +
    "\uff90\052\uff90\066\uff90\103\uff90\104\uff90\106\uff90\001\002" +
    "\000\004\007\u012c\001\002\000\036\011\353\036\341\040" +
    "\317\041\327\047\324\056\337\064\332\065\331\112\350" +
    "\113\346\114\345\115\340\116\343\117\344\001\002\000" +
    "\004\046\u0128\001\002\000\040\004\uff92\005\uff92\010\uff92" +
    "\011\uff92\021\uff92\024\uff92\034\uff92\035\uff92\045\uff92\046" +
    "\uff92\052\uff92\066\uff92\103\uff92\104\uff92\106\uff92\001\002" +
    "\000\004\007\u0129\001\002\000\072\004\uff93\005\uff93\010" +
    "\uff93\011\uff93\021\uff93\024\uff93\034\uff93\035\uff93\036\uff93" +
    "\041\uff93\045\uff93\046\uff93\047\uff93\052\uff93\056\uff93\061" +
    "\uff93\064\uff93\065\uff93\066\uff93\103\uff93\104\uff93\106\uff93" +
    "\112\uff93\113\uff93\114\uff93\115\uff93\116\uff93\117\uff93\001" +
    "\002\000\004\046\uff8d\001\002\000\004\046\uff8e\001\002" +
    "\000\072\004\uff94\005\uff94\010\uff94\011\uff94\021\uff94\024" +
    "\uff94\034\uff94\035\uff94\036\uff94\041\uff94\045\uff94\046\uff94" +
    "\047\uff94\052\uff94\056\uff94\061\uff94\064\uff94\065\uff94\066" +
    "\uff94\103\uff94\104\uff94\106\uff94\112\uff94\113\uff94\114\uff94" +
    "\115\uff94\116\uff94\117\uff94\001\002\000\102\004\uffac\005" +
    "\uffac\007\uffac\010\uffac\011\uffac\021\uffac\024\uffac\034\uffac" +
    "\035\uffac\036\uffac\040\uffac\041\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\052\uffac\054\uffac\056\uffac\061\uffac\064\uffac" +
    "\065\uffac\066\uffac\103\uffac\104\uffac\106\uffac\112\uffac\113" +
    "\uffac\114\uffac\115\uffac\116\uffac\117\uffac\001\002\000\004" +
    "\007\u012f\001\002\000\102\004\uffad\005\uffad\007\uffad\010" +
    "\uffad\011\uffad\021\uffad\024\uffad\034\uffad\035\uffad\036\uffad" +
    "\040\uffad\041\uffad\045\uffad\046\uffad\047\uffad\050\uffad\052" +
    "\uffad\054\uffad\056\uffad\061\uffad\064\uffad\065\uffad\066\uffad" +
    "\103\uffad\104\uffad\106\uffad\112\uffad\113\uffad\114\uffad\115" +
    "\uffad\116\uffad\117\uffad\001\002\000\006\044\u0132\060\u0133" +
    "\001\002\000\012\024\uffe3\030\uffe3\063\uffe3\070\uffe3\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\066\072\103\100\104" +
    "\076\106\073\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\066" +
    "\072\103\100\104\076\106\073\001\002\000\044\037\112" +
    "\043\u0135\053\110\071\104\072\116\073\124\074\122\075" +
    "\106\076\105\077\115\100\114\101\121\102\107\105\123" +
    "\106\111\107\120\110\113\001\002\000\036\011\353\036" +
    "\341\040\317\041\327\047\324\056\337\064\332\065\331" +
    "\112\350\113\346\114\345\115\340\116\343\117\344\001" +
    "\002\000\004\007\u0138\001\002\000\072\004\uff87\005\uff87" +
    "\010\uff87\011\uff87\021\uff87\024\uff87\034\uff87\035\uff87\036" +
    "\uff87\041\uff87\045\uff87\046\uff87\047\uff87\052\uff87\056\uff87" +
    "\061\uff87\064\uff87\065\uff87\066\uff87\103\uff87\104\uff87\106" +
    "\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87" +
    "\001\002\000\072\004\uff89\005\uff89\010\uff89\011\uff89\021" +
    "\uff89\024\uff89\034\uff89\035\uff89\036\uff89\041\uff89\045\uff89" +
    "\046\uff89\047\uff89\052\uff89\056\uff89\061\uff89\064\uff89\065" +
    "\uff89\066\uff89\103\uff89\104\uff89\106\uff89\112\uff89\113\uff89" +
    "\114\uff89\115\uff89\116\uff89\117\uff89\001\002\000\044\037" +
    "\112\043\u013a\053\110\071\104\072\116\073\124\074\122" +
    "\075\106\076\105\077\115\100\114\101\121\102\107\105" +
    "\123\106\111\107\120\110\113\001\002\000\036\011\353" +
    "\036\341\040\317\041\327\047\324\056\337\064\332\065" +
    "\331\112\350\113\346\114\345\115\340\116\343\117\344" +
    "\001\002\000\004\007\u013d\001\002\000\072\004\uff86\005" +
    "\uff86\010\uff86\011\uff86\021\uff86\024\uff86\034\uff86\035\uff86" +
    "\036\uff86\041\uff86\045\uff86\046\uff86\047\uff86\052\uff86\056" +
    "\uff86\061\uff86\064\uff86\065\uff86\066\uff86\103\uff86\104\uff86" +
    "\106\uff86\112\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117" +
    "\uff86\001\002\000\072\004\uff88\005\uff88\010\uff88\011\uff88" +
    "\021\uff88\024\uff88\034\uff88\035\uff88\036\uff88\041\uff88\045" +
    "\uff88\046\uff88\047\uff88\052\uff88\056\uff88\061\uff88\064\uff88" +
    "\065\uff88\066\uff88\103\uff88\104\uff88\106\uff88\112\uff88\113" +
    "\uff88\114\uff88\115\uff88\116\uff88\117\uff88\001\002\000\072" +
    "\004\uff9f\005\uff9f\010\uff9f\011\uff9f\021\uff9f\024\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\041\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\052\uff9f\056\uff9f\061\uff9f\064\uff9f\065\uff9f\066\uff9f\103" +
    "\uff9f\104\uff9f\106\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f" +
    "\116\uff9f\117\uff9f\001\002\000\010\040\uffb7\050\uffb7\054" +
    "\uffb7\001\002\000\006\023\040\070\u0150\001\002\000\004" +
    "\011\035\001\002\000\006\007\u0144\025\u0145\001\002\000" +
    "\006\007\uffbc\070\uffbc\001\002\000\006\011\035\062\u0147" +
    "\001\002\000\006\007\uffbd\070\uffbd\001\002\000\006\023" +
    "\040\070\u014b\001\002\000\004\011\035\001\002\000\006" +
    "\023\040\070\u0149\001\002\000\022\011\054\012\045\013" +
    "\052\014\050\015\043\016\042\017\047\020\200\001\002" +
    "\000\006\007\uffba\025\uffba\001\002\000\022\011\054\012" +
    "\045\013\052\014\050\015\043\016\042\017\047\020\200" +
    "\001\002\000\006\007\uffbb\025\uffbb\001\002\000\006\023" +
    "\040\070\u014e\001\002\000\022\011\054\012\045\013\052" +
    "\014\050\015\043\016\042\017\047\020\200\001\002\000" +
    "\006\007\uffb8\025\uffb8\001\002\000\022\011\054\012\045" +
    "\013\052\014\050\015\043\016\042\017\047\020\200\001" +
    "\002\000\006\007\uffb9\025\uffb9\001\002\000\006\007\u0153" +
    "\023\040\001\002\000\016\022\027\040\013\042\025\050" +
    "\023\054\012\062\031\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffcd\001\002\000\036\011\353\036\341\041" +
    "\327\046\u0159\047\324\056\337\064\332\065\331\112\350" +
    "\113\346\114\345\115\340\116\343\117\344\001\002\000" +
    "\004\063\u0158\001\002\000\004\002\uffae\001\002\000\004" +
    "\063\u015a\001\002\000\004\002\uffaf\001\002\000\004\024" +
    "\310\001\002\000\004\007\u015d\001\002\000\006\040\317" +
    "\062\031\001\002\000\010\040\uffbe\050\uffbe\054\uffbe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\006\002\004\024\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\031\025\013\026\025\031" +
    "\020\037\015\047\027\051\021\053\023\054\014\072\016" +
    "\001\001\000\002\001\001\000\034\022\333\044\u0155\045" +
    "\322\050\335\055\341\061\351\063\327\064\350\065\346" +
    "\066\334\067\320\101\332\104\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\u0154" +
    "\047\027\051\021\053\023\054\014\001\001\000\004\007" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\304\051\303\054\305\001\001\000" +
    "\010\007\272\027\273\030\271\001\001\000\002\001\001" +
    "\000\020\004\236\005\243\006\240\007\235\011\242\012" +
    "\241\015\237\001\001\000\002\001\001\000\010\007\033" +
    "\046\032\071\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\033" +
    "\046\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\043\032\050\073\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\171\074\173\075\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\101\021\100\033\064\034\073\035\065\036\057\070" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\170\021\100\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\166\021\100\033\064\034\073\035\065" +
    "\036\057\070\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\152\021\100\033\064\034\073\035\065" +
    "\036\057\070\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\143\021\100\033\064\034\073\035\065\036\057" +
    "\070\070\001\001\000\020\017\142\021\100\033\064\034" +
    "\073\035\065\036\057\070\070\001\001\000\020\017\141" +
    "\021\100\033\064\034\073\035\065\036\057\070\070\001" +
    "\001\000\020\017\140\021\100\033\064\034\073\035\065" +
    "\036\057\070\070\001\001\000\020\017\137\021\100\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\020" +
    "\017\136\021\100\033\064\034\073\035\065\036\057\070" +
    "\070\001\001\000\020\017\135\021\100\033\064\034\073" +
    "\035\065\036\057\070\070\001\001\000\020\017\134\021" +
    "\100\033\064\034\073\035\065\036\057\070\070\001\001" +
    "\000\020\017\133\021\100\033\064\034\073\035\065\036" +
    "\057\070\070\001\001\000\020\017\132\021\100\033\064" +
    "\034\073\035\065\036\057\070\070\001\001\000\020\017" +
    "\131\021\100\033\064\034\073\035\065\036\057\070\070" +
    "\001\001\000\002\001\001\000\020\017\130\021\100\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\020" +
    "\017\127\021\100\033\064\034\073\035\065\036\057\070" +
    "\070\001\001\000\020\017\126\021\100\033\064\034\073" +
    "\035\065\036\057\070\070\001\001\000\020\017\125\021" +
    "\100\033\064\034\073\035\065\036\057\070\070\001\001" +
    "\000\020\017\124\021\100\033\064\034\073\035\065\036" +
    "\057\070\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\145\021\100\033\064\034" +
    "\073\035\065\036\057\070\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\150\021\100\033\064\034" +
    "\073\035\065\036\057\070\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\157\021\100\023\163\033\064\034\073\035\065" +
    "\036\057\070\070\001\001\000\022\017\157\021\100\023" +
    "\156\033\064\034\073\035\065\036\057\070\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\162\021\100\033\064\034\073\035\065\036\057" +
    "\070\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\171\075\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\043\020\203\032\202\102" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\016\207\017\211\021\100" +
    "\033\064\034\073\035\065\036\057\052\210\070\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\213\021\100\033\064\034\073\035\065\036" +
    "\057\070\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\221\017\211\021\100\033\064\034\073" +
    "\035\065\036\057\070\070\103\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\224\017\211\021\100" +
    "\033\064\034\073\035\065\036\057\070\070\001\001\000" +
    "\002\001\001\000\006\010\226\020\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\232\017\211\021\100\033\064\034\073\035\065\036\057" +
    "\070\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\251\006\240" +
    "\007\235\011\242\012\241\015\237\026\250\031\020\037" +
    "\015\047\027\051\021\053\023\054\014\072\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\010\043\013\253\017\261" +
    "\020\257\021\100\032\256\033\064\034\073\035\065\036" +
    "\057\070\070\073\260\102\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\264\021\100\023\263\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\267\017\270\021\100\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\272\030\275\031\274\037\015\047\027" +
    "\051\021\053\023\054\014\072\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\043\032\277\001\001" +
    "\000\002\001\001\000\020\017\301\021\100\033\064\034" +
    "\073\035\065\036\057\070\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\310\001\001\000\006\007\u013f" +
    "\041\u0141\001\001\000\002\001\001\000\006\010\043\032" +
    "\312\001\001\000\002\001\001\000\010\042\317\043\314" +
    "\072\315\001\001\000\002\001\001\000\004\043\u013e\001" +
    "\001\000\034\022\333\044\324\045\322\050\335\055\341" +
    "\061\351\063\327\064\350\065\346\066\334\067\320\101" +
    "\332\104\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\333\055" +
    "\u012f\001\001\000\032\022\333\045\u0103\050\335\055\341" +
    "\061\351\063\327\064\350\065\346\066\334\067\320\101" +
    "\332\104\321\001\001\000\002\001\001\000\020\017\u011b" +
    "\021\100\033\064\034\073\035\065\036\057\070\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\u0112" +
    "\021\100\033\064\034\073\035\065\036\057\070\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\022\333\044\u0102\045\322\050" +
    "\335\055\341\061\351\063\327\064\350\065\346\066\334" +
    "\067\320\101\332\104\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\157\021\100\023\354\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\157\021\100\023" +
    "\365\033\064\034\073\035\065\036\057\070\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\157\021\100\023\371\033\064\034\073\035\065" +
    "\036\057\070\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\376" +
    "\021\100\033\064\034\073\035\065\036\057\070\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\333\045\u0103\050\335\055" +
    "\341\061\351\063\327\064\350\065\346\066\334\067\320" +
    "\101\332\104\321\001\001\000\002\001\001\000\020\017" +
    "\u0105\021\100\033\064\034\073\035\065\036\057\070\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\017\157\021\100\023\u010f\033\064\034\073" +
    "\035\065\036\057\070\070\001\001\000\022\017\157\021" +
    "\100\023\u010d\033\064\034\073\035\065\036\057\070\070" +
    "\001\001\000\002\001\001\000\020\017\u010c\021\100\033" +
    "\064\034\073\035\065\036\057\070\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\022\333\043\u0114\045\u0115\050\335\055\341\061" +
    "\351\063\327\064\350\065\346\066\334\067\320\101\332" +
    "\104\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\022\333\043\u0119" +
    "\045\u011a\050\335\055\341\061\351\063\327\064\350\065" +
    "\346\066\334\067\320\101\332\104\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\u011f\021\100\033\064\034\073\035\065\036\057\070\070" +
    "\076\u011e\077\u011d\001\001\000\024\017\u011f\021\100\033" +
    "\064\034\073\035\065\036\057\070\070\076\u0126\100\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\022" +
    "\333\043\u0121\045\u0122\050\335\055\341\061\351\063\327" +
    "\064\350\065\346\066\334\067\320\101\332\104\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\022\333\043\u0129\045\u012a\050\335\055\341\061" +
    "\351\063\327\064\350\065\346\066\334\067\320\101\332" +
    "\104\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\u0138\021\100\033\064\034\073\035\065\036" +
    "\057\070\070\001\001\000\020\017\u0133\021\100\033\064" +
    "\034\073\035\065\036\057\070\070\001\001\000\002\001" +
    "\001\000\034\022\333\043\u0135\045\u0136\050\335\055\341" +
    "\061\351\063\327\064\350\065\346\066\334\067\320\101" +
    "\332\104\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\022\333\043" +
    "\u013a\045\u013b\050\335\055\341\061\351\063\327\064\350" +
    "\065\346\066\334\067\320\101\332\104\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u0145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u0147\001\001\000\002\001\001\000\006\010\043" +
    "\032\u0149\001\001\000\002\001\001\000\006\010\043\032" +
    "\u014b\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\043\032\u014e\001\001\000\002\001\001\000\006\010" +
    "\043\032\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\u0153\026\025\031\020\037\015\047\027\051" +
    "\021\053\023\054\014\072\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\022\333\045\u0103\050\335\055" +
    "\341\061\351\063\327\064\350\065\346\066\334\067\320" +
    "\101\332\104\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u015b" +
    "\001\001\000\002\001\001\000\010\042\u015d\043\314\072" +
    "\315\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //ArrayList<Traduccion> tree;
    static int fila;
    static int columna;
    //public ArrayList<Traduccion> DevolverArbol() {
    //        return tree;
    //}
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    }  

    public static int getFila(){
        return fila;
    }
    
    public static int getColumna(){
        return columna;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PRIMITIVO ::= nil 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(new Nulo()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PRIMITIVO ::= decimal 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PRIMITIVO ::= numero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PRIMITIVO ::= falso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(false); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PRIMITIVO ::= verdadero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PRIMITIVO ::= caracter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("char: "+e);//parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRIMITIVO ::= cadena 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("string: "+e);//parser.fila = eleft; parser.columna = eright; RESULT = new Primitivo(e.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LOGICA ::= not EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, Operador.NOT); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LOGICA ::= EXPRESION nor EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.AND); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LOGICA ::= EXPRESION nand EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.AND); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LOGICA ::= EXPRESION and EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.AND); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LOGICA ::= EXPRESION or EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.OR); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.DIFERENTE_QUE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // RELACIONAL ::= EXPRESION igualacion EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.IGUAL_IGUAL); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RELACIONAL ::= EXPRESION menorque EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MENOR_QUE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MENOR_IGUAL); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MAYOR_IGUAL); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RELACIONAL ::= EXPRESION mayorque EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MAYOR_QUE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARITMETICA ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.POTENCIA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.POTENCIA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.DIVISION); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.MULTIPLICACION); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.RESTA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, e1, Operador.SUMA); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARITMETICA ::= menos EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = new Operacion(e, Operador.MENOS_UNARIO); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LLAMADA ::= identificador parenI LISTA_EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ACCESO ::= ACCESO punto identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ACCESO ::= ACCESO parenI LISTA_EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ACCESO ::= ACCESO corI LISTA_EXPRESION corD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ACCESO ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= MEMORIA_VIRTUAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= ACCESO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= PRIMITIVO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= RELACIONAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= LOGICA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= ARITMETICA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 //parser.fila = eleft; parser.columna = eright; RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // READ ::= leer parenI LISTA_IDENTIFICADORES parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("READ",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WRITE ::= escribirln parenI LISTA_EXPRESION parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WRITE ::= escribir parenI LISTA_EXPRESION parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FOR ::= para ASIGNACION downto EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FOR ::= para ASIGNACION to EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FOR ::= para ASIGNACION downto EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FOR ::= para ASIGNACION to EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // REPEAT ::= repeat LISTA_INSTRUCCIONES until EXPRESION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REPEAT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WHILE ::= mientras EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WHILE ::= mientras EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DEFECTO ::= sino BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DEFECTO ::= sino INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE ::= EXPRESION dosPuntos BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASE ::= EXPRESION dosPuntos INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASELIST ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASELIST ::= CASELIST CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SWITCH ::= caso EXPRESION of CASELIST DEFECTO end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SWITCH ::= caso EXPRESION of CASELIST end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTRUCCIONESIF ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCCIONESIF ::= begin LISTA_INSTRUCCIONES end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTAIF ::= sino si EXPRESION then INSTRUCCIONESIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTAIF",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTAIF ::= sino si EXPRESION then INSTRUCCIONESIF LISTAIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTAIF",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TRANSFERENCIA ::= salir pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TRANSFERENCIA ::= continuar pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TRANSFERENCIA ::= detener pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNACION ::= VARIABLE dosPuntos igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WITH ::= con identificador hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WITH ::= con identificador hacer BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCCION ::= LLAMADA pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCCION ::= free parenI EXPRESION parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCCION ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCCION ::= READ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCCION ::= WRITE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCION ::= REPEAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCION ::= TRANSFERENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCION ::= ASIGNACION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCION ::= WITH 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BLOQUE_INSTRUCCIONES ::= begin end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BLOQUE_INSTRUCCIONES ::= begin LISTA_INSTRUCCIONES end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MAIN ::= begin end punto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MAIN ::= begin LISTA_INSTRUCCIONES end punto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RECORDS ::= LISTA_IDENTIFICADORES dosPuntos ARRAY_DECLARATION_MULTI pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RECORDS ::= LISTA_IDENTIFICADORES dosPuntos ARRAY_DECLARATION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RECORDS ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_RECORDS ::= RECORDS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_RECORDS ::= LISTA_RECORDS RECORDS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REGISTRO ::= record LISTA_RECORDS end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGISTRO",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO_FUNCION ::= BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO_FUNCION ::= VARINIT BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_PARAMETROS ::= var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_PARAMETROS ::= LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROS ::= parenI parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS ::= parenI LISTA_PARAMETROS parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PROCEDURE ::= procedure identificador PARAMETROS pComa CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METHOD_LIST ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METHOD_LIST ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METHOD_LIST ::= METHOD_LIST PROCEDURE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METHOD_LIST ::= METHOD_LIST FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SECCION_FUNCION ::= MAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SECCION_FUNCION ::= METHOD_LIST MAIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR ::= LISTA_IDENTIFICADORES dosPuntos REGISTRO pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_VAR ::= VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR ::= DECLARACION_VAR VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARINIT ::= var DECLARACION_VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARINIT",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SECCION_VAR ::= SECCION_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SECCION_VAR ::= VARINIT SECCION_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONST ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONST",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_CONST ::= CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_CONST ::= DECLARACION_CONST CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SECCION_CONST ::= SECCION_VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SECCION_CONST ::= constante DECLARACION_CONST SECCION_VAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_PRIMITIVO ::= record 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_PRIMITIVO ::= string 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_PRIMITIVO ::= word 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_PRIMITIVO ::= bool 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_PRIMITIVO ::= character 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_PRIMITIVO ::= real 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_PRIMITIVO ::= integer 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MEMORIA_VIRTUAL ::= malloc parenI EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MEMORIA_VIRTUAL ::= sizeof parenI EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_EXPRESION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARIABLE ::= VARIABLE punto identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLE ::= VARIABLE parenI LISTA_EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLE ::= VARIABLE corI LISTA_EXPRESION corD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLE ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_IDENTIFICADORES ::= identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES coma identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_RANGO_ARRAY ::= RANGO_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_RANGO_ARRAY ::= LISTA_RANGO_ARRAY coma RANGO_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARRAY_MULTI ::= RANGO_ARRAY coma LISTA_RANGO_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_MULTI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARRAY_DECLARATION_MULTI ::= array corI ARRAY_MULTI corD of TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION_MULTI",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RANGO_ARRAY ::= EXPRESION dosP EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RANGO_ARRAY",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION_MULTI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UPPER_LIMIT ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LOWER_LIMIT ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBRANGE_TYPE ::= LISTA_IDENTIFICADORES igual LOWER_LIMIT tresP UPPER_LIMIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUBRANGE_TYPE",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ENUM_TYPE ::= LISTA_IDENTIFICADORES igual parenI LISTA_EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ENUM_TYPE",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igual REGISTRO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igual TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_TIPOS ::= ARRAY_TYPE pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_TIPOS ::= SUBRANGE_TYPE pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_TIPOS ::= ENUM_TYPE pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_TIPOS ::= TIPO_DECLARACION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DECLARACION_TIPOS ::= DECLARACION_TIPOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DECLARACION_TIPOS ::= LISTA_DECLARACION_TIPOS DECLARACION_TIPOS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_TIPO ::= SECCION_CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_TIPO ::= type LISTA_DECLARACION_TIPOS SECCION_CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= SECCION_TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // USES ::= uses LISTA_IDENTIFICADORES pComa SECCION_TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= program identificador pComa USES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAM",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("Termino Correctamente"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

