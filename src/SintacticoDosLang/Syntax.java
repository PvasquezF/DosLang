
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 07 10:54:28 CST 2019
//----------------------------------------------------

package SintacticoDosLang;

import java.util.ArrayList;
import java_cup.runtime.*;
import doslang.DosLang;
import Instrucciones.*;
import Expresiones.*;
import Interfaces.*;
import TablaSimbolos.*;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;
import Expresiones.Operacion.Operador;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 07 10:54:28 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\005\006\000\002\005\003\000\002\006\005" +
    "\000\002\006\003\000\002\007\004\000\002\007\003\000" +
    "\002\033\004\000\002\035\005\000\002\063\003\000\002" +
    "\064\003\000\002\066\010\000\002\066\010\000\002\066" +
    "\010\000\002\072\005\000\002\071\010\000\002\025\005" +
    "\000\002\024\005\000\002\024\003\000\002\023\005\000" +
    "\002\023\003\000\002\030\003\000\002\030\006\000\002" +
    "\030\006\000\002\030\005\000\002\031\005\000\002\031" +
    "\003\000\002\065\006\000\002\065\006\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\067\003\000\002\067\005\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\015\005" +
    "\000\002\015\003\000\002\016\004\000\002\016\003\000" +
    "\002\036\010\000\002\014\004\000\002\014\003\000\002" +
    "\012\004\000\002\013\004\000\002\013\003\000\002\034" +
    "\010\000\002\034\006\000\002\011\004\000\002\011\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\042\012\000\002\042\011\000\002" +
    "\045\010\000\002\045\007\000\002\075\005\000\002\075" +
    "\004\000\002\076\007\000\002\076\010\000\002\076\005" +
    "\000\002\076\006\000\002\027\005\000\002\026\004\000" +
    "\002\026\003\000\002\073\006\000\002\043\006\000\002" +
    "\043\005\000\002\017\006\000\002\017\005\000\002\010" +
    "\004\000\002\010\003\000\002\037\003\000\002\037\004" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\007\000\002\037" +
    "\004\000\002\041\010\000\002\040\005\000\002\054\004" +
    "\000\002\054\004\000\002\054\004\000\002\046\010\000" +
    "\002\046\006\000\002\020\003\000\002\020\004\000\002" +
    "\020\003\000\002\021\005\000\002\021\004\000\002\047" +
    "\010\000\002\047\011\000\002\077\004\000\002\077\003" +
    "\000\002\074\005\000\002\074\005\000\002\022\004\000" +
    "\002\022\004\000\002\050\006\000\002\050\006\000\002" +
    "\052\007\000\002\053\010\000\002\053\010\000\002\053" +
    "\010\000\002\053\010\000\002\044\007\000\002\044\007" +
    "\000\002\051\007\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\005\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\032" +
    "\003\000\002\032\006\000\002\032\005\000\002\062\006" +
    "\000\002\062\005\000\002\056\004\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\004\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\004\055\004\001\002\000\004\011\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\011\001\002\000" +
    "\020\022\027\040\013\042\025\050\023\054\012\062\031" +
    "\066\021\001\002\000\004\011\u0152\001\002\000\040\011" +
    "\334\036\320\041\305\046\u014e\047\303\051\331\056\316" +
    "\064\311\065\310\111\330\112\326\113\325\114\317\115" +
    "\322\116\323\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\uffc8\001\002\000\004\002\uffcf\001\002\000\010\040" +
    "\013\050\023\054\012\001\002\000\004\002\uffd4\001\002" +
    "\000\004\011\035\001\002\000\010\040\uffc4\050\uffc4\054" +
    "\uffc4\001\002\000\004\011\267\001\002\000\010\040\013" +
    "\050\023\054\012\001\002\000\004\011\035\001\002\000" +
    "\004\002\ufffb\001\002\000\004\011\035\001\002\000\010" +
    "\040\uffc5\050\uffc5\054\uffc5\001\002\000\004\011\035\001" +
    "\002\000\004\002\ufffd\001\002\000\012\011\uffcc\040\uffcc" +
    "\050\uffcc\054\uffcc\001\002\000\006\023\040\067\041\001" +
    "\002\000\012\007\uffeb\023\uffeb\067\uffeb\076\uffeb\001\002" +
    "\000\012\011\035\040\uffce\050\uffce\054\uffce\001\002\000" +
    "\012\011\uffcd\040\uffcd\050\uffcd\054\uffcd\001\002\000\004" +
    "\011\240\001\002\000\026\011\060\012\045\013\055\014" +
    "\051\015\043\016\042\017\047\020\046\024\053\027\052" +
    "\001\002\000\010\007\uffde\025\uffde\076\uffde\001\002\000" +
    "\010\007\uffdf\025\uffdf\076\uffdf\001\002\000\010\007\uffd9" +
    "\025\uffd9\076\uffd9\001\002\000\010\007\uffe2\025\uffe2\076" +
    "\uffe2\001\002\000\012\007\uffdc\011\230\025\uffdc\076\uffdc" +
    "\001\002\000\010\007\uffdd\025\uffdd\076\uffdd\001\002\000" +
    "\010\007\uffd7\025\uffd7\076\uffd7\001\002\000\010\007\uffe0" +
    "\025\uffe0\076\uffe0\001\002\000\004\030\201\001\002\000" +
    "\034\004\070\005\066\010\065\011\107\021\073\024\074" +
    "\034\101\035\103\052\067\102\104\103\102\105\077\117" +
    "\076\001\002\000\006\007\061\076\062\001\002\000\010" +
    "\007\uffe1\025\uffe1\076\uffe1\001\002\000\010\007\uffd8\025" +
    "\uffd8\076\uffd8\001\002\000\010\007\uffd6\025\uffd6\076\uffd6" +
    "\001\002\000\010\007\uffdb\025\uffdb\076\uffdb\001\002\000" +
    "\012\011\uffca\040\uffca\050\uffca\054\uffca\001\002\000\034" +
    "\004\070\005\066\010\065\011\107\021\073\024\074\034" +
    "\101\035\103\052\067\102\104\103\102\105\077\117\076" +
    "\001\002\000\070\007\uff82\023\uff82\025\uff82\031\uff82\032" +
    "\uff82\033\uff82\037\uff82\043\uff82\044\uff82\053\uff82\057\uff82" +
    "\060\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074" +
    "\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\104\uff82" +
    "\105\uff82\106\uff82\107\uff82\001\002\000\070\007\uff7e\023" +
    "\uff7e\025\uff7e\031\uff7e\032\uff7e\033\uff7e\037\uff7e\043\uff7e" +
    "\044\uff7e\053\uff7e\057\uff7e\060\uff7e\067\uff7e\070\uff7e\071" +
    "\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e" +
    "\100\uff7e\101\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\001" +
    "\002\000\070\007\uff66\023\uff66\025\uff66\031\uff66\032\uff66" +
    "\033\uff66\037\uff66\043\uff66\044\uff66\053\uff66\057\uff66\060" +
    "\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66" +
    "\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66\104\uff66\105" +
    "\uff66\106\uff66\107\uff66\001\002\000\070\007\uff61\023\uff61" +
    "\025\uff61\031\uff61\032\uff61\033\uff61\037\uff61\043\uff61\044" +
    "\uff61\053\uff61\057\uff61\060\uff61\067\uff61\070\uff61\071\uff61" +
    "\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077\uff61\100" +
    "\uff61\101\uff61\104\uff61\105\uff61\106\uff61\107\uff61\001\002" +
    "\000\034\004\070\005\066\010\065\011\107\021\073\024" +
    "\074\034\101\035\103\052\067\102\104\103\102\105\077" +
    "\117\076\001\002\000\070\007\uff62\023\uff62\025\uff62\031" +
    "\uff62\032\uff62\033\uff62\037\uff62\043\uff62\044\uff62\053\uff62" +
    "\057\uff62\060\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073" +
    "\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62" +
    "\104\uff62\105\uff62\106\uff62\107\uff62\001\002\000\070\007" +
    "\uff85\023\uff85\025\uff85\031\uff85\032\uff85\033\uff85\037\uff85" +
    "\043\uff85\044\uff85\053\uff85\057\uff85\060\uff85\067\uff85\070" +
    "\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85" +
    "\077\uff85\100\uff85\101\uff85\104\uff85\105\uff85\106\uff85\107" +
    "\uff85\001\002\000\070\007\uff84\023\uff84\025\uff84\031\uff84" +
    "\032\uff84\033\uff84\037\uff84\043\uff84\044\uff84\053\uff84\057" +
    "\uff84\060\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84" +
    "\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\104" +
    "\uff84\105\uff84\106\uff84\107\uff84\001\002\000\070\007\uff60" +
    "\023\uff60\025\uff60\031\uff60\032\uff60\033\uff60\037\uff60\043" +
    "\uff60\044\uff60\053\uff60\057\uff60\060\uff60\067\uff60\070\uff60" +
    "\071\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077" +
    "\uff60\100\uff60\101\uff60\104\uff60\105\uff60\106\uff60\107\uff60" +
    "\001\002\000\034\004\070\005\066\010\065\011\107\021" +
    "\073\024\074\034\101\035\103\052\067\102\104\103\102" +
    "\105\077\117\076\001\002\000\074\007\uff80\023\uff80\025" +
    "\uff80\030\170\031\uff80\032\uff80\033\uff80\037\uff80\043\uff80" +
    "\044\uff80\053\uff80\057\uff80\060\uff80\063\167\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80" +
    "\077\uff80\100\uff80\101\uff80\104\uff80\105\uff80\106\uff80\107" +
    "\uff80\001\002\000\070\007\uff65\023\uff65\025\uff65\031\uff65" +
    "\032\uff65\033\uff65\037\uff65\043\uff65\044\uff65\053\uff65\057" +
    "\uff65\060\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65" +
    "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\104" +
    "\uff65\105\uff65\106\uff65\107\uff65\001\002\000\034\004\070" +
    "\005\066\010\065\011\107\021\073\024\074\034\101\035" +
    "\103\052\067\102\104\103\102\105\077\117\076\001\002" +
    "\000\070\007\uff83\023\uff83\025\uff83\031\uff83\032\uff83\033" +
    "\uff83\037\uff83\043\uff83\044\uff83\053\uff83\057\uff83\060\uff83" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\076\uff83\077\uff83\100\uff83\101\uff83\104\uff83\105\uff83" +
    "\106\uff83\107\uff83\001\002\000\004\024\163\001\002\000" +
    "\070\007\uff64\023\uff64\025\uff64\031\uff64\032\uff64\033\uff64" +
    "\037\uff64\043\uff64\044\uff64\053\uff64\057\uff64\060\uff64\067" +
    "\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64\075\uff64" +
    "\076\uff64\077\uff64\100\uff64\101\uff64\104\uff64\105\uff64\106" +
    "\uff64\107\uff64\001\002\000\004\024\160\001\002\000\070" +
    "\007\uff63\023\uff63\025\uff63\031\uff63\032\uff63\033\uff63\037" +
    "\uff63\043\uff63\044\uff63\053\uff63\057\uff63\060\uff63\067\uff63" +
    "\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076" +
    "\uff63\077\uff63\100\uff63\101\uff63\104\uff63\105\uff63\106\uff63" +
    "\107\uff63\001\002\000\070\007\uff7f\023\uff7f\025\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\037\uff7f\043\uff7f\044\uff7f\053\uff7f" +
    "\057\uff7f\060\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073" +
    "\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f" +
    "\104\uff7f\105\uff7f\106\uff7f\107\uff7f\001\002\000\044\007" +
    "\157\037\122\053\120\070\114\071\126\072\133\073\131" +
    "\074\115\075\117\076\125\077\124\100\127\101\116\104" +
    "\132\105\121\106\130\107\123\001\002\000\076\007\uff7d" +
    "\023\uff7d\024\110\025\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\037\uff7d\043\uff7d\044\uff7d\053\uff7d\057\uff7d\060\uff7d" +
    "\063\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\104\uff7d" +
    "\105\uff7d\106\uff7d\107\uff7d\001\002\000\036\004\070\005" +
    "\066\010\065\011\107\021\073\024\074\025\111\034\101" +
    "\035\103\052\067\102\104\103\102\105\077\117\076\001" +
    "\002\000\070\007\uff79\023\uff79\025\uff79\031\uff79\032\uff79" +
    "\033\uff79\037\uff79\043\uff79\044\uff79\053\uff79\057\uff79\060" +
    "\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79" +
    "\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\104\uff79\105" +
    "\uff79\106\uff79\107\uff79\001\002\000\006\023\154\025\155" +
    "\001\002\000\052\023\uffe5\025\uffe5\031\uffe5\037\122\053" +
    "\120\067\uffe5\070\114\071\126\072\133\073\131\074\115" +
    "\075\117\076\125\077\124\100\127\101\116\104\132\105" +
    "\121\106\130\107\123\001\002\000\034\004\070\005\066" +
    "\010\065\011\107\021\073\024\074\034\101\035\103\052" +
    "\067\102\104\103\102\105\077\117\076\001\002\000\034" +
    "\004\070\005\066\010\065\011\107\021\073\024\074\034" +
    "\101\035\103\052\067\102\104\103\102\105\077\117\076" +
    "\001\002\000\034\004\070\005\066\010\065\011\107\021" +
    "\073\024\074\034\101\035\103\052\067\102\104\103\102" +
    "\105\077\117\076\001\002\000\034\004\070\005\066\010" +
    "\065\011\107\021\073\024\074\034\101\035\103\052\067" +
    "\102\104\103\102\105\077\117\076\001\002\000\034\004" +
    "\070\005\066\010\065\011\107\021\073\024\074\034\101" +
    "\035\103\052\067\102\104\103\102\105\077\117\076\001" +
    "\002\000\034\004\070\005\066\010\065\011\107\021\073" +
    "\024\074\034\101\035\103\052\067\102\104\103\102\105" +
    "\077\117\076\001\002\000\034\004\070\005\066\010\065" +
    "\011\107\021\073\024\074\034\101\035\103\052\067\102" +
    "\104\103\102\105\077\117\076\001\002\000\034\004\070" +
    "\005\066\010\065\011\107\021\073\024\074\034\101\035" +
    "\103\052\067\102\104\103\102\105\077\117\076\001\002" +
    "\000\034\004\070\005\066\010\065\011\107\021\073\024" +
    "\074\034\101\035\103\052\067\102\104\103\102\105\077" +
    "\117\076\001\002\000\034\004\070\005\066\010\065\011" +
    "\107\021\073\024\074\034\101\035\103\052\067\102\104" +
    "\103\102\105\077\117\076\001\002\000\034\004\070\005" +
    "\066\010\065\011\107\021\073\024\074\034\101\035\103" +
    "\052\067\102\104\103\102\105\077\117\076\001\002\000" +
    "\034\004\070\005\066\010\065\011\107\021\073\024\074" +
    "\034\101\035\103\052\067\102\104\103\102\105\077\117" +
    "\076\001\002\000\034\004\070\005\066\010\065\011\107" +
    "\021\073\024\074\034\101\035\103\052\067\102\104\103" +
    "\102\105\077\117\076\001\002\000\034\004\070\005\066" +
    "\010\065\011\107\021\073\024\074\034\101\035\103\052" +
    "\067\102\104\103\102\105\077\117\076\001\002\000\034" +
    "\004\070\005\066\010\065\011\107\021\073\024\074\034" +
    "\101\035\103\052\067\102\104\103\102\105\077\117\076" +
    "\001\002\000\034\004\070\005\066\010\065\011\107\021" +
    "\073\024\074\034\101\035\103\052\067\102\104\103\102" +
    "\105\077\117\076\001\002\000\070\007\uff6e\023\uff6e\025" +
    "\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e\043\uff6e\044\uff6e" +
    "\053\uff6e\057\uff6e\060\uff6e\067\uff6e\070\114\071\126\072" +
    "\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e" +
    "\101\uff6e\104\132\105\121\106\130\107\123\001\002\000" +
    "\070\007\uff77\023\uff77\025\uff77\031\uff77\032\uff77\033\uff77" +
    "\037\uff77\043\uff77\044\uff77\053\uff77\057\uff77\060\uff77\067" +
    "\uff77\070\114\071\126\072\uff77\073\uff77\074\uff77\075\uff77" +
    "\076\uff77\077\uff77\100\uff77\101\uff77\104\uff77\105\uff77\106" +
    "\130\107\123\001\002\000\070\007\uff6f\023\uff6f\025\uff6f" +
    "\031\uff6f\032\uff6f\033\uff6f\037\uff6f\043\uff6f\044\uff6f\053" +
    "\uff6f\057\uff6f\060\uff6f\067\uff6f\070\114\071\126\072\uff6f" +
    "\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101" +
    "\uff6f\104\132\105\121\106\130\107\123\001\002\000\070" +
    "\007\uff75\023\uff75\025\uff75\031\uff75\032\uff75\033\uff75\037" +
    "\uff75\043\uff75\044\uff75\053\uff75\057\uff75\060\uff75\067\uff75" +
    "\070\114\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076" +
    "\uff75\077\uff75\100\uff75\101\uff75\104\uff75\105\uff75\106\uff75" +
    "\107\uff75\001\002\000\070\007\uff69\023\uff69\025\uff69\031" +
    "\uff69\032\uff69\033\uff69\037\122\043\uff69\044\uff69\053\uff69" +
    "\057\uff69\060\uff69\067\uff69\070\114\071\126\072\133\073" +
    "\131\074\115\075\117\076\125\077\124\100\uff69\101\uff69" +
    "\104\132\105\121\106\130\107\123\001\002\000\070\007" +
    "\uff72\023\uff72\025\uff72\031\uff72\032\uff72\033\uff72\037\uff72" +
    "\043\uff72\044\uff72\053\uff72\057\uff72\060\uff72\067\uff72\070" +
    "\114\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72" +
    "\077\uff72\100\uff72\101\uff72\104\uff72\105\uff72\106\uff72\107" +
    "\uff72\001\002\000\070\007\uff6d\023\uff6d\025\uff6d\031\uff6d" +
    "\032\uff6d\033\uff6d\037\uff6d\043\uff6d\044\uff6d\053\uff6d\057" +
    "\uff6d\060\uff6d\067\uff6d\070\114\071\126\072\133\073\131" +
    "\074\115\075\117\076\uff6d\077\uff6d\100\uff6d\101\uff6d\104" +
    "\132\105\121\106\130\107\123\001\002\000\070\007\uff6c" +
    "\023\uff6c\025\uff6c\031\uff6c\032\uff6c\033\uff6c\037\uff6c\043" +
    "\uff6c\044\uff6c\053\uff6c\057\uff6c\060\uff6c\067\uff6c\070\114" +
    "\071\126\072\133\073\131\074\115\075\117\076\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\104\132\105\121\106\130\107\123" +
    "\001\002\000\070\007\uff74\023\uff74\025\uff74\031\uff74\032" +
    "\uff74\033\uff74\037\uff74\043\uff74\044\uff74\053\uff74\057\uff74" +
    "\060\uff74\067\uff74\070\114\071\uff74\072\uff74\073\uff74\074" +
    "\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\104\uff74" +
    "\105\uff74\106\uff74\107\uff74\001\002\000\070\007\uff6a\023" +
    "\uff6a\025\uff6a\031\uff6a\032\uff6a\033\uff6a\037\uff6a\043\uff6a" +
    "\044\uff6a\053\uff6a\057\uff6a\060\uff6a\067\uff6a\070\114\071" +
    "\126\072\133\073\131\074\115\075\117\076\125\077\124" +
    "\100\uff6a\101\uff6a\104\132\105\121\106\130\107\123\001" +
    "\002\000\070\007\uff76\023\uff76\025\uff76\031\uff76\032\uff76" +
    "\033\uff76\037\uff76\043\uff76\044\uff76\053\uff76\057\uff76\060" +
    "\uff76\067\uff76\070\114\071\126\072\uff76\073\uff76\074\uff76" +
    "\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76\104\uff76\105" +
    "\uff76\106\130\107\123\001\002\000\070\007\uff6b\023\uff6b" +
    "\025\uff6b\031\uff6b\032\uff6b\033\uff6b\037\122\043\uff6b\044" +
    "\uff6b\053\uff6b\057\uff6b\060\uff6b\067\uff6b\070\114\071\126" +
    "\072\133\073\131\074\115\075\117\076\125\077\124\100" +
    "\127\101\116\104\132\105\121\106\130\107\123\001\002" +
    "\000\070\007\uff70\023\uff70\025\uff70\031\uff70\032\uff70\033" +
    "\uff70\037\uff70\043\uff70\044\uff70\053\uff70\057\uff70\060\uff70" +
    "\067\uff70\070\114\071\126\072\uff70\073\uff70\074\uff70\075" +
    "\uff70\076\uff70\077\uff70\100\uff70\101\uff70\104\132\105\121" +
    "\106\130\107\123\001\002\000\070\007\uff68\023\uff68\025" +
    "\uff68\031\uff68\032\uff68\033\uff68\037\122\043\uff68\044\uff68" +
    "\053\uff68\057\uff68\060\uff68\067\uff68\070\114\071\126\072" +
    "\133\073\131\074\115\075\117\076\125\077\124\100\uff68" +
    "\101\uff68\104\132\105\121\106\130\107\123\001\002\000" +
    "\070\007\uff71\023\uff71\025\uff71\031\uff71\032\uff71\033\uff71" +
    "\037\uff71\043\uff71\044\uff71\053\uff71\057\uff71\060\uff71\067" +
    "\uff71\070\114\071\126\072\uff71\073\uff71\074\uff71\075\uff71" +
    "\076\uff71\077\uff71\100\uff71\101\uff71\104\132\105\121\106" +
    "\130\107\123\001\002\000\070\007\uff73\023\uff73\025\uff73" +
    "\031\uff73\032\uff73\033\uff73\037\uff73\043\uff73\044\uff73\053" +
    "\uff73\057\uff73\060\uff73\067\uff73\070\uff73\071\uff73\072\uff73" +
    "\073\uff73\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73\101" +
    "\uff73\104\uff73\105\uff73\106\uff73\107\uff73\001\002\000\034" +
    "\004\070\005\066\010\065\011\107\021\073\024\074\034" +
    "\101\035\103\052\067\102\104\103\102\105\077\117\076" +
    "\001\002\000\070\007\uff7a\023\uff7a\025\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\037\uff7a\043\uff7a\044\uff7a\053\uff7a\057\uff7a" +
    "\060\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\104\uff7a" +
    "\105\uff7a\106\uff7a\107\uff7a\001\002\000\052\023\uffe6\025" +
    "\uffe6\031\uffe6\037\122\053\120\067\uffe6\070\114\071\126" +
    "\072\133\073\131\074\115\075\117\076\125\077\124\100" +
    "\127\101\116\104\132\105\121\106\130\107\123\001\002" +
    "\000\012\011\uffcb\040\uffcb\050\uffcb\054\uffcb\001\002\000" +
    "\034\004\070\005\066\010\065\011\107\021\073\024\074" +
    "\034\101\035\103\052\067\102\104\103\102\105\077\117" +
    "\076\001\002\000\044\025\162\037\122\053\120\070\114" +
    "\071\126\072\133\073\131\074\115\075\117\076\125\077" +
    "\124\100\127\101\116\104\132\105\121\106\130\107\123" +
    "\001\002\000\070\007\uffe3\023\uffe3\025\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\037\uffe3\043\uffe3\044\uffe3\053\uffe3\057\uffe3" +
    "\060\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\104\uffe3" +
    "\105\uffe3\106\uffe3\107\uffe3\001\002\000\034\004\070\005" +
    "\066\010\065\011\107\021\073\024\074\034\101\035\103" +
    "\052\067\102\104\103\102\105\077\117\076\001\002\000" +
    "\044\025\165\037\122\053\120\070\114\071\126\072\133" +
    "\073\131\074\115\075\117\076\125\077\124\100\127\101" +
    "\116\104\132\105\121\106\130\107\123\001\002\000\070" +
    "\007\uffe4\023\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\037" +
    "\uffe4\043\uffe4\044\uffe4\053\uffe4\057\uffe4\060\uffe4\067\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\100\uffe4\101\uffe4\104\uffe4\105\uffe4\106\uffe4" +
    "\107\uffe4\001\002\000\070\007\uff78\023\uff78\025\uff78\031" +
    "\uff78\032\uff78\033\uff78\037\uff78\043\uff78\044\uff78\053\uff78" +
    "\057\uff78\060\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073" +
    "\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78" +
    "\104\uff78\105\uff78\106\uff78\107\uff78\001\002\000\004\011" +
    "\173\001\002\000\034\004\070\005\066\010\065\011\107" +
    "\021\073\024\074\034\101\035\103\052\067\102\104\103" +
    "\102\105\077\117\076\001\002\000\006\023\154\031\172" +
    "\001\002\000\074\007\uff7c\023\uff7c\025\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\037\uff7c\043\uff7c\044\uff7c\053\uff7c" +
    "\057\uff7c\060\uff7c\063\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c" +
    "\101\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\001\002\000" +
    "\074\007\uff7b\023\uff7b\025\uff7b\030\uff7b\031\uff7b\032\uff7b" +
    "\033\uff7b\037\uff7b\043\uff7b\044\uff7b\053\uff7b\057\uff7b\060" +
    "\uff7b\063\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\104" +
    "\uff7b\105\uff7b\106\uff7b\107\uff7b\001\002\000\044\025\175" +
    "\037\122\053\120\070\114\071\126\072\133\073\131\074" +
    "\115\075\117\076\125\077\124\100\127\101\116\104\132" +
    "\105\121\106\130\107\123\001\002\000\070\007\uff81\023" +
    "\uff81\025\uff81\031\uff81\032\uff81\033\uff81\037\uff81\043\uff81" +
    "\044\uff81\053\uff81\057\uff81\060\uff81\067\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81" +
    "\100\uff81\101\uff81\104\uff81\105\uff81\106\uff81\107\uff81\001" +
    "\002\000\070\007\uff67\023\uff67\025\uff67\031\uff67\032\uff67" +
    "\033\uff67\037\uff67\043\uff67\044\uff67\053\uff67\057\uff67\060" +
    "\uff67\067\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67" +
    "\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67\104\uff67\105" +
    "\uff67\106\uff67\107\uff67\001\002\000\006\023\154\025\200" +
    "\001\002\000\010\007\uffda\025\uffda\076\uffda\001\002\000" +
    "\034\004\070\005\066\010\065\011\107\021\073\024\074" +
    "\034\101\035\103\052\067\102\104\103\102\105\077\117" +
    "\076\001\002\000\004\031\225\001\002\000\006\023\210" +
    "\031\207\001\002\000\044\032\205\037\122\053\120\070" +
    "\114\071\126\072\133\073\131\074\115\075\117\076\125" +
    "\077\124\100\127\101\116\104\132\105\121\106\130\107" +
    "\123\001\002\000\034\004\070\005\066\010\065\011\107" +
    "\021\073\024\074\034\101\035\103\052\067\102\104\103" +
    "\102\105\077\117\076\001\002\000\046\023\ufff1\031\ufff1" +
    "\037\122\053\120\070\114\071\126\072\133\073\131\074" +
    "\115\075\117\076\125\077\124\100\127\101\116\104\132" +
    "\105\121\106\130\107\123\001\002\000\004\033\215\001" +
    "\002\000\034\004\070\005\066\010\065\011\107\021\073" +
    "\024\074\034\101\035\103\052\067\102\104\103\102\105" +
    "\077\117\076\001\002\000\006\023\uffed\031\uffed\001\002" +
    "\000\006\023\213\031\uffef\001\002\000\034\004\070\005" +
    "\066\010\065\011\107\021\073\024\074\034\101\035\103" +
    "\052\067\102\104\103\102\105\077\117\076\001\002\000" +
    "\006\023\uffee\031\uffee\001\002\000\024\011\222\012\045" +
    "\013\055\014\051\015\043\016\042\017\047\020\217\027" +
    "\220\001\002\000\010\007\ufff3\025\ufff3\076\ufff3\001\002" +
    "\000\010\007\uffdc\025\uffdc\076\uffdc\001\002\000\004\030" +
    "\223\001\002\000\010\007\ufff4\025\ufff4\076\ufff4\001\002" +
    "\000\010\007\ufff2\025\ufff2\076\ufff2\001\002\000\034\004" +
    "\070\005\066\010\065\011\107\021\073\024\074\034\101" +
    "\035\103\052\067\102\104\103\102\105\077\117\076\001" +
    "\002\000\004\031\207\001\002\000\004\033\226\001\002" +
    "\000\020\012\045\013\055\014\051\015\043\016\042\017" +
    "\047\020\217\001\002\000\010\007\ufff0\025\ufff0\076\ufff0" +
    "\001\002\000\004\067\235\001\002\000\006\011\230\046" +
    "\233\001\002\000\006\011\uffb7\046\uffb7\001\002\000\010" +
    "\007\uffb9\025\uffb9\076\uffb9\001\002\000\006\011\uffb8\046" +
    "\uffb8\001\002\000\026\011\060\012\045\013\055\014\051" +
    "\015\043\016\042\017\047\020\046\024\053\027\052\001" +
    "\002\000\004\007\237\001\002\000\006\011\uffb6\046\uffb6" +
    "\001\002\000\012\007\uffec\023\uffec\067\uffec\076\uffec\001" +
    "\002\000\006\023\040\076\250\001\002\000\016\011\035" +
    "\040\013\042\025\050\023\054\012\062\031\001\002\000" +
    "\004\007\245\001\002\000\016\011\ufff9\040\ufff9\042\ufff9" +
    "\050\ufff9\054\ufff9\062\ufff9\001\002\000\016\011\ufff8\040" +
    "\ufff8\042\ufff8\050\ufff8\054\ufff8\062\ufff8\001\002\000\016" +
    "\011\ufffa\040\ufffa\042\ufffa\050\ufffa\054\ufffa\062\ufffa\001" +
    "\002\000\004\002\ufffc\001\002\000\026\011\060\012\045" +
    "\013\055\014\051\015\043\016\042\017\047\020\046\024" +
    "\053\027\052\001\002\000\004\007\ufff7\001\002\000\014" +
    "\011\uffd2\040\uffd2\050\uffd2\054\uffd2\062\uffd2\001\002\000" +
    "\006\023\040\067\257\001\002\000\014\011\035\040\013" +
    "\050\023\054\012\062\031\001\002\000\004\002\uffd5\001" +
    "\002\000\014\011\uffd3\040\uffd3\050\uffd3\054\uffd3\062\uffd3" +
    "\001\002\000\026\011\060\012\045\013\055\014\051\015" +
    "\043\016\042\017\047\020\046\024\053\027\052\001\002" +
    "\000\004\076\261\001\002\000\034\004\070\005\066\010" +
    "\065\011\107\021\073\024\074\034\101\035\103\052\067" +
    "\102\104\103\102\105\077\117\076\001\002\000\044\007" +
    "\263\037\122\053\120\070\114\071\126\072\133\073\131" +
    "\074\115\075\117\076\125\077\124\100\127\101\116\104" +
    "\132\105\121\106\130\107\123\001\002\000\014\011\uffd1" +
    "\040\uffd1\050\uffd1\054\uffd1\062\uffd1\001\002\000\010\040" +
    "\uffc6\050\uffc6\054\uffc6\001\002\000\010\040\uffc7\050\uffc7" +
    "\054\uffc7\001\002\000\004\002\uffc9\001\002\000\004\024" +
    "\270\001\002\000\010\011\035\025\u013a\062\u0138\001\002" +
    "\000\004\067\272\001\002\000\026\011\060\012\045\013" +
    "\055\014\051\015\043\016\042\017\047\020\046\024\053" +
    "\027\052\001\002\000\004\007\274\001\002\000\006\040" +
    "\277\062\031\001\002\000\010\040\uffc2\050\uffc2\054\uffc2" +
    "\001\002\000\004\040\277\001\002\000\040\011\334\036" +
    "\320\041\305\046\306\047\303\051\331\056\316\064\311" +
    "\065\310\111\330\112\326\113\325\114\317\115\322\116" +
    "\323\001\002\000\042\011\uffb0\036\uffb0\041\uffb0\046\uffb0" +
    "\047\uffb0\051\uffb0\056\uffb0\061\uffb0\064\uffb0\065\uffb0\111" +
    "\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\001\002" +
    "\000\074\004\uffa7\005\uffa7\010\uffa7\011\uffa7\021\uffa7\024" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\041\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\051\uffa7\052\uffa7\056\uffa7\061\uffa7\064\uffa7\065" +
    "\uffa7\102\uffa7\103\uffa7\105\uffa7\111\uffa7\112\uffa7\113\uffa7" +
    "\114\uffa7\115\uffa7\116\uffa7\117\uffa7\001\002\000\004\007" +
    "\u0135\001\002\000\004\011\353\001\002\000\040\011\334" +
    "\036\320\041\305\046\u0128\047\303\051\331\056\316\064" +
    "\311\065\310\111\330\112\326\113\325\114\317\115\322" +
    "\116\323\001\002\000\034\004\070\005\066\010\065\011" +
    "\107\021\073\024\074\034\101\035\103\052\067\102\104" +
    "\103\102\105\077\117\076\001\002\000\004\007\u0116\001" +
    "\002\000\074\004\uffab\005\uffab\010\uffab\011\uffab\021\uffab" +
    "\024\uffab\034\uffab\035\uffab\036\uffab\041\uffab\045\uffab\046" +
    "\uffab\047\uffab\051\uffab\052\uffab\056\uffab\061\uffab\064\uffab" +
    "\065\uffab\102\uffab\103\uffab\105\uffab\111\uffab\112\uffab\113" +
    "\uffab\114\uffab\115\uffab\116\uffab\117\uffab\001\002\000\004" +
    "\011\u0111\001\002\000\034\004\070\005\066\010\065\011" +
    "\107\021\073\024\074\034\101\035\103\052\067\102\104" +
    "\103\102\105\077\117\076\001\002\000\074\004\uffa6\005" +
    "\uffa6\010\uffa6\011\uffa6\021\uffa6\024\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\041\uffa6\045\uffa6\046\uffa6\047\uffa6\051\uffa6\052" +
    "\uffa6\056\uffa6\061\uffa6\064\uffa6\065\uffa6\102\uffa6\103\uffa6" +
    "\105\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\001\002\000\012\006\u010b\024\356\030\357" +
    "\063\355\001\002\000\074\004\uffa8\005\uffa8\010\uffa8\011" +
    "\uffa8\021\uffa8\024\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\056\uffa8\061" +
    "\uffa8\064\uffa8\065\uffa8\102\uffa8\103\uffa8\105\uffa8\111\uffa8" +
    "\112\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\001" +
    "\002\000\074\004\uffaf\005\uffaf\010\uffaf\011\uffaf\021\uffaf" +
    "\024\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\051\uffaf\052\uffaf\056\uffaf\061\uffaf\064\uffaf" +
    "\065\uffaf\102\uffaf\103\uffaf\105\uffaf\111\uffaf\112\uffaf\113" +
    "\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\001\002\000\036" +
    "\011\334\036\320\041\305\047\303\051\331\056\316\064" +
    "\311\065\310\111\330\112\326\113\325\114\317\115\322" +
    "\116\323\001\002\000\004\007\u0106\001\002\000\004\024" +
    "\u0102\001\002\000\004\007\u0101\001\002\000\004\024\375" +
    "\001\002\000\004\024\371\001\002\000\074\004\uffac\005" +
    "\uffac\010\uffac\011\uffac\021\uffac\024\uffac\034\uffac\035\uffac" +
    "\036\uffac\041\uffac\045\uffac\046\uffac\047\uffac\051\uffac\052" +
    "\uffac\056\uffac\061\uffac\064\uffac\065\uffac\102\uffac\103\uffac" +
    "\105\uffac\111\uffac\112\uffac\113\uffac\114\uffac\115\uffac\116" +
    "\uffac\117\uffac\001\002\000\004\007\370\001\002\000\004" +
    "\007\367\001\002\000\074\004\uffa9\005\uffa9\010\uffa9\011" +
    "\uffa9\021\uffa9\024\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\056\uffa9\061" +
    "\uffa9\064\uffa9\065\uffa9\102\uffa9\103\uffa9\105\uffa9\111\uffa9" +
    "\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\001" +
    "\002\000\004\024\352\001\002\000\034\004\070\005\066" +
    "\010\065\011\107\021\073\024\074\034\101\035\103\052" +
    "\067\102\104\103\102\105\077\117\076\001\002\000\074" +
    "\004\uffaa\005\uffaa\010\uffaa\011\uffaa\021\uffaa\024\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\041\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\051\uffaa\052\uffaa\056\uffaa\061\uffaa\064\uffaa\065\uffaa\102" +
    "\uffaa\103\uffaa\105\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa" +
    "\115\uffaa\116\uffaa\117\uffaa\001\002\000\074\004\uffad\005" +
    "\uffad\010\uffad\011\uffad\021\uffad\024\uffad\034\uffad\035\uffad" +
    "\036\uffad\041\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052" +
    "\uffad\056\uffad\061\uffad\064\uffad\065\uffad\102\uffad\103\uffad" +
    "\105\uffad\111\uffad\112\uffad\113\uffad\114\uffad\115\uffad\116" +
    "\uffad\117\uffad\001\002\000\012\006\uffea\024\110\030\uffea" +
    "\063\uffea\001\002\000\044\037\122\053\120\057\336\070" +
    "\114\071\126\072\133\073\131\074\115\075\117\076\125" +
    "\077\124\100\127\101\116\104\132\105\121\106\130\107" +
    "\123\001\002\000\040\011\334\036\320\040\341\041\305" +
    "\047\303\051\331\056\316\064\311\065\310\111\330\112" +
    "\326\113\325\114\317\115\322\116\323\001\002\000\074" +
    "\004\uff9a\005\uff9a\010\uff9a\011\uff9a\021\uff9a\024\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\041\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\056\uff9a\061\uff9a\064\uff9a\065\uff9a\102" +
    "\uff9a\103\uff9a\105\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a" +
    "\115\uff9a\116\uff9a\117\uff9a\001\002\000\076\004\uff9c\005" +
    "\uff9c\007\351\010\uff9c\011\uff9c\021\uff9c\024\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\041\uff9c\045\uff9c\046\uff9c\047\uff9c\051" +
    "\uff9c\052\uff9c\056\uff9c\061\uff9c\064\uff9c\065\uff9c\102\uff9c" +
    "\103\uff9c\105\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\115" +
    "\uff9c\116\uff9c\117\uff9c\001\002\000\040\011\334\036\320" +
    "\041\305\046\346\047\303\051\331\056\316\064\311\065" +
    "\310\111\330\112\326\113\325\114\317\115\322\116\323" +
    "\001\002\000\074\004\uff9d\005\uff9d\010\uff9d\011\uff9d\021" +
    "\uff9d\024\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d\045\343" +
    "\046\uff9d\047\uff9d\051\uff9d\052\uff9d\056\uff9d\061\uff9d\064" +
    "\uff9d\065\uff9d\102\uff9d\103\uff9d\105\uff9d\111\uff9d\112\uff9d" +
    "\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\001\002\000" +
    "\040\011\334\036\320\040\341\041\305\047\303\051\331" +
    "\056\316\064\311\065\310\111\330\112\326\113\325\114" +
    "\317\115\322\116\323\001\002\000\074\004\uff9e\005\uff9e" +
    "\010\uff9e\011\uff9e\021\uff9e\024\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\041\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\056\uff9e\061\uff9e\064\uff9e\065\uff9e\102\uff9e\103\uff9e\105" +
    "\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e" +
    "\117\uff9e\001\002\000\040\011\334\036\320\041\305\046" +
    "\350\047\303\051\331\056\316\064\311\065\310\111\330" +
    "\112\326\113\325\114\317\115\322\116\323\001\002\000" +
    "\076\004\uff98\005\uff98\007\uff98\010\uff98\011\uff98\021\uff98" +
    "\024\uff98\034\uff98\035\uff98\036\uff98\041\uff98\045\uff98\046" +
    "\uff98\047\uff98\051\uff98\052\uff98\056\uff98\061\uff98\064\uff98" +
    "\065\uff98\102\uff98\103\uff98\105\uff98\111\uff98\112\uff98\113" +
    "\uff98\114\uff98\115\uff98\116\uff98\117\uff98\001\002\000\042" +
    "\011\uffb1\036\uffb1\041\uffb1\046\uffb1\047\uffb1\051\uffb1\056" +
    "\uffb1\061\uffb1\064\uffb1\065\uffb1\111\uffb1\112\uffb1\113\uffb1" +
    "\114\uffb1\115\uffb1\116\uffb1\001\002\000\076\004\uff99\005" +
    "\uff99\007\uff99\010\uff99\011\uff99\021\uff99\024\uff99\034\uff99" +
    "\035\uff99\036\uff99\041\uff99\045\uff99\046\uff99\047\uff99\051" +
    "\uff99\052\uff99\056\uff99\061\uff99\064\uff99\065\uff99\102\uff99" +
    "\103\uff99\105\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115" +
    "\uff99\116\uff99\117\uff99\001\002\000\074\004\uff9b\005\uff9b" +
    "\010\uff9b\011\uff9b\021\uff9b\024\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\041\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b" +
    "\056\uff9b\061\uff9b\064\uff9b\065\uff9b\102\uff9b\103\uff9b\105" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b" +
    "\117\uff9b\001\002\000\004\011\353\001\002\000\014\006" +
    "\uffea\024\uffea\025\uffea\030\uffea\063\uffea\001\002\000\012" +
    "\024\356\025\360\030\357\063\355\001\002\000\004\011" +
    "\366\001\002\000\034\004\070\005\066\010\065\011\107" +
    "\021\073\024\074\034\101\035\103\052\067\102\104\103" +
    "\102\105\077\117\076\001\002\000\034\004\070\005\066" +
    "\010\065\011\107\021\073\024\074\034\101\035\103\052" +
    "\067\102\104\103\102\105\077\117\076\001\002\000\004" +
    "\007\361\001\002\000\074\004\uff86\005\uff86\010\uff86\011" +
    "\uff86\021\uff86\024\uff86\034\uff86\035\uff86\036\uff86\041\uff86" +
    "\045\uff86\046\uff86\047\uff86\051\uff86\052\uff86\056\uff86\061" +
    "\uff86\064\uff86\065\uff86\102\uff86\103\uff86\105\uff86\111\uff86" +
    "\112\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86\001" +
    "\002\000\006\023\154\031\363\001\002\000\014\006\uffe9" +
    "\024\uffe9\025\uffe9\030\uffe9\063\uffe9\001\002\000\006\023" +
    "\154\025\365\001\002\000\014\006\uffe8\024\uffe8\025\uffe8" +
    "\030\uffe8\063\uffe8\001\002\000\014\006\uffe7\024\uffe7\025" +
    "\uffe7\030\uffe7\063\uffe7\001\002\000\074\004\uffa1\005\uffa1" +
    "\010\uffa1\011\uffa1\021\uffa1\024\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\041\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1" +
    "\056\uffa1\061\uffa1\064\uffa1\065\uffa1\102\uffa1\103\uffa1\105" +
    "\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1" +
    "\117\uffa1\001\002\000\074\004\uffa0\005\uffa0\010\uffa0\011" +
    "\uffa0\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036\uffa0\041\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\051\uffa0\052\uffa0\056\uffa0\061" +
    "\uffa0\064\uffa0\065\uffa0\102\uffa0\103\uffa0\105\uffa0\111\uffa0" +
    "\112\uffa0\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\001" +
    "\002\000\034\004\070\005\066\010\065\011\107\021\073" +
    "\024\074\034\101\035\103\052\067\102\104\103\102\105" +
    "\077\117\076\001\002\000\006\023\154\025\373\001\002" +
    "\000\004\007\374\001\002\000\074\004\uff87\005\uff87\010" +
    "\uff87\011\uff87\021\uff87\024\uff87\034\uff87\035\uff87\036\uff87" +
    "\041\uff87\045\uff87\046\uff87\047\uff87\051\uff87\052\uff87\056" +
    "\uff87\061\uff87\064\uff87\065\uff87\102\uff87\103\uff87\105\uff87" +
    "\111\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117" +
    "\uff87\001\002\000\034\004\070\005\066\010\065\011\107" +
    "\021\073\024\074\034\101\035\103\052\067\102\104\103" +
    "\102\105\077\117\076\001\002\000\006\023\154\025\377" +
    "\001\002\000\004\007\u0100\001\002\000\074\004\uff88\005" +
    "\uff88\010\uff88\011\uff88\021\uff88\024\uff88\034\uff88\035\uff88" +
    "\036\uff88\041\uff88\045\uff88\046\uff88\047\uff88\051\uff88\052" +
    "\uff88\056\uff88\061\uff88\064\uff88\065\uff88\102\uff88\103\uff88" +
    "\105\uff88\111\uff88\112\uff88\113\uff88\114\uff88\115\uff88\116" +
    "\uff88\117\uff88\001\002\000\074\004\uffae\005\uffae\010\uffae" +
    "\011\uffae\021\uffae\024\uffae\034\uffae\035\uffae\036\uffae\041" +
    "\uffae\045\uffae\046\uffae\047\uffae\051\uffae\052\uffae\056\uffae" +
    "\061\uffae\064\uffae\065\uffae\102\uffae\103\uffae\105\uffae\111" +
    "\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117\uffae" +
    "\001\002\000\004\011\353\001\002\000\012\024\356\025" +
    "\u0104\030\357\063\355\001\002\000\004\007\u0105\001\002" +
    "\000\074\004\uffa5\005\uffa5\010\uffa5\011\uffa5\021\uffa5\024" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\041\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\051\uffa5\052\uffa5\056\uffa5\061\uffa5\064\uffa5\065" +
    "\uffa5\102\uffa5\103\uffa5\105\uffa5\111\uffa5\112\uffa5\113\uffa5" +
    "\114\uffa5\115\uffa5\116\uffa5\117\uffa5\001\002\000\074\004" +
    "\uff9f\005\uff9f\010\uff9f\011\uff9f\021\uff9f\024\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\041\uff9f\045\uff9f\046\uff9f\047\uff9f\051" +
    "\uff9f\052\uff9f\056\uff9f\061\uff9f\064\uff9f\065\uff9f\102\uff9f" +
    "\103\uff9f\105\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115" +
    "\uff9f\116\uff9f\117\uff9f\001\002\000\040\011\334\036\320" +
    "\041\305\047\303\051\331\056\316\061\u0108\064\311\065" +
    "\310\111\330\112\326\113\325\114\317\115\322\116\323" +
    "\001\002\000\034\004\070\005\066\010\065\011\107\021" +
    "\073\024\074\034\101\035\103\052\067\102\104\103\102" +
    "\105\077\117\076\001\002\000\044\007\u010a\037\122\053" +
    "\120\070\114\071\126\072\133\073\131\074\115\075\117" +
    "\076\125\077\124\100\127\101\116\104\132\105\121\106" +
    "\130\107\123\001\002\000\074\004\uff8d\005\uff8d\010\uff8d" +
    "\011\uff8d\021\uff8d\024\uff8d\034\uff8d\035\uff8d\036\uff8d\041" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d\052\uff8d\056\uff8d" +
    "\061\uff8d\064\uff8d\065\uff8d\102\uff8d\103\uff8d\105\uff8d\111" +
    "\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\116\uff8d\117\uff8d" +
    "\001\002\000\034\004\070\005\066\010\065\011\107\021" +
    "\073\024\074\034\101\035\103\052\067\102\104\103\102" +
    "\105\077\117\076\001\002\000\050\007\uffa2\037\122\044" +
    "\uffa2\053\120\060\uffa2\070\114\071\126\072\133\073\131" +
    "\074\115\075\117\076\125\077\124\100\127\101\116\104" +
    "\132\105\121\106\130\107\123\001\002\000\044\037\122" +
    "\043\u010e\053\120\070\114\071\126\072\133\073\131\074" +
    "\115\075\117\076\125\077\124\100\127\101\116\104\132" +
    "\105\121\106\130\107\123\001\002\000\040\011\334\036" +
    "\320\040\277\041\305\047\303\051\331\056\316\064\311" +
    "\065\310\111\330\112\326\113\325\114\317\115\322\116" +
    "\323\001\002\000\074\004\uff8f\005\uff8f\010\uff8f\011\uff8f" +
    "\021\uff8f\024\uff8f\034\uff8f\035\uff8f\036\uff8f\041\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\051\uff8f\052\uff8f\056\uff8f\061\uff8f" +
    "\064\uff8f\065\uff8f\102\uff8f\103\uff8f\105\uff8f\111\uff8f\112" +
    "\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\001\002" +
    "\000\074\004\uff8e\005\uff8e\010\uff8e\011\uff8e\021\uff8e\024" +
    "\uff8e\034\uff8e\035\uff8e\036\uff8e\041\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\051\uff8e\052\uff8e\056\uff8e\061\uff8e\064\uff8e\065" +
    "\uff8e\102\uff8e\103\uff8e\105\uff8e\111\uff8e\112\uff8e\113\uff8e" +
    "\114\uff8e\115\uff8e\116\uff8e\117\uff8e\001\002\000\004\043" +
    "\u0112\001\002\000\036\011\334\036\320\041\305\047\303" +
    "\051\331\056\316\064\311\065\310\111\330\112\326\113" +
    "\325\114\317\115\322\116\323\001\002\000\040\011\334" +
    "\036\320\041\305\046\u0114\047\303\051\331\056\316\064" +
    "\311\065\310\111\330\112\326\113\325\114\317\115\322" +
    "\116\323\001\002\000\004\007\u0115\001\002\000\074\004" +
    "\uffa3\005\uffa3\010\uffa3\011\uffa3\021\uffa3\024\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\041\uffa3\045\uffa3\046\uffa3\047\uffa3\051" +
    "\uffa3\052\uffa3\056\uffa3\061\uffa3\064\uffa3\065\uffa3\102\uffa3" +
    "\103\uffa3\105\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115" +
    "\uffa3\116\uffa3\117\uffa3\001\002\000\102\004\uffb2\005\uffb2" +
    "\010\uffb2\011\uffb2\021\uffb2\024\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\040\uffb2\041\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\056\uffb2\061\uffb2\064\uffb2\065" +
    "\uffb2\102\uffb2\103\uffb2\105\uffb2\111\uffb2\112\uffb2\113\uffb2" +
    "\114\uffb2\115\uffb2\116\uffb2\117\uffb2\001\002\000\044\033" +
    "\u0118\037\122\053\120\070\114\071\126\072\133\073\131" +
    "\074\115\075\117\076\125\077\124\100\127\101\116\104" +
    "\132\105\121\106\130\107\123\001\002\000\034\004\070" +
    "\005\066\010\065\011\107\021\073\024\074\034\101\035" +
    "\103\052\067\102\104\103\102\105\077\117\076\001\002" +
    "\000\040\004\070\005\066\010\065\011\107\021\073\024" +
    "\074\034\101\035\103\045\u0120\046\u011f\052\067\102\104" +
    "\103\102\105\077\117\076\001\002\000\006\023\154\067" +
    "\u011c\001\002\000\040\004\uff94\005\uff94\010\uff94\011\uff94" +
    "\021\uff94\024\uff94\034\uff94\035\uff94\045\uff94\046\uff94\052" +
    "\uff94\102\uff94\103\uff94\105\uff94\117\uff94\001\002\000\040" +
    "\011\334\036\320\040\277\041\305\047\303\051\331\056" +
    "\316\064\311\065\310\111\330\112\326\113\325\114\317" +
    "\115\322\116\323\001\002\000\040\004\uff92\005\uff92\010" +
    "\uff92\011\uff92\021\uff92\024\uff92\034\uff92\035\uff92\045\uff92" +
    "\046\uff92\052\uff92\102\uff92\103\uff92\105\uff92\117\uff92\001" +
    "\002\000\040\004\uff93\005\uff93\010\uff93\011\uff93\021\uff93" +
    "\024\uff93\034\uff93\035\uff93\045\uff93\046\uff93\052\uff93\102" +
    "\uff93\103\uff93\105\uff93\117\uff93\001\002\000\004\007\u0127" +
    "\001\002\000\040\011\334\036\320\040\277\041\305\047" +
    "\303\051\331\056\316\064\311\065\310\111\330\112\326" +
    "\113\325\114\317\115\322\116\323\001\002\000\004\046" +
    "\u0123\001\002\000\040\004\uff95\005\uff95\010\uff95\011\uff95" +
    "\021\uff95\024\uff95\034\uff95\035\uff95\045\uff95\046\uff95\052" +
    "\uff95\102\uff95\103\uff95\105\uff95\117\uff95\001\002\000\004" +
    "\007\u0124\001\002\000\074\004\uff96\005\uff96\010\uff96\011" +
    "\uff96\021\uff96\024\uff96\034\uff96\035\uff96\036\uff96\041\uff96" +
    "\045\uff96\046\uff96\047\uff96\051\uff96\052\uff96\056\uff96\061" +
    "\uff96\064\uff96\065\uff96\102\uff96\103\uff96\105\uff96\111\uff96" +
    "\112\uff96\113\uff96\114\uff96\115\uff96\116\uff96\117\uff96\001" +
    "\002\000\004\046\uff90\001\002\000\004\046\uff91\001\002" +
    "\000\074\004\uff97\005\uff97\010\uff97\011\uff97\021\uff97\024" +
    "\uff97\034\uff97\035\uff97\036\uff97\041\uff97\045\uff97\046\uff97" +
    "\047\uff97\051\uff97\052\uff97\056\uff97\061\uff97\064\uff97\065" +
    "\uff97\102\uff97\103\uff97\105\uff97\111\uff97\112\uff97\113\uff97" +
    "\114\uff97\115\uff97\116\uff97\117\uff97\001\002\000\004\007" +
    "\u0129\001\002\000\102\004\uffb3\005\uffb3\010\uffb3\011\uffb3" +
    "\021\uffb3\024\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\054\uffb3\056\uffb3\061\uffb3\064\uffb3\065\uffb3\102\uffb3\103" +
    "\uffb3\105\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3" +
    "\116\uffb3\117\uffb3\001\002\000\006\044\u012b\060\u012c\001" +
    "\002\000\034\004\070\005\066\010\065\011\107\021\073" +
    "\024\074\034\101\035\103\052\067\102\104\103\102\105" +
    "\077\117\076\001\002\000\034\004\070\005\066\010\065" +
    "\011\107\021\073\024\074\034\101\035\103\052\067\102" +
    "\104\103\102\105\077\117\076\001\002\000\044\037\122" +
    "\043\u012e\053\120\070\114\071\126\072\133\073\131\074" +
    "\115\075\117\076\125\077\124\100\127\101\116\104\132" +
    "\105\121\106\130\107\123\001\002\000\040\011\334\036" +
    "\320\040\277\041\305\047\303\051\331\056\316\064\311" +
    "\065\310\111\330\112\326\113\325\114\317\115\322\116" +
    "\323\001\002\000\074\004\uff8c\005\uff8c\010\uff8c\011\uff8c" +
    "\021\uff8c\024\uff8c\034\uff8c\035\uff8c\036\uff8c\041\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c\056\uff8c\061\uff8c" +
    "\064\uff8c\065\uff8c\102\uff8c\103\uff8c\105\uff8c\111\uff8c\112" +
    "\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c\117\uff8c\001\002" +
    "\000\074\004\uff8a\005\uff8a\010\uff8a\011\uff8a\021\uff8a\024" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\051\uff8a\052\uff8a\056\uff8a\061\uff8a\064\uff8a\065" +
    "\uff8a\102\uff8a\103\uff8a\105\uff8a\111\uff8a\112\uff8a\113\uff8a" +
    "\114\uff8a\115\uff8a\116\uff8a\117\uff8a\001\002\000\044\037" +
    "\122\043\u0132\053\120\070\114\071\126\072\133\073\131" +
    "\074\115\075\117\076\125\077\124\100\127\101\116\104" +
    "\132\105\121\106\130\107\123\001\002\000\040\011\334" +
    "\036\320\040\277\041\305\047\303\051\331\056\316\064" +
    "\311\065\310\111\330\112\326\113\325\114\317\115\322" +
    "\116\323\001\002\000\074\004\uff8b\005\uff8b\010\uff8b\011" +
    "\uff8b\021\uff8b\024\uff8b\034\uff8b\035\uff8b\036\uff8b\041\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\051\uff8b\052\uff8b\056\uff8b\061" +
    "\uff8b\064\uff8b\065\uff8b\102\uff8b\103\uff8b\105\uff8b\111\uff8b" +
    "\112\uff8b\113\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b\001" +
    "\002\000\074\004\uff89\005\uff89\010\uff89\011\uff89\021\uff89" +
    "\024\uff89\034\uff89\035\uff89\036\uff89\041\uff89\045\uff89\046" +
    "\uff89\047\uff89\051\uff89\052\uff89\056\uff89\061\uff89\064\uff89" +
    "\065\uff89\102\uff89\103\uff89\105\uff89\111\uff89\112\uff89\113" +
    "\uff89\114\uff89\115\uff89\116\uff89\117\uff89\001\002\000\074" +
    "\004\uffa4\005\uffa4\010\uffa4\011\uffa4\021\uffa4\024\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\041\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\051\uffa4\052\uffa4\056\uffa4\061\uffa4\064\uffa4\065\uffa4\102" +
    "\uffa4\103\uffa4\105\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4" +
    "\115\uffa4\116\uffa4\117\uffa4\001\002\000\010\040\uffc3\050" +
    "\uffc3\054\uffc3\001\002\000\006\023\040\067\u0147\001\002" +
    "\000\004\011\035\001\002\000\006\007\u013b\025\u013c\001" +
    "\002\000\006\007\uffbe\067\uffbe\001\002\000\006\011\035" +
    "\062\u013e\001\002\000\006\007\uffbf\067\uffbf\001\002\000" +
    "\006\023\040\067\u0142\001\002\000\004\011\035\001\002" +
    "\000\006\023\040\067\u0140\001\002\000\026\011\060\012" +
    "\045\013\055\014\051\015\043\016\042\017\047\020\046" +
    "\024\053\027\052\001\002\000\006\007\uffbc\025\uffbc\001" +
    "\002\000\026\011\060\012\045\013\055\014\051\015\043" +
    "\016\042\017\047\020\046\024\053\027\052\001\002\000" +
    "\006\007\uffbd\025\uffbd\001\002\000\006\023\040\067\u0145" +
    "\001\002\000\026\011\060\012\045\013\055\014\051\015" +
    "\043\016\042\017\047\020\046\024\053\027\052\001\002" +
    "\000\006\007\uffba\025\uffba\001\002\000\026\011\060\012" +
    "\045\013\055\014\051\015\043\016\042\017\047\020\046" +
    "\024\053\027\052\001\002\000\006\007\uffbb\025\uffbb\001" +
    "\002\000\006\007\u014a\023\040\001\002\000\016\022\027" +
    "\040\013\042\025\050\023\054\012\062\031\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\uffd0\001\002\000\040" +
    "\011\334\036\320\041\305\046\u0150\047\303\051\331\056" +
    "\316\064\311\065\310\111\330\112\326\113\325\114\317" +
    "\115\322\116\323\001\002\000\004\063\u014f\001\002\000" +
    "\004\002\uffb4\001\002\000\004\063\u0151\001\002\000\004" +
    "\002\uffb5\001\002\000\004\024\270\001\002\000\004\007" +
    "\u0154\001\002\000\006\040\277\062\031\001\002\000\010" +
    "\040\uffc0\050\uffc0\054\uffc0\001\002\000\004\040\277\001" +
    "\002\000\010\040\uffc1\050\uffc1\054\uffc1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\023\005\013\006\031\011" +
    "\015\012\016\014\017\015\025\042\027\043\014\045\021" +
    "\001\001\000\002\001\001\000\036\010\u014c\030\312\037" +
    "\277\040\320\041\314\044\313\046\323\047\311\050\306" +
    "\051\300\052\331\053\326\054\332\062\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\023\011\u014b\042\027\043\014\045\021\001\001\000" +
    "\002\001\001\000\004\023\u0148\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\264\043\265\045\263\001" +
    "\001\000\010\016\253\023\252\036\251\001\001\000\002" +
    "\001\001\000\012\007\241\023\240\033\243\035\242\001" +
    "\001\000\002\001\001\000\010\013\035\023\033\034\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\033\034\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\056\066" +
    "\055\067\053\070\043\071\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\230\073\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\031" +
    "\176\032\074\055\062\056\070\057\077\060\071\061\112" +
    "\062\063\065\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\032\074\055\062\056\070\057" +
    "\077\060\071\061\105\062\063\065\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\032\074\055\062\056\070\057\077\060\071" +
    "\061\175\062\063\065\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\074\055\062\056\070\057\077\060\071\061\173\062" +
    "\063\065\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\032\074\055\062\056\070\057\077\060\071\061" +
    "\165\062\063\065\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\031\111\032\074\055\062\056\070\057\077\060" +
    "\071\061\112\062\063\065\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\032\074\055" +
    "\062\056\070\057\077\060\071\061\152\062\063\065\104" +
    "\001\001\000\022\032\074\055\062\056\070\057\077\060" +
    "\071\061\151\062\063\065\104\001\001\000\022\032\074" +
    "\055\062\056\070\057\077\060\071\061\150\062\063\065" +
    "\104\001\001\000\022\032\074\055\062\056\070\057\077" +
    "\060\071\061\147\062\063\065\104\001\001\000\022\032" +
    "\074\055\062\056\070\057\077\060\071\061\146\062\063" +
    "\065\104\001\001\000\022\032\074\055\062\056\070\057" +
    "\077\060\071\061\145\062\063\065\104\001\001\000\022" +
    "\032\074\055\062\056\070\057\077\060\071\061\144\062" +
    "\063\065\104\001\001\000\022\032\074\055\062\056\070" +
    "\057\077\060\071\061\143\062\063\065\104\001\001\000" +
    "\022\032\074\055\062\056\070\057\077\060\071\061\142" +
    "\062\063\065\104\001\001\000\022\032\074\055\062\056" +
    "\070\057\077\060\071\061\141\062\063\065\104\001\001" +
    "\000\022\032\074\055\062\056\070\057\077\060\071\061" +
    "\140\062\063\065\104\001\001\000\022\032\074\055\062" +
    "\056\070\057\077\060\071\061\137\062\063\065\104\001" +
    "\001\000\022\032\074\055\062\056\070\057\077\060\071" +
    "\061\136\062\063\065\104\001\001\000\022\032\074\055" +
    "\062\056\070\057\077\060\071\061\135\062\063\065\104" +
    "\001\001\000\022\032\074\055\062\056\070\057\077\060" +
    "\071\061\134\062\063\065\104\001\001\000\022\032\074" +
    "\055\062\056\070\057\077\060\071\061\133\062\063\065" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\032\074\055\062\056\070\057\077\060" +
    "\071\061\155\062\063\065\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\032\074\055" +
    "\062\056\070\057\077\060\071\061\160\062\063\065\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\032" +
    "\074\055\062\056\070\057\077\060\071\061\163\062\063" +
    "\065\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\031\170\032\074" +
    "\055\062\056\070\057\077\060\071\061\112\062\063\065" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\025\201" +
    "\032\074\055\062\056\070\057\077\060\071\061\203\062" +
    "\063\065\104\072\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\032\074\055\062\056" +
    "\070\057\077\060\071\061\205\062\063\065\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\024\211\032" +
    "\074\055\062\056\070\057\077\060\071\061\203\062\063" +
    "\065\104\072\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\032\074\055\062\056\070\057\077\060\071" +
    "\061\203\062\063\065\104\072\213\001\001\000\002\001" +
    "\001\000\006\066\220\070\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\032\074\055\062\056\070\057\077" +
    "\060\071\061\203\062\063\065\104\072\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\027\056\066\055\067\235\070\043\071\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\023\011\015\012\016\014" +
    "\017\015\246\023\240\033\245\035\242\042\027\043\014" +
    "\045\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\027\056\066\055\067\250\070\043\071\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\023\011\015\012\016\014\254\023\252\036\255\042" +
    "\027\043\014\045\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\056\066\055\067\257\070\043\071" +
    "\047\001\001\000\002\001\001\000\022\032\074\055\062" +
    "\056\070\057\077\060\071\061\261\062\063\065\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\270\001" +
    "\001\000\006\023\u0136\076\u0138\001\001\000\002\001\001" +
    "\000\014\027\056\066\055\067\272\070\043\071\047\001" +
    "\001\000\002\001\001\000\006\012\275\017\274\001\001" +
    "\000\002\001\001\000\004\017\u0135\001\001\000\036\010" +
    "\303\030\312\037\277\040\320\041\314\044\313\046\323" +
    "\047\311\050\306\051\300\052\331\053\326\054\332\062" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\312\040\u0129\001\001\000\034\030" +
    "\312\037\346\040\320\041\314\044\313\046\323\047\311" +
    "\050\306\051\300\052\331\053\326\054\332\062\301\001" +
    "\001\000\022\032\074\055\062\056\070\057\077\060\071" +
    "\061\u0116\062\063\065\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\032\074\055\062" +
    "\056\070\057\077\060\071\061\u010c\062\063\065\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\010\u0106\030\312\037\277\040" +
    "\320\041\314\044\313\046\323\047\311\050\306\051\300" +
    "\052\331\053\326\054\332\062\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\074\055\062\056\070\057\077\060\071\061\334\062" +
    "\063\065\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\020\341\021" +
    "\337\030\312\037\336\040\320\041\314\044\313\046\323" +
    "\047\311\050\306\051\300\052\331\053\326\054\332\062" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\344\030\312\037\277\040\320\041\314\044\313\046" +
    "\323\047\311\050\306\051\300\052\331\053\326\054\332" +
    "\062\301\001\001\000\002\001\001\000\040\020\343\021" +
    "\337\030\312\037\336\040\320\041\314\044\313\046\323" +
    "\047\311\050\306\051\300\052\331\053\326\054\332\062" +
    "\301\001\001\000\002\001\001\000\034\030\312\037\346" +
    "\040\320\041\314\044\313\046\323\047\311\050\306\051" +
    "\300\052\331\053\326\054\332\062\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\031\363\032\074\055" +
    "\062\056\070\057\077\060\071\061\112\062\063\065\104" +
    "\001\001\000\024\031\361\032\074\055\062\056\070\057" +
    "\077\060\071\061\112\062\063\065\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\031\371\032" +
    "\074\055\062\056\070\057\077\060\071\061\112\062\063" +
    "\065\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\031\375\032\074\055\062\056\070" +
    "\057\077\060\071\061\112\062\063\065\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\030\312\037\346\040\320\041\314\044\313\046\323\047" +
    "\311\050\306\051\300\052\331\053\326\054\332\062\301" +
    "\001\001\000\022\032\074\055\062\056\070\057\077\060" +
    "\071\061\u0108\062\063\065\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\032\074\055\062\056\070\057" +
    "\077\060\071\061\u010b\062\063\065\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\017\u010e\030\312\037" +
    "\u010f\040\320\041\314\044\313\046\323\047\311\050\306" +
    "\051\300\052\331\053\326\054\332\062\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\u0112\030\312\037\277\040\320\041\314\044\313\046" +
    "\323\047\311\050\306\051\300\052\331\053\326\054\332" +
    "\062\301\001\001\000\034\030\312\037\346\040\320\041" +
    "\314\044\313\046\323\047\311\050\306\051\300\052\331" +
    "\053\326\054\332\062\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\031\u0119\032\074\055\062\056\070\057\077\060\071\061" +
    "\112\062\063\065\104\074\u011a\077\u0118\001\001\000\030" +
    "\022\u0120\031\u0119\032\074\055\062\056\070\057\077\060" +
    "\071\061\112\062\063\065\104\074\u0121\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\017\u011c\030\312\037" +
    "\u011d\040\320\041\314\044\313\046\323\047\311\050\306" +
    "\051\300\052\331\053\326\054\332\062\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\017\u0124\030\312\037\u0125\040\320\041\314\044\313\046" +
    "\323\047\311\050\306\051\300\052\331\053\326\054\332" +
    "\062\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\032\074\055\062\056\070" +
    "\057\077\060\071\061\u0130\062\063\065\104\001\001\000" +
    "\022\032\074\055\062\056\070\057\077\060\071\061\u012c" +
    "\062\063\065\104\001\001\000\002\001\001\000\036\017" +
    "\u012e\030\312\037\u012f\040\320\041\314\044\313\046\323" +
    "\047\311\050\306\051\300\052\331\053\326\054\332\062" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\017\u0132\030\312\037\u0133\040\320\041" +
    "\314\044\313\046\323\047\311\050\306\051\300\052\331" +
    "\053\326\054\332\062\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u013c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u013e\001\001\000\002\001" +
    "\001\000\014\027\056\066\055\067\u0140\070\043\071\047" +
    "\001\001\000\002\001\001\000\014\027\056\066\055\067" +
    "\u0142\070\043\071\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\056\066\055\067\u0145\070\043\071" +
    "\047\001\001\000\002\001\001\000\014\027\056\066\055" +
    "\067\u0147\070\043\071\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\023\006\u014a\011\015\012\016" +
    "\014\017\015\025\042\027\043\014\045\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\030\312\037\346" +
    "\040\320\041\314\044\313\046\323\047\311\050\306\051" +
    "\300\052\331\053\326\054\332\062\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u0152\001\001\000\002\001\001\000\006" +
    "\012\u0155\017\u0154\001\001\000\002\001\001\000\004\017" +
    "\u0156\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Tree tree;
    public Tree getArbol() {
            return tree;
    }
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PRIMITIVO ::= nil 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Nil()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PRIMITIVO ::= decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PRIMITIVO ::= numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PRIMITIVO ::= falso 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(false); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRIMITIVO ::= verdadero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PRIMITIVO ::= caracter 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PRIMITIVO ::= cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LOGICA ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.NOT, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LOGICA ::= EXPRESION nor EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NOR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LOGICA ::= EXPRESION nand EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NAND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LOGICA ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.AND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LOGICA ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.OR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIFERENTE_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // RELACIONAL ::= EXPRESION igualacion EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.IGUAL_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // RELACIONAL ::= EXPRESION menorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // RELACIONAL ::= EXPRESION mayorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARITMETICA ::= EXPRESION modulo EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIVISION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MULTIPLICACION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.RESTA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.SUMA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITMETICA ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.MENOS_UNARIO, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LLAMADA ::= identificador parenI parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Llamada(e, new ArrayList<Expresion>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LLAMADA ::= identificador parenI LISTA_EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Llamada(e, e1, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ACCESO ::= ACCESO punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ACCESO ::= ACCESO corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; RESULT.add(new AccesoArreglo(e1));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ACCESO ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, true, eleft,eright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= LLAMADA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= MEMORIA_VIRTUAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= ACCESO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Acceso(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= PRIMITIVO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= LOGICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= ARITMETICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // READ ::= leer parenI VARIABLE parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Read(new AccesoVariable(e, eleft, eright), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("READ",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WRITE ::= escribirln parenI LISTA_EXPRESION parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 RESULT = new Writeln(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WRITE ::= escribir parenI LISTA_EXPRESION parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 RESULT = new Write(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FOR ::= para ASIGNACION downto EXPRESION hacer INSTRUCCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insFor = new ArrayList<>(); insFor.add(e2); RESULT = new For(e, e1, insFor, false, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FOR ::= para ASIGNACION to EXPRESION hacer INSTRUCCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insFor = new ArrayList<>(); insFor.add(e2); RESULT = new For(e, e1, insFor, true, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FOR ::= para ASIGNACION downto EXPRESION hacer BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new For(e, e1, e2, false, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR ::= para ASIGNACION to EXPRESION hacer BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new For(e, e1, e2, true, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // REPEAT ::= repeat LISTA_INSTRUCCIONES until EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Repeat(e1, e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REPEAT",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WHILE ::= mientras EXPRESION hacer INSTRUCCION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insWhile = new ArrayList<>(); insWhile.add(e1); RESULT = new While(e, insWhile, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WHILE ::= mientras EXPRESION hacer BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new While(e, e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DEFECTO ::= sino BLOQUE_INSTRUCCIONES 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DEFECTO ::= sino INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASE ::= LISTA_EXPRESION dosPuntos BLOQUE_INSTRUCCIONES 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Case(e, e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASE ::= LISTA_EXPRESION dosPuntos INSTRUCCION 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 ArrayList<AST> insSwitch = new ArrayList<>(); insSwitch.add(e1); RESULT = new Case(e, insSwitch);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASELIST ::= CASE 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Case e = (Case)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Case>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASELIST ::= CASELIST CASE 
            {
              ArrayList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Case> e = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Case e1 = (Case)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWITCH ::= caso EXPRESION of CASELIST DEFECTO end pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Case> e1 = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new SwitchCase(e, e1, e2, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCH ::= caso EXPRESION of CASELIST end pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Case> e1 = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new SwitchCase(e, e1, new ArrayList<AST>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCCIONESIF ::= begin end 
            {
              ArrayList<AST> RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCIONESIF ::= begin LISTA_INSTRUCCIONES end 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSIF ::= INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSIF ::= INSTRUCCIONESIF pComa 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSIF ::= INSTRUCCIONESIF 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SI ::= si EXPRESION then INSIF 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new If(e, e1, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SI ::= si EXPRESION then INSIF sino INSIF 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new If(e, e1, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TRANSFERENCIA ::= salir pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Salir(eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TRANSFERENCIA ::= continuar pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Continue(eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TRANSFERENCIA ::= detener pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Break(eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGNACION ::= VARIABLE igual EXPRESION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Asignacion(new AccesoVariable(e, eleft, eright), e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WITH ::= con identificador hacer LISTA_INSTRUCCIONES end pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
                                                ArrayList<Expresion> listaExp = new ArrayList<>();
                                                listaExp.add(new Identificador(e, eleft, eright));
                                                RESULT = new With(new AccesoVariable(listaExp, eleft, eright), e1, eleft, eright);
                                                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCCION ::= LLAMADA pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCION ::= free parenI VARIABLE parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Free(new AccesoVariable(e, eleft, eright), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCION ::= SWITCH 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCION ::= READ 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCION ::= WRITE 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCION ::= FOR 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCCION ::= REPEAT 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCION ::= WHILE 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCCION ::= SI 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCION ::= TRANSFERENCIA 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCCION ::= ASIGNACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCCION ::= WITH 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE_INSTRUCCIONES ::= begin end pComa 
            {
              ArrayList<AST> RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE_INSTRUCCIONES ::= begin LISTA_INSTRUCCIONES end pComa 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MAIN ::= begin end punto 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Main(new ArrayList<AST>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MAIN ::= begin LISTA_INSTRUCCIONES end punto 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Main(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RECORDS ::= identificador dosPuntos TIPO pComa 
            {
              Registro RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Registro(e1, e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_RECORDS ::= RECORDS 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Registro e = (Registro)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Registro>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_RECORDS ::= LISTA_RECORDS RECORDS 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Registro e1 = (Registro)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // REGISTRO ::= record LISTA_RECORDS end 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGISTRO",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_PARAMETROS ::= var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(e1, e, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_PARAMETROS ::= LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(e1, e, false, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Parametro(e2, e1, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Parametro(e2, e1, false, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROS ::= parenI parenD 
            {
              ArrayList<Parametro> RESULT =null;
		RESULT = new ArrayList<Parametro>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROS ::= parenI LISTA_PARAMETROS parenD 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PROCEDURE ::= procedure identificador PARAMETROS pComa BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Procedimiento(e, e1, new Tipo(Tipo.tipo.VOID), e2, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PROCEDURE ::= procedure identificador PARAMETROS pComa VARINIT BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e2 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Procedimiento(e, e1, new Tipo(Tipo.tipo.VOID), e3, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa VARINIT BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, e3, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METHOD_LIST ::= PROCEDURE 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METHOD_LIST ::= FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METHOD_LIST ::= METHOD_LIST PROCEDURE 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(e1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METHOD_LIST ::= METHOD_LIST FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(e1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SECCION_FUNCION ::= MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SECCION_FUNCION ::= METHOD_LIST MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO igualacion EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, e2, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VAR ::= VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VAR ::= DECLARACION_VAR VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARINIT ::= var DECLARACION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARINIT",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SECCION_VAR ::= SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SECCION_VAR ::= VARINIT SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONST ::= LISTA_IDENTIFICADORES dosPuntos TIPO igualacion EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionConstante(e1, e, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONST",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_CONST ::= CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_CONST ::= DECLARACION_CONST CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SECCION_CONST ::= SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SECCION_CONST ::= constante DECLARACION_CONST SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= REGISTRO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= ARRAY_DECLARATION_MULTI 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= ARRAY_DECLARATION 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; 
        Collections.reverse(RESULT.getDimensiones());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= parenI LISTA_EXPRESION parenD 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Tipo(Tipo.tipo.ENUMERADO, null, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.OBJETO, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_PRIMITIVO ::= record 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.RECORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_PRIMITIVO ::= string 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.STRING);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_PRIMITIVO ::= word 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.WORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_PRIMITIVO ::= bool 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.BOOLEAN);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_PRIMITIVO ::= character 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.CHAR);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_PRIMITIVO ::= real 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.REAL);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_PRIMITIVO ::= integer 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.INTEGER);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MEMORIA_VIRTUAL ::= malloc parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Malloc(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MEMORIA_VIRTUAL ::= sizeof parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Sizeof(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_EXPRESION ::= EXPRESION 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLE ::= VARIABLE punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLE ::= VARIABLE parenI LISTA_EXPRESION parenD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLE ::= VARIABLE corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; RESULT.add(new AccesoArreglo(e1));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLE ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_IDENTIFICADORES ::= identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<String>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES coma identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_RANGO_ARRAY ::= RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Dimension>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_RANGO_ARRAY ::= LISTA_RANGO_ARRAY coma RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Dimension e1 = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARRAY_MULTI ::= RANGO_ARRAY coma LISTA_RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Dimension> e1 = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e1; RESULT.add(0, e);  
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_MULTI",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARRAY_DECLARATION_MULTI ::= array corI ARRAY_MULTI corD of TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.ARREGLO, e1.getType(), null, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION_MULTI",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RANGO_ARRAY ::= EXPRESION dosP EXPRESION 
            {
              Dimension RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Dimension(e, e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RANGO_ARRAY",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                                ArrayList<Dimension> dims = new ArrayList<>(); dims.add(e);  
                                RESULT = new Tipo(Tipo.tipo.ARREGLO, Tipo.tipo.OBJETO, e1, dims);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                                ArrayList<Dimension> dims = new ArrayList<>(); dims.add(e);  
                                RESULT = new Tipo(Tipo.tipo.ARREGLO, e1.getType(), null, dims);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of ARRAY_DECLARATION 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = e1;
                                RESULT.getDimensiones().add(e);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UPPER_LIMIT ::= EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LOWER_LIMIT ::= EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igualacion TIPO 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new DeclaracionType(e1, e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_TIPOS ::= TIPO_DECLARACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DECLARACION_TIPOS ::= DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DECLARACION_TIPOS ::= LISTA_DECLARACION_TIPOS DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_TIPO ::= SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_TIPO ::= type LISTA_DECLARACION_TIPOS SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // USES ::= uses LISTA_IDENTIFICADORES pComa SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e1; RESULT.add(0, new Uses(e, eleft, eright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= program identificador pComa USES 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(new Program(e)); RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAM",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("Termino Correctamente"); parser.tree = new Tree(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

