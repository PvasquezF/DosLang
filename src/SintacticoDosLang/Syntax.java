
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 19 15:44:40 CST 2019
//----------------------------------------------------

package SintacticoDosLang;

import java.util.ArrayList;
import java_cup.runtime.*;
import doslang.DosLang;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;
import Expresiones.Identificador;
import Expresiones.Nil;
import Expresiones.Operacion;
import Expresiones.Operacion.Operador;
import Expresiones.Primitivo;
import Instrucciones.DeclaracionType;
import Instrucciones.DeclaracionVar;
import Instrucciones.DeclaracionConstante;
import Instrucciones.Program;
import Interfaces.AST;
import TablaSimbolos.Tipo;
import TablaSimbolos.Tree;
import Interfaces.Expresion;
import Instrucciones.Asignacion;
import Instrucciones.Variable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 19 15:44:40 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\003\000\002\051" +
    "\006\000\002\052\006\000\002\052\003\000\002\054\005" +
    "\000\002\054\003\000\002\055\004\000\002\055\003\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\067\004\000\002\071\005\000\002\071\005\000\002\003" +
    "\007\000\002\004\007\000\002\005\003\000\002\006\003" +
    "\000\002\007\005\000\002\007\005\000\002\011\010\000" +
    "\002\011\010\000\002\010\005\000\002\046\010\000\002" +
    "\023\005\000\002\047\005\000\002\047\003\000\002\065" +
    "\005\000\002\065\003\000\002\066\003\000\002\066\006" +
    "\000\002\066\006\000\002\066\005\000\002\013\005\000" +
    "\002\013\003\000\002\012\006\000\002\012\006\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\104\003\000\002\104\003\000\002\063\005\000" +
    "\002\063\003\000\002\064\004\000\002\064\003\000\002" +
    "\072\010\000\002\062\004\000\002\062\003\000\002\060" +
    "\004\000\002\061\004\000\002\061\003\000\002\070\010" +
    "\000\002\070\006\000\002\070\006\000\002\057\004\000" +
    "\002\057\003\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\024\003\000\002\020\011\000\002\022" +
    "\007\000\002\014\005\000\002\014\004\000\002\015\007" +
    "\000\002\015\010\000\002\015\005\000\002\015\006\000" +
    "\002\016\004\000\002\016\003\000\002\037\005\000\002" +
    "\040\004\000\002\040\003\000\002\041\006\000\002\041" +
    "\006\000\002\041\006\000\002\053\006\000\002\053\005" +
    "\000\002\017\006\000\002\017\005\000\002\056\004\000" +
    "\002\056\003\000\002\073\003\000\002\073\004\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\007\000\002\073\004\000\002\021\006\000" +
    "\002\021\006\000\002\074\006\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\025\006\000\002\025" +
    "\010\000\002\025\007\000\002\025\011\000\002\026\010" +
    "\000\002\026\007\000\002\050\003\000\002\050\004\000" +
    "\002\050\003\000\002\027\005\000\002\027\004\000\002" +
    "\045\010\000\002\045\011\000\002\043\004\000\002\043" +
    "\003\000\002\042\005\000\002\042\005\000\002\044\004" +
    "\000\002\044\004\000\002\032\007\000\002\032\006\000" +
    "\002\033\007\000\002\034\011\000\002\034\011\000\002" +
    "\034\010\000\002\034\010\000\002\035\007\000\002\035" +
    "\007\000\002\036\007\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\005\000" +
    "\002\101\003\000\002\101\003\000\002\102\003\000\002" +
    "\102\006\000\002\102\006\000\002\102\005\000\002\103" +
    "\006\000\002\076\004\000\002\076\005\000\002\076\005" +
    "\000\002\076\005\000\002\076\005\000\002\076\005\000" +
    "\002\076\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\077\005\000\002\077\005\000\002\077" +
    "\005\000\002\100\005\000\002\100\005\000\002\100\005" +
    "\000\002\100\005\000\002\100\004\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\004\055\004\001\002\000\004\011\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\011\001\002\000" +
    "\020\022\027\040\013\042\025\050\023\054\012\062\031" +
    "\066\020\001\002\000\004\011\u015b\001\002\000\036\011" +
    "\353\036\341\041\327\046\u0157\047\324\056\337\064\332" +
    "\065\331\111\350\112\346\113\345\114\340\115\343\116" +
    "\344\001\002\000\004\002\uffff\001\002\000\004\002\uffc4" +
    "\001\002\000\004\002\uffcc\001\002\000\010\040\013\050" +
    "\023\054\012\001\002\000\004\011\035\001\002\000\004" +
    "\002\uffd1\001\002\000\010\040\uffc0\050\uffc0\054\uffc0\001" +
    "\002\000\004\011\307\001\002\000\010\040\013\050\023" +
    "\054\012\001\002\000\004\011\035\001\002\000\004\002" +
    "\ufffb\001\002\000\004\011\035\001\002\000\010\040\uffc1" +
    "\050\uffc1\054\uffc1\001\002\000\004\011\035\001\002\000" +
    "\004\002\ufffd\001\002\000\012\011\uffc9\040\uffc9\050\uffc9" +
    "\054\uffc9\001\002\000\006\023\040\067\041\001\002\000" +
    "\014\006\uffe4\007\uffe4\023\uffe4\025\uffe4\067\uffe4\001\002" +
    "\000\012\011\035\040\uffcb\050\uffcb\054\uffcb\001\002\000" +
    "\012\011\uffca\040\uffca\050\uffca\054\uffca\001\002\000\004" +
    "\011\235\001\002\000\022\011\054\012\045\013\052\014" +
    "\050\015\043\016\042\017\047\020\046\001\002\000\010" +
    "\006\uffd7\007\uffd7\025\uffd7\001\002\000\010\006\uffd8\007" +
    "\uffd8\025\uffd8\001\002\000\010\006\uffd3\007\uffd3\025\uffd3" +
    "\001\002\000\010\006\uffdb\007\uffdb\025\uffdb\001\002\000" +
    "\010\006\uffd5\007\uffd5\011\035\001\002\000\010\006\uffd6" +
    "\007\uffd6\025\uffd6\001\002\000\010\006\uffd9\007\uffd9\025" +
    "\uffd9\001\002\000\006\006\056\007\057\001\002\000\010" +
    "\006\uffda\007\uffda\025\uffda\001\002\000\004\007\055\001" +
    "\002\000\010\006\uffd4\007\uffd4\025\uffd4\001\002\000\012" +
    "\011\uffc6\040\uffc6\050\uffc6\054\uffc6\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\102\100\103\076\105\073\117\072\001" +
    "\002\000\012\011\uffc7\040\uffc7\050\uffc7\054\uffc7\001\002" +
    "\000\070\007\uff78\023\uff78\025\uff78\026\uff78\031\uff78\032" +
    "\uff78\033\uff78\037\uff78\043\uff78\044\uff78\053\uff78\060\uff78" +
    "\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075" +
    "\uff78\076\uff78\077\uff78\100\uff78\101\uff78\104\uff78\105\uff78" +
    "\106\uff78\107\uff78\001\002\000\070\007\uff5d\023\uff5d\025" +
    "\uff5d\026\uff5d\031\uff5d\032\uff5d\033\uff5d\037\uff5d\043\uff5d" +
    "\044\uff5d\053\uff5d\060\uff5d\067\uff5d\070\uff5d\071\uff5d\072" +
    "\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d" +
    "\101\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\001\002\000" +
    "\070\007\uff58\023\uff58\025\uff58\026\uff58\031\uff58\032\uff58" +
    "\033\uff58\037\uff58\043\uff58\044\uff58\053\uff58\060\uff58\067" +
    "\uff58\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58" +
    "\076\uff58\077\uff58\100\uff58\101\uff58\104\uff58\105\uff58\106" +
    "\uff58\107\uff58\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\070\007\uff59" +
    "\023\uff59\025\uff59\026\uff59\031\uff59\032\uff59\033\uff59\037" +
    "\uff59\043\uff59\044\uff59\053\uff59\060\uff59\067\uff59\070\uff59" +
    "\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077" +
    "\uff59\100\uff59\101\uff59\104\uff59\105\uff59\106\uff59\107\uff59" +
    "\001\002\000\070\007\uff7b\023\uff7b\025\uff7b\026\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\037\uff7b\043\uff7b\044\uff7b\053\uff7b" +
    "\060\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074" +
    "\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\104\uff7b" +
    "\105\uff7b\106\uff7b\107\uff7b\001\002\000\070\007\uff7a\023" +
    "\uff7a\025\uff7a\026\uff7a\031\uff7a\032\uff7a\033\uff7a\037\uff7a" +
    "\043\uff7a\044\uff7a\053\uff7a\060\uff7a\067\uff7a\070\uff7a\071" +
    "\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a" +
    "\100\uff7a\101\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\001" +
    "\002\000\070\007\uff57\023\uff57\025\uff57\026\uff57\031\uff57" +
    "\032\uff57\033\uff57\037\uff57\043\uff57\044\uff57\053\uff57\060" +
    "\uff57\067\uff57\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57" +
    "\075\uff57\076\uff57\077\uff57\100\uff57\101\uff57\104\uff57\105" +
    "\uff57\106\uff57\107\uff57\001\002\000\034\004\064\005\062" +
    "\010\061\011\103\021\067\024\070\034\075\035\077\052" +
    "\063\102\100\103\076\105\073\117\072\001\002\000\076" +
    "\007\uff76\023\uff76\024\155\025\uff76\026\uff76\030\156\031" +
    "\uff76\032\uff76\033\uff76\037\uff76\043\uff76\044\uff76\053\uff76" +
    "\060\uff76\063\154\067\uff76\070\uff76\071\uff76\072\uff76\073" +
    "\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76" +
    "\104\uff76\105\uff76\106\uff76\107\uff76\001\002\000\070\007" +
    "\uff5c\023\uff5c\025\uff5c\026\uff5c\031\uff5c\032\uff5c\033\uff5c" +
    "\037\uff5c\043\uff5c\044\uff5c\053\uff5c\060\uff5c\067\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c" +
    "\077\uff5c\100\uff5c\101\uff5c\104\uff5c\105\uff5c\106\uff5c\107" +
    "\uff5c\001\002\000\034\004\064\005\062\010\061\011\103" +
    "\021\067\024\070\034\075\035\077\052\063\102\100\103" +
    "\076\105\073\117\072\001\002\000\070\007\uff79\023\uff79" +
    "\025\uff79\026\uff79\031\uff79\032\uff79\033\uff79\037\uff79\043" +
    "\uff79\044\uff79\053\uff79\060\uff79\067\uff79\070\uff79\071\uff79" +
    "\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79\100" +
    "\uff79\101\uff79\104\uff79\105\uff79\106\uff79\107\uff79\001\002" +
    "\000\004\024\150\001\002\000\070\007\uff5b\023\uff5b\025" +
    "\uff5b\026\uff5b\031\uff5b\032\uff5b\033\uff5b\037\uff5b\043\uff5b" +
    "\044\uff5b\053\uff5b\060\uff5b\067\uff5b\070\uff5b\071\uff5b\072" +
    "\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b" +
    "\101\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\001\002\000" +
    "\004\024\145\001\002\000\070\007\uff5a\023\uff5a\025\uff5a" +
    "\026\uff5a\031\uff5a\032\uff5a\033\uff5a\037\uff5a\043\uff5a\044" +
    "\uff5a\053\uff5a\060\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a" +
    "\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101" +
    "\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\001\002\000\070" +
    "\007\uff75\023\uff75\025\uff75\026\uff75\031\uff75\032\uff75\033" +
    "\uff75\037\uff75\043\uff75\044\uff75\053\uff75\060\uff75\067\uff75" +
    "\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076" +
    "\uff75\077\uff75\100\uff75\101\uff75\104\uff75\105\uff75\106\uff75" +
    "\107\uff75\001\002\000\044\007\117\037\111\053\110\070" +
    "\104\071\116\072\124\073\122\074\105\075\107\076\115" +
    "\077\113\100\120\101\106\104\123\105\112\106\121\107" +
    "\114\001\002\000\076\007\uff74\023\uff74\024\uff74\025\uff74" +
    "\026\uff74\030\uff74\031\uff74\032\uff74\033\uff74\037\uff74\043" +
    "\uff74\044\uff74\053\uff74\060\uff74\063\uff74\067\uff74\070\uff74" +
    "\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077" +
    "\uff74\100\uff74\101\uff74\104\uff74\105\uff74\106\uff74\107\uff74" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\102\100\103\076" +
    "\105\073\117\072\001\002\000\034\004\064\005\062\010" +
    "\061\011\103\021\067\024\070\034\075\035\077\052\063" +
    "\102\100\103\076\105\073\117\072\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\102\100\103\076\105\073\117\072\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\102\100\103\076\105" +
    "\073\117\072\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\102\100\103\076\105\073\117\072\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\102\100\103\076\105\073" +
    "\117\072\001\002\000\034\004\064\005\062\010\061\011" +
    "\103\021\067\024\070\034\075\035\077\052\063\102\100" +
    "\103\076\105\073\117\072\001\002\000\034\004\064\005" +
    "\062\010\061\011\103\021\067\024\070\034\075\035\077" +
    "\052\063\102\100\103\076\105\073\117\072\001\002\000" +
    "\034\004\064\005\062\010\061\011\103\021\067\024\070" +
    "\034\075\035\077\052\063\102\100\103\076\105\073\117" +
    "\072\001\002\000\034\004\064\005\062\010\061\011\103" +
    "\021\067\024\070\034\075\035\077\052\063\102\100\103" +
    "\076\105\073\117\072\001\002\000\012\011\uffc8\040\uffc8" +
    "\050\uffc8\054\uffc8\001\002\000\034\004\064\005\062\010" +
    "\061\011\103\021\067\024\070\034\075\035\077\052\063" +
    "\102\100\103\076\105\073\117\072\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\102\100\103\076\105\073\117\072\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\102\100\103\076\105" +
    "\073\117\072\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\102\100\103\076\105\073\117\072\001\002" +
    "\000\070\007\uff65\023\uff65\025\uff65\026\uff65\031\uff65\032" +
    "\uff65\033\uff65\037\uff65\043\uff65\044\uff65\053\uff65\060\uff65" +
    "\067\uff65\070\104\071\116\072\uff65\073\uff65\074\uff65\075" +
    "\uff65\076\uff65\077\uff65\100\uff65\101\uff65\104\123\105\112" +
    "\106\121\107\114\001\002\000\070\007\uff6e\023\uff6e\025" +
    "\uff6e\026\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e\043\uff6e" +
    "\044\uff6e\053\uff6e\060\uff6e\067\uff6e\070\104\071\116\072" +
    "\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e" +
    "\101\uff6e\104\uff6e\105\uff6e\106\121\107\114\001\002\000" +
    "\070\007\uff66\023\uff66\025\uff66\026\uff66\031\uff66\032\uff66" +
    "\033\uff66\037\uff66\043\uff66\044\uff66\053\uff66\060\uff66\067" +
    "\uff66\070\104\071\116\072\uff66\073\uff66\074\uff66\075\uff66" +
    "\076\uff66\077\uff66\100\uff66\101\uff66\104\123\105\112\106" +
    "\121\107\114\001\002\000\070\007\uff6c\023\uff6c\025\uff6c" +
    "\026\uff6c\031\uff6c\032\uff6c\033\uff6c\037\uff6c\043\uff6c\044" +
    "\uff6c\053\uff6c\060\uff6c\067\uff6c\070\104\071\uff6c\072\uff6c" +
    "\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101" +
    "\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\001\002\000\070" +
    "\007\uff60\023\uff60\025\uff60\026\uff60\031\uff60\032\uff60\033" +
    "\uff60\037\111\043\uff60\044\uff60\053\uff60\060\uff60\067\uff60" +
    "\070\104\071\116\072\124\073\122\074\105\075\107\076" +
    "\115\077\113\100\uff60\101\uff60\104\123\105\112\106\121" +
    "\107\114\001\002\000\070\007\uff69\023\uff69\025\uff69\026" +
    "\uff69\031\uff69\032\uff69\033\uff69\037\uff69\043\uff69\044\uff69" +
    "\053\uff69\060\uff69\067\uff69\070\104\071\uff69\072\uff69\073" +
    "\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69" +
    "\104\uff69\105\uff69\106\uff69\107\uff69\001\002\000\070\007" +
    "\uff64\023\uff64\025\uff64\026\uff64\031\uff64\032\uff64\033\uff64" +
    "\037\uff64\043\uff64\044\uff64\053\uff64\060\uff64\067\uff64\070" +
    "\104\071\116\072\124\073\122\074\105\075\107\076\uff64" +
    "\077\uff64\100\uff64\101\uff64\104\123\105\112\106\121\107" +
    "\114\001\002\000\070\007\uff6b\023\uff6b\025\uff6b\026\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\037\uff6b\043\uff6b\044\uff6b\053" +
    "\uff6b\060\uff6b\067\uff6b\070\104\071\uff6b\072\uff6b\073\uff6b" +
    "\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\104" +
    "\uff6b\105\uff6b\106\uff6b\107\uff6b\001\002\000\070\007\uff63" +
    "\023\uff63\025\uff63\026\uff63\031\uff63\032\uff63\033\uff63\037" +
    "\uff63\043\uff63\044\uff63\053\uff63\060\uff63\067\uff63\070\104" +
    "\071\116\072\124\073\122\074\105\075\107\076\uff63\077" +
    "\uff63\100\uff63\101\uff63\104\123\105\112\106\121\107\114" +
    "\001\002\000\070\007\uff6d\023\uff6d\025\uff6d\026\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\037\uff6d\043\uff6d\044\uff6d\053\uff6d" +
    "\060\uff6d\067\uff6d\070\104\071\116\072\uff6d\073\uff6d\074" +
    "\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\104\uff6d" +
    "\105\uff6d\106\121\107\114\001\002\000\070\007\uff61\023" +
    "\uff61\025\uff61\026\uff61\031\uff61\032\uff61\033\uff61\037\uff61" +
    "\043\uff61\044\uff61\053\uff61\060\uff61\067\uff61\070\104\071" +
    "\116\072\124\073\122\074\105\075\107\076\115\077\113" +
    "\100\uff61\101\uff61\104\123\105\112\106\121\107\114\001" +
    "\002\000\070\007\uff62\023\uff62\025\uff62\026\uff62\031\uff62" +
    "\032\uff62\033\uff62\037\111\043\uff62\044\uff62\053\uff62\060" +
    "\uff62\067\uff62\070\104\071\116\072\124\073\122\074\105" +
    "\075\107\076\115\077\113\100\120\101\106\104\123\105" +
    "\112\106\121\107\114\001\002\000\070\007\uff67\023\uff67" +
    "\025\uff67\026\uff67\031\uff67\032\uff67\033\uff67\037\uff67\043" +
    "\uff67\044\uff67\053\uff67\060\uff67\067\uff67\070\104\071\116" +
    "\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67\100" +
    "\uff67\101\uff67\104\123\105\112\106\121\107\114\001\002" +
    "\000\070\007\uff5f\023\uff5f\025\uff5f\026\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\037\111\043\uff5f\044\uff5f\053\uff5f\060\uff5f" +
    "\067\uff5f\070\104\071\116\072\124\073\122\074\105\075" +
    "\107\076\115\077\113\100\uff5f\101\uff5f\104\123\105\112" +
    "\106\121\107\114\001\002\000\070\007\uff68\023\uff68\025" +
    "\uff68\026\uff68\031\uff68\032\uff68\033\uff68\037\uff68\043\uff68" +
    "\044\uff68\053\uff68\060\uff68\067\uff68\070\104\071\116\072" +
    "\uff68\073\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68" +
    "\101\uff68\104\123\105\112\106\121\107\114\001\002\000" +
    "\070\007\uff6a\023\uff6a\025\uff6a\026\uff6a\031\uff6a\032\uff6a" +
    "\033\uff6a\037\uff6a\043\uff6a\044\uff6a\053\uff6a\060\uff6a\067" +
    "\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a" +
    "\076\uff6a\077\uff6a\100\uff6a\101\uff6a\104\uff6a\105\uff6a\106" +
    "\uff6a\107\uff6a\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\044\025\147" +
    "\037\111\053\110\070\104\071\116\072\124\073\122\074" +
    "\105\075\107\076\115\077\113\100\120\101\106\104\123" +
    "\105\112\106\121\107\114\001\002\000\070\007\uffdc\023" +
    "\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\037\uffdc" +
    "\043\uffdc\044\uffdc\053\uffdc\060\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc" +
    "\100\uffdc\101\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\102\100\103\076\105" +
    "\073\117\072\001\002\000\044\025\152\037\111\053\110" +
    "\070\104\071\116\072\124\073\122\074\105\075\107\076" +
    "\115\077\113\100\120\101\106\104\123\105\112\106\121" +
    "\107\114\001\002\000\070\007\uffdd\023\uffdd\025\uffdd\026" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\037\uffdd\043\uffdd\044\uffdd" +
    "\053\uffdd\060\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\104\uffdd\105\uffdd\106\uffdd\107\uffdd\001\002\000\070\007" +
    "\uff6f\023\uff6f\025\uff6f\026\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\037\uff6f\043\uff6f\044\uff6f\053\uff6f\060\uff6f\067\uff6f\070" +
    "\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f" +
    "\077\uff6f\100\uff6f\101\uff6f\104\uff6f\105\uff6f\106\uff6f\107" +
    "\uff6f\001\002\000\004\011\166\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\102\100\103\076\105\073\117\072\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\102\100\103\076\105\073" +
    "\117\072\001\002\000\006\023\162\031\161\001\002\000" +
    "\050\023\uffde\025\uffde\031\uffde\037\111\053\110\070\104" +
    "\071\116\072\124\073\122\074\105\075\107\076\115\077" +
    "\113\100\120\101\106\104\123\105\112\106\121\107\114" +
    "\001\002\000\076\007\uff73\023\uff73\024\uff73\025\uff73\026" +
    "\uff73\030\uff73\031\uff73\032\uff73\033\uff73\037\uff73\043\uff73" +
    "\044\uff73\053\uff73\060\uff73\063\uff73\067\uff73\070\uff73\071" +
    "\uff73\072\uff73\073\uff73\074\uff73\075\uff73\076\uff73\077\uff73" +
    "\100\uff73\101\uff73\104\uff73\105\uff73\106\uff73\107\uff73\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\102\100\103\076\105" +
    "\073\117\072\001\002\000\050\023\uffdf\025\uffdf\031\uffdf" +
    "\037\111\053\110\070\104\071\116\072\124\073\122\074" +
    "\105\075\107\076\115\077\113\100\120\101\106\104\123" +
    "\105\112\106\121\107\114\001\002\000\006\023\162\025" +
    "\165\001\002\000\076\007\uff72\023\uff72\024\uff72\025\uff72" +
    "\026\uff72\030\uff72\031\uff72\032\uff72\033\uff72\037\uff72\043" +
    "\uff72\044\uff72\053\uff72\060\uff72\063\uff72\067\uff72\070\uff72" +
    "\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077" +
    "\uff72\100\uff72\101\uff72\104\uff72\105\uff72\106\uff72\107\uff72" +
    "\001\002\000\076\007\uff71\023\uff71\024\uff71\025\uff71\026" +
    "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\037\uff71\043\uff71" +
    "\044\uff71\053\uff71\060\uff71\063\uff71\067\uff71\070\uff71\071" +
    "\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71" +
    "\100\uff71\101\uff71\104\uff71\105\uff71\106\uff71\107\uff71\001" +
    "\002\000\044\025\170\037\111\053\110\070\104\071\116" +
    "\072\124\073\122\074\105\075\107\076\115\077\113\100" +
    "\120\101\106\104\123\105\112\106\121\107\114\001\002" +
    "\000\070\007\uff77\023\uff77\025\uff77\026\uff77\031\uff77\032" +
    "\uff77\033\uff77\037\uff77\043\uff77\044\uff77\053\uff77\060\uff77" +
    "\067\uff77\070\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075" +
    "\uff77\076\uff77\077\uff77\100\uff77\101\uff77\104\uff77\105\uff77" +
    "\106\uff77\107\uff77\001\002\000\070\007\uff5e\023\uff5e\025" +
    "\uff5e\026\uff5e\031\uff5e\032\uff5e\033\uff5e\037\uff5e\043\uff5e" +
    "\044\uff5e\053\uff5e\060\uff5e\067\uff5e\070\uff5e\071\uff5e\072" +
    "\uff5e\073\uff5e\074\uff5e\075\uff5e\076\uff5e\077\uff5e\100\uff5e" +
    "\101\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e\001\002\000" +
    "\006\023\040\067\177\001\002\000\006\011\uffb3\046\uffb3" +
    "\001\002\000\006\011\035\046\175\001\002\000\004\007" +
    "\uffb5\001\002\000\006\011\uffb4\046\uffb4\001\002\000\024" +
    "\011\054\012\045\013\052\014\050\015\043\016\042\017" +
    "\047\020\200\027\202\001\002\000\010\006\uffd5\007\uffd5" +
    "\025\uffd5\001\002\000\004\007\234\001\002\000\004\030" +
    "\207\001\002\000\004\007\206\001\002\000\004\007\205" +
    "\001\002\000\006\011\uffb1\046\uffb1\001\002\000\006\011" +
    "\uffb2\046\uffb2\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\006\023\221" +
    "\031\220\001\002\000\004\031\215\001\002\000\044\032" +
    "\213\037\111\053\110\070\104\071\116\072\124\073\122" +
    "\074\105\075\107\076\115\077\113\100\120\101\106\104" +
    "\123\105\112\106\121\107\114\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\102\100\103\076\105\073\117\072\001\002" +
    "\000\046\023\uffea\031\uffea\037\111\053\110\070\104\071" +
    "\116\072\124\073\122\074\105\075\107\076\115\077\113" +
    "\100\120\101\106\104\123\105\112\106\121\107\114\001" +
    "\002\000\004\033\216\001\002\000\020\012\045\013\052" +
    "\014\050\015\043\016\042\017\047\020\200\001\002\000" +
    "\004\007\uffe9\001\002\000\004\033\226\001\002\000\034" +
    "\004\064\005\062\010\061\011\103\021\067\024\070\034" +
    "\075\035\077\052\063\102\100\103\076\105\073\117\072" +
    "\001\002\000\006\023\uffe6\031\uffe6\001\002\000\006\023" +
    "\224\031\uffe8\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\006\023\uffe7" +
    "\031\uffe7\001\002\000\022\012\045\013\052\014\050\015" +
    "\043\016\042\017\047\020\200\027\230\001\002\000\004" +
    "\007\uffeb\001\002\000\004\030\232\001\002\000\004\007" +
    "\uffec\001\002\000\034\004\064\005\062\010\061\011\103" +
    "\021\067\024\070\034\075\035\077\052\063\102\100\103" +
    "\076\105\073\117\072\001\002\000\004\031\220\001\002" +
    "\000\006\011\uffb0\046\uffb0\001\002\000\014\006\uffe5\007" +
    "\uffe5\023\uffe5\025\uffe5\067\uffe5\001\002\000\006\006\253" +
    "\023\040\001\002\000\016\011\035\040\013\042\025\050" +
    "\023\054\012\062\031\001\002\000\004\007\250\001\002" +
    "\000\004\007\247\001\002\000\004\007\246\001\002\000" +
    "\004\007\245\001\002\000\016\011\ufff9\040\ufff9\042\ufff9" +
    "\050\ufff9\054\ufff9\062\ufff9\001\002\000\016\011\ufff7\040" +
    "\ufff7\042\ufff7\050\ufff7\054\ufff7\062\ufff7\001\002\000\016" +
    "\011\ufff6\040\ufff6\042\ufff6\050\ufff6\054\ufff6\062\ufff6\001" +
    "\002\000\016\011\ufff8\040\ufff8\042\ufff8\050\ufff8\054\ufff8" +
    "\062\ufff8\001\002\000\016\011\ufff5\040\ufff5\042\ufff5\050" +
    "\ufff5\054\ufff5\062\ufff5\001\002\000\004\002\ufffc\001\002" +
    "\000\016\011\ufffa\040\ufffa\042\ufffa\050\ufffa\054\ufffa\062" +
    "\ufffa\001\002\000\054\004\064\005\062\010\061\011\263" +
    "\012\045\013\052\014\050\015\043\016\042\017\047\020" +
    "\046\021\067\024\256\027\202\034\075\035\077\052\063" +
    "\102\100\103\076\105\073\117\072\001\002\000\004\026" +
    "\267\001\002\000\004\007\uffed\001\002\000\034\004\064" +
    "\005\062\010\061\011\103\021\067\024\070\034\075\035" +
    "\077\052\063\102\100\103\076\105\073\117\072\001\002" +
    "\000\004\007\ufff4\001\002\000\004\007\uffee\001\002\000" +
    "\004\007\ufff3\001\002\000\044\026\ufff0\037\111\053\110" +
    "\070\104\071\116\072\124\073\122\074\105\075\107\076" +
    "\115\077\113\100\120\101\106\104\123\105\112\106\121" +
    "\107\114\001\002\000\054\007\uffd4\024\uff74\026\uff74\030" +
    "\uff74\037\uff74\053\uff74\063\uff74\070\uff74\071\uff74\072\uff74" +
    "\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101" +
    "\uff74\104\uff74\105\uff74\106\uff74\107\uff74\001\002\000\006" +
    "\023\162\025\266\001\002\000\046\023\uffde\025\170\037" +
    "\111\053\110\070\104\071\116\072\124\073\122\074\105" +
    "\075\107\076\115\077\113\100\120\101\106\104\123\105" +
    "\112\106\121\107\114\001\002\000\004\007\ufff2\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\102\100\103\076\105\073" +
    "\117\072\001\002\000\004\007\ufff1\001\002\000\044\007" +
    "\uffef\037\111\053\110\070\104\071\116\072\124\073\122" +
    "\074\105\075\107\076\115\077\113\100\120\101\106\104" +
    "\123\105\112\106\121\107\114\001\002\000\014\011\uffcf" +
    "\040\uffcf\050\uffcf\054\uffcf\062\uffcf\001\002\000\006\023" +
    "\040\067\277\001\002\000\014\011\035\040\013\050\023" +
    "\054\012\062\031\001\002\000\004\002\uffd2\001\002\000" +
    "\014\011\uffd0\040\uffd0\050\uffd0\054\uffd0\062\uffd0\001\002" +
    "\000\022\011\054\012\045\013\052\014\050\015\043\016" +
    "\042\017\047\020\200\001\002\000\004\006\301\001\002" +
    "\000\034\004\064\005\062\010\061\011\103\021\067\024" +
    "\070\034\075\035\077\052\063\102\100\103\076\105\073" +
    "\117\072\001\002\000\044\007\303\037\111\053\110\070" +
    "\104\071\116\072\124\073\122\074\105\075\107\076\115" +
    "\077\113\100\120\101\106\104\123\105\112\106\121\107" +
    "\114\001\002\000\014\011\uffce\040\uffce\050\uffce\054\uffce" +
    "\062\uffce\001\002\000\010\040\uffc2\050\uffc2\054\uffc2\001" +
    "\002\000\010\040\uffc3\050\uffc3\054\uffc3\001\002\000\004" +
    "\002\uffc5\001\002\000\004\024\310\001\002\000\010\011" +
    "\035\025\u0143\062\u0141\001\002\000\004\067\312\001\002" +
    "\000\022\011\054\012\045\013\052\014\050\015\043\016" +
    "\042\017\047\020\200\001\002\000\004\007\314\001\002" +
    "\000\006\040\317\062\031\001\002\000\010\040\uffb6\050" +
    "\uffb6\054\uffb6\001\002\000\004\040\317\001\002\000\036" +
    "\011\353\036\341\041\327\046\326\047\324\056\337\064" +
    "\332\065\331\111\350\112\346\113\345\114\340\115\343" +
    "\116\344\001\002\000\010\040\uffbf\050\uffbf\054\uffbf\001" +
    "\002\000\072\004\uffa2\005\uffa2\010\uffa2\011\uffa2\021\uffa2" +
    "\024\uffa2\034\uffa2\035\uffa2\036\uffa2\041\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\052\uffa2\056\uffa2\061\uffa2\064\uffa2\065\uffa2" +
    "\102\uffa2\103\uffa2\105\uffa2\111\uffa2\112\uffa2\113\uffa2\114" +
    "\uffa2\115\uffa2\116\uffa2\117\uffa2\001\002\000\004\007\u013e" +
    "\001\002\000\040\011\uffaa\036\uffaa\041\uffaa\046\uffaa\047" +
    "\uffaa\056\uffaa\061\uffaa\064\uffaa\065\uffaa\111\uffaa\112\uffaa" +
    "\113\uffaa\114\uffaa\115\uffaa\116\uffaa\001\002\000\004\011" +
    "\u0131\001\002\000\036\011\353\036\341\041\327\046\u012e" +
    "\047\324\056\337\064\332\065\331\111\350\112\346\113" +
    "\345\114\340\115\343\116\344\001\002\000\004\007\u012d" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\102\100\103\076" +
    "\105\073\117\072\001\002\000\072\004\uffa6\005\uffa6\010" +
    "\uffa6\011\uffa6\021\uffa6\024\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\041\uffa6\045\uffa6\046\uffa6\047\uffa6\052\uffa6\056\uffa6\061" +
    "\uffa6\064\uffa6\065\uffa6\102\uffa6\103\uffa6\105\uffa6\111\uffa6" +
    "\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\001" +
    "\002\000\004\011\u0118\001\002\000\034\004\064\005\062" +
    "\010\061\011\103\021\067\024\070\034\075\035\077\052" +
    "\063\102\100\103\076\105\073\117\072\001\002\000\072" +
    "\004\uffa1\005\uffa1\010\uffa1\011\uffa1\021\uffa1\024\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\041\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\052\uffa1\056\uffa1\061\uffa1\064\uffa1\065\uffa1\102\uffa1\103" +
    "\uffa1\105\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1" +
    "\116\uffa1\117\uffa1\001\002\000\012\024\u0109\030\u010a\063" +
    "\u0108\067\u010b\001\002\000\072\004\uffa3\005\uffa3\010\uffa3" +
    "\011\uffa3\021\uffa3\024\uffa3\034\uffa3\035\uffa3\036\uffa3\041" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\052\uffa3\056\uffa3\061\uffa3" +
    "\064\uffa3\065\uffa3\102\uffa3\103\uffa3\105\uffa3\111\uffa3\112" +
    "\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\001\002" +
    "\000\072\004\uffa9\005\uffa9\010\uffa9\011\uffa9\021\uffa9\024" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\045\uffa9\046\uffa9" +
    "\047\uffa9\052\uffa9\056\uffa9\061\uffa9\064\uffa9\065\uffa9\102" +
    "\uffa9\103\uffa9\105\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\001\002\000\034\011\353\036" +
    "\341\041\327\047\324\056\337\064\332\065\331\111\350" +
    "\112\346\113\345\114\340\115\343\116\344\001\002\000" +
    "\004\007\u0102\001\002\000\004\024\376\001\002\000\004" +
    "\007\375\001\002\000\004\024\371\001\002\000\004\024" +
    "\365\001\002\000\004\007\364\001\002\000\004\007\363" +
    "\001\002\000\072\004\uffa4\005\uffa4\010\uffa4\011\uffa4\021" +
    "\uffa4\024\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\052\uffa4\056\uffa4\061\uffa4\064\uffa4\065" +
    "\uffa4\102\uffa4\103\uffa4\105\uffa4\111\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\116\uffa4\117\uffa4\001\002\000\004\024" +
    "\357\001\002\000\072\004\uffa5\005\uffa5\010\uffa5\011\uffa5" +
    "\021\uffa5\024\uffa5\034\uffa5\035\uffa5\036\uffa5\041\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\052\uffa5\056\uffa5\061\uffa5\064\uffa5" +
    "\065\uffa5\102\uffa5\103\uffa5\105\uffa5\111\uffa5\112\uffa5\113" +
    "\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5\001\002\000\072" +
    "\004\uffa7\005\uffa7\010\uffa7\011\uffa7\021\uffa7\024\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\041\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\052\uffa7\056\uffa7\061\uffa7\064\uffa7\065\uffa7\102\uffa7\103" +
    "\uffa7\105\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7" +
    "\116\uffa7\117\uffa7\001\002\000\012\024\354\030\uffe3\063" +
    "\uffe3\067\uffe3\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\006\023\162" +
    "\025\356\001\002\000\004\007\uff70\001\002\000\004\011" +
    "\035\001\002\000\006\023\040\025\361\001\002\000\004" +
    "\007\362\001\002\000\072\004\uff7c\005\uff7c\010\uff7c\011" +
    "\uff7c\021\uff7c\024\uff7c\034\uff7c\035\uff7c\036\uff7c\041\uff7c" +
    "\045\uff7c\046\uff7c\047\uff7c\052\uff7c\056\uff7c\061\uff7c\064" +
    "\uff7c\065\uff7c\102\uff7c\103\uff7c\105\uff7c\111\uff7c\112\uff7c" +
    "\113\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c\001\002\000" +
    "\072\004\uff9b\005\uff9b\010\uff9b\011\uff9b\021\uff9b\024\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\041\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\052\uff9b\056\uff9b\061\uff9b\064\uff9b\065\uff9b\102\uff9b" +
    "\103\uff9b\105\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115" +
    "\uff9b\116\uff9b\117\uff9b\001\002\000\072\004\uff9a\005\uff9a" +
    "\010\uff9a\011\uff9a\021\uff9a\024\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\041\uff9a\045\uff9a\046\uff9a\047\uff9a\052\uff9a\056\uff9a" +
    "\061\uff9a\064\uff9a\065\uff9a\102\uff9a\103\uff9a\105\uff9a\111" +
    "\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\102\100\103\076" +
    "\105\073\117\072\001\002\000\006\023\162\025\367\001" +
    "\002\000\004\007\370\001\002\000\072\004\uff7d\005\uff7d" +
    "\010\uff7d\011\uff7d\021\uff7d\024\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\041\uff7d\045\uff7d\046\uff7d\047\uff7d\052\uff7d\056\uff7d" +
    "\061\uff7d\064\uff7d\065\uff7d\102\uff7d\103\uff7d\105\uff7d\111" +
    "\uff7d\112\uff7d\113\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\102\100\103\076" +
    "\105\073\117\072\001\002\000\006\023\162\025\373\001" +
    "\002\000\004\007\374\001\002\000\072\004\uff7e\005\uff7e" +
    "\010\uff7e\011\uff7e\021\uff7e\024\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\041\uff7e\045\uff7e\046\uff7e\047\uff7e\052\uff7e\056\uff7e" +
    "\061\uff7e\064\uff7e\065\uff7e\102\uff7e\103\uff7e\105\uff7e\111" +
    "\uff7e\112\uff7e\113\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e" +
    "\001\002\000\072\004\uffa8\005\uffa8\010\uffa8\011\uffa8\021" +
    "\uffa8\024\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\052\uffa8\056\uffa8\061\uffa8\064\uffa8\065" +
    "\uffa8\102\uffa8\103\uffa8\105\uffa8\111\uffa8\112\uffa8\113\uffa8" +
    "\114\uffa8\115\uffa8\116\uffa8\117\uffa8\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\102\100\103\076\105\073\117\072\001" +
    "\002\000\044\025\u0100\037\111\053\110\070\104\071\116" +
    "\072\124\073\122\074\105\075\107\076\115\077\113\100" +
    "\120\101\106\104\123\105\112\106\121\107\114\001\002" +
    "\000\004\007\u0101\001\002\000\072\004\uffa0\005\uffa0\010" +
    "\uffa0\011\uffa0\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\041\uffa0\045\uffa0\046\uffa0\047\uffa0\052\uffa0\056\uffa0\061" +
    "\uffa0\064\uffa0\065\uffa0\102\uffa0\103\uffa0\105\uffa0\111\uffa0" +
    "\112\uffa0\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\001" +
    "\002\000\072\004\uff99\005\uff99\010\uff99\011\uff99\021\uff99" +
    "\024\uff99\034\uff99\035\uff99\036\uff99\041\uff99\045\uff99\046" +
    "\uff99\047\uff99\052\uff99\056\uff99\061\uff99\064\uff99\065\uff99" +
    "\102\uff99\103\uff99\105\uff99\111\uff99\112\uff99\113\uff99\114" +
    "\uff99\115\uff99\116\uff99\117\uff99\001\002\000\036\011\353" +
    "\036\341\041\327\047\324\056\337\061\u0105\064\332\065" +
    "\331\111\350\112\346\113\345\114\340\115\343\116\344" +
    "\001\002\000\040\011\uffab\036\uffab\041\uffab\046\uffab\047" +
    "\uffab\056\uffab\061\uffab\064\uffab\065\uffab\111\uffab\112\uffab" +
    "\113\uffab\114\uffab\115\uffab\116\uffab\001\002\000\034\004" +
    "\064\005\062\010\061\011\103\021\067\024\070\034\075" +
    "\035\077\052\063\102\100\103\076\105\073\117\072\001" +
    "\002\000\044\007\u0107\037\111\053\110\070\104\071\116" +
    "\072\124\073\122\074\105\075\107\076\115\077\113\100" +
    "\120\101\106\104\123\105\112\106\121\107\114\001\002" +
    "\000\072\004\uff83\005\uff83\010\uff83\011\uff83\021\uff83\024" +
    "\uff83\034\uff83\035\uff83\036\uff83\041\uff83\045\uff83\046\uff83" +
    "\047\uff83\052\uff83\056\uff83\061\uff83\064\uff83\065\uff83\102" +
    "\uff83\103\uff83\105\uff83\111\uff83\112\uff83\113\uff83\114\uff83" +
    "\115\uff83\116\uff83\117\uff83\001\002\000\004\011\u0112\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\102\100\103\076\105" +
    "\073\117\072\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\004\006\u010c" +
    "\001\002\000\034\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\052\063\102\100\103\076" +
    "\105\073\117\072\001\002\000\050\007\uff9c\037\111\044" +
    "\uff9c\053\110\060\uff9c\070\104\071\116\072\124\073\122" +
    "\074\105\075\107\076\115\077\113\100\120\101\106\104" +
    "\123\105\112\106\121\107\114\001\002\000\006\023\162" +
    "\031\u010f\001\002\000\012\024\uffe2\030\uffe2\063\uffe2\067" +
    "\uffe2\001\002\000\006\023\162\025\u0111\001\002\000\012" +
    "\024\uffe1\030\uffe1\063\uffe1\067\uffe1\001\002\000\012\024" +
    "\uffe0\030\uffe0\063\uffe0\067\uffe0\001\002\000\044\037\111" +
    "\043\u0114\053\110\070\104\071\116\072\124\073\122\074" +
    "\105\075\107\076\115\077\113\100\120\101\106\104\123" +
    "\105\112\106\121\107\114\001\002\000\036\011\353\036" +
    "\341\040\317\041\327\047\324\056\337\064\332\065\331" +
    "\111\350\112\346\113\345\114\340\115\343\116\344\001" +
    "\002\000\004\007\u0117\001\002\000\072\004\uff84\005\uff84" +
    "\010\uff84\011\uff84\021\uff84\024\uff84\034\uff84\035\uff84\036" +
    "\uff84\041\uff84\045\uff84\046\uff84\047\uff84\052\uff84\056\uff84" +
    "\061\uff84\064\uff84\065\uff84\102\uff84\103\uff84\105\uff84\111" +
    "\uff84\112\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84" +
    "\001\002\000\072\004\uff85\005\uff85\010\uff85\011\uff85\021" +
    "\uff85\024\uff85\034\uff85\035\uff85\036\uff85\041\uff85\045\uff85" +
    "\046\uff85\047\uff85\052\uff85\056\uff85\061\uff85\064\uff85\065" +
    "\uff85\102\uff85\103\uff85\105\uff85\111\uff85\112\uff85\113\uff85" +
    "\114\uff85\115\uff85\116\uff85\117\uff85\001\002\000\004\043" +
    "\u0119\001\002\000\036\011\353\036\341\040\317\041\327" +
    "\047\324\056\337\064\332\065\331\111\350\112\346\113" +
    "\345\114\340\115\343\116\344\001\002\000\072\004\uff9e" +
    "\005\uff9e\010\uff9e\011\uff9e\021\uff9e\024\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\041\uff9e\045\uff9e\046\uff9e\047\uff9e\052\uff9e" +
    "\056\uff9e\061\uff9e\064\uff9e\065\uff9e\102\uff9e\103\uff9e\105" +
    "\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e" +
    "\117\uff9e\001\002\000\072\004\uff9d\005\uff9d\010\uff9d\011" +
    "\uff9d\021\uff9d\024\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\052\uff9d\056\uff9d\061\uff9d\064" +
    "\uff9d\065\uff9d\102\uff9d\103\uff9d\105\uff9d\111\uff9d\112\uff9d" +
    "\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\001\002\000" +
    "\044\033\u011d\037\111\053\110\070\104\071\116\072\124" +
    "\073\122\074\105\075\107\076\115\077\113\100\120\101" +
    "\106\104\123\105\112\106\121\107\114\001\002\000\034" +
    "\004\064\005\062\010\061\011\103\021\067\024\070\034" +
    "\075\035\077\052\063\102\100\103\076\105\073\117\072" +
    "\001\002\000\040\004\064\005\062\010\061\011\103\021" +
    "\067\024\070\034\075\035\077\045\u0125\046\u0124\052\063" +
    "\102\100\103\076\105\073\117\072\001\002\000\040\004" +
    "\uff8a\005\uff8a\010\uff8a\011\uff8a\021\uff8a\024\uff8a\034\uff8a" +
    "\035\uff8a\045\uff8a\046\uff8a\052\uff8a\102\uff8a\103\uff8a\105" +
    "\uff8a\117\uff8a\001\002\000\044\037\111\053\110\067\u0121" +
    "\070\104\071\116\072\124\073\122\074\105\075\107\076" +
    "\115\077\113\100\120\101\106\104\123\105\112\106\121" +
    "\107\114\001\002\000\036\011\353\036\341\040\317\041" +
    "\327\047\324\056\337\064\332\065\331\111\350\112\346" +
    "\113\345\114\340\115\343\116\344\001\002\000\040\004" +
    "\uff88\005\uff88\010\uff88\011\uff88\021\uff88\024\uff88\034\uff88" +
    "\035\uff88\045\uff88\046\uff88\052\uff88\102\uff88\103\uff88\105" +
    "\uff88\117\uff88\001\002\000\040\004\uff89\005\uff89\010\uff89" +
    "\011\uff89\021\uff89\024\uff89\034\uff89\035\uff89\045\uff89\046" +
    "\uff89\052\uff89\102\uff89\103\uff89\105\uff89\117\uff89\001\002" +
    "\000\004\007\u012c\001\002\000\036\011\353\036\341\040" +
    "\317\041\327\047\324\056\337\064\332\065\331\111\350" +
    "\112\346\113\345\114\340\115\343\116\344\001\002\000" +
    "\004\046\u0128\001\002\000\040\004\uff8b\005\uff8b\010\uff8b" +
    "\011\uff8b\021\uff8b\024\uff8b\034\uff8b\035\uff8b\045\uff8b\046" +
    "\uff8b\052\uff8b\102\uff8b\103\uff8b\105\uff8b\117\uff8b\001\002" +
    "\000\004\007\u0129\001\002\000\072\004\uff8c\005\uff8c\010" +
    "\uff8c\011\uff8c\021\uff8c\024\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\041\uff8c\045\uff8c\046\uff8c\047\uff8c\052\uff8c\056\uff8c\061" +
    "\uff8c\064\uff8c\065\uff8c\102\uff8c\103\uff8c\105\uff8c\111\uff8c" +
    "\112\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c\117\uff8c\001" +
    "\002\000\004\046\uff86\001\002\000\004\046\uff87\001\002" +
    "\000\072\004\uff8d\005\uff8d\010\uff8d\011\uff8d\021\uff8d\024" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\041\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\052\uff8d\056\uff8d\061\uff8d\064\uff8d\065\uff8d\102" +
    "\uff8d\103\uff8d\105\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d" +
    "\115\uff8d\116\uff8d\117\uff8d\001\002\000\102\004\uffac\005" +
    "\uffac\007\uffac\010\uffac\011\uffac\021\uffac\024\uffac\034\uffac" +
    "\035\uffac\036\uffac\040\uffac\041\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\052\uffac\054\uffac\056\uffac\061\uffac\064\uffac" +
    "\065\uffac\102\uffac\103\uffac\105\uffac\111\uffac\112\uffac\113" +
    "\uffac\114\uffac\115\uffac\116\uffac\117\uffac\001\002\000\004" +
    "\007\u012f\001\002\000\102\004\uffad\005\uffad\007\uffad\010" +
    "\uffad\011\uffad\021\uffad\024\uffad\034\uffad\035\uffad\036\uffad" +
    "\040\uffad\041\uffad\045\uffad\046\uffad\047\uffad\050\uffad\052" +
    "\uffad\054\uffad\056\uffad\061\uffad\064\uffad\065\uffad\102\uffad" +
    "\103\uffad\105\uffad\111\uffad\112\uffad\113\uffad\114\uffad\115" +
    "\uffad\116\uffad\117\uffad\001\002\000\006\044\u0132\060\u0133" +
    "\001\002\000\012\024\uffe3\030\uffe3\063\uffe3\067\uffe3\001" +
    "\002\000\034\004\064\005\062\010\061\011\103\021\067" +
    "\024\070\034\075\035\077\052\063\102\100\103\076\105" +
    "\073\117\072\001\002\000\034\004\064\005\062\010\061" +
    "\011\103\021\067\024\070\034\075\035\077\052\063\102" +
    "\100\103\076\105\073\117\072\001\002\000\044\037\111" +
    "\043\u0135\053\110\070\104\071\116\072\124\073\122\074" +
    "\105\075\107\076\115\077\113\100\120\101\106\104\123" +
    "\105\112\106\121\107\114\001\002\000\036\011\353\036" +
    "\341\040\317\041\327\047\324\056\337\064\332\065\331" +
    "\111\350\112\346\113\345\114\340\115\343\116\344\001" +
    "\002\000\004\007\u0138\001\002\000\072\004\uff80\005\uff80" +
    "\010\uff80\011\uff80\021\uff80\024\uff80\034\uff80\035\uff80\036" +
    "\uff80\041\uff80\045\uff80\046\uff80\047\uff80\052\uff80\056\uff80" +
    "\061\uff80\064\uff80\065\uff80\102\uff80\103\uff80\105\uff80\111" +
    "\uff80\112\uff80\113\uff80\114\uff80\115\uff80\116\uff80\117\uff80" +
    "\001\002\000\072\004\uff82\005\uff82\010\uff82\011\uff82\021" +
    "\uff82\024\uff82\034\uff82\035\uff82\036\uff82\041\uff82\045\uff82" +
    "\046\uff82\047\uff82\052\uff82\056\uff82\061\uff82\064\uff82\065" +
    "\uff82\102\uff82\103\uff82\105\uff82\111\uff82\112\uff82\113\uff82" +
    "\114\uff82\115\uff82\116\uff82\117\uff82\001\002\000\044\037" +
    "\111\043\u013a\053\110\070\104\071\116\072\124\073\122" +
    "\074\105\075\107\076\115\077\113\100\120\101\106\104" +
    "\123\105\112\106\121\107\114\001\002\000\036\011\353" +
    "\036\341\040\317\041\327\047\324\056\337\064\332\065" +
    "\331\111\350\112\346\113\345\114\340\115\343\116\344" +
    "\001\002\000\004\007\u013d\001\002\000\072\004\uff7f\005" +
    "\uff7f\010\uff7f\011\uff7f\021\uff7f\024\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\041\uff7f\045\uff7f\046\uff7f\047\uff7f\052\uff7f\056" +
    "\uff7f\061\uff7f\064\uff7f\065\uff7f\102\uff7f\103\uff7f\105\uff7f" +
    "\111\uff7f\112\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f\117" +
    "\uff7f\001\002\000\072\004\uff81\005\uff81\010\uff81\011\uff81" +
    "\021\uff81\024\uff81\034\uff81\035\uff81\036\uff81\041\uff81\045" +
    "\uff81\046\uff81\047\uff81\052\uff81\056\uff81\061\uff81\064\uff81" +
    "\065\uff81\102\uff81\103\uff81\105\uff81\111\uff81\112\uff81\113" +
    "\uff81\114\uff81\115\uff81\116\uff81\117\uff81\001\002\000\072" +
    "\004\uff9f\005\uff9f\010\uff9f\011\uff9f\021\uff9f\024\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\041\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\052\uff9f\056\uff9f\061\uff9f\064\uff9f\065\uff9f\102\uff9f\103" +
    "\uff9f\105\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f" +
    "\116\uff9f\117\uff9f\001\002\000\010\040\uffb7\050\uffb7\054" +
    "\uffb7\001\002\000\006\023\040\067\u0150\001\002\000\004" +
    "\011\035\001\002\000\006\007\u0144\025\u0145\001\002\000" +
    "\006\007\uffbc\067\uffbc\001\002\000\006\011\035\062\u0147" +
    "\001\002\000\006\007\uffbd\067\uffbd\001\002\000\006\023" +
    "\040\067\u014b\001\002\000\004\011\035\001\002\000\006" +
    "\023\040\067\u0149\001\002\000\022\011\054\012\045\013" +
    "\052\014\050\015\043\016\042\017\047\020\200\001\002" +
    "\000\006\007\uffba\025\uffba\001\002\000\022\011\054\012" +
    "\045\013\052\014\050\015\043\016\042\017\047\020\200" +
    "\001\002\000\006\007\uffbb\025\uffbb\001\002\000\006\023" +
    "\040\067\u014e\001\002\000\022\011\054\012\045\013\052" +
    "\014\050\015\043\016\042\017\047\020\200\001\002\000" +
    "\006\007\uffb8\025\uffb8\001\002\000\022\011\054\012\045" +
    "\013\052\014\050\015\043\016\042\017\047\020\200\001" +
    "\002\000\006\007\uffb9\025\uffb9\001\002\000\006\007\u0153" +
    "\023\040\001\002\000\016\022\027\040\013\042\025\050" +
    "\023\054\012\062\031\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffcd\001\002\000\036\011\353\036\341\041" +
    "\327\046\u0159\047\324\056\337\064\332\065\331\111\350" +
    "\112\346\113\345\114\340\115\343\116\344\001\002\000" +
    "\004\063\u0158\001\002\000\004\002\uffae\001\002\000\004" +
    "\063\u015a\001\002\000\004\002\uffaf\001\002\000\004\024" +
    "\310\001\002\000\004\007\u015d\001\002\000\006\040\317" +
    "\062\031\001\002\000\010\040\uffbe\050\uffbe\054\uffbe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\006\002\004\051\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\027\022\021\024\023\052" +
    "\013\053\014\054\031\057\015\060\016\062\020\063\025" +
    "\001\001\000\002\001\001\000\034\021\335\030\351\032" +
    "\327\033\350\034\346\035\334\036\320\045\332\056\u0155" +
    "\066\333\073\322\074\341\103\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\027" +
    "\022\021\024\023\053\014\057\u0154\001\001\000\004\065" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\304\022\303\053\305\001\001\000" +
    "\010\064\273\065\272\072\271\001\001\000\002\001\001" +
    "\000\020\003\242\004\241\007\237\055\236\065\235\067" +
    "\243\071\240\001\001\000\002\001\001\000\010\061\035" +
    "\065\033\070\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\065\033" +
    "\070\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\052\104\050\105\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\040\173\041\172\065\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\100\075\057\076\064\077\073\100\065\101\101\102" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\100\075\057\076" +
    "\064\077\073\100\065\101\170\102\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\100\075\057\076\064\077\073\100\065" +
    "\101\166\102\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\100\075\057\076\064\077\073\100\065" +
    "\101\152\102\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\100\075\057\076\064\077\073\100\065\101\143" +
    "\102\070\001\001\000\020\012\100\075\057\076\064\077" +
    "\073\100\065\101\142\102\070\001\001\000\020\012\100" +
    "\075\057\076\064\077\073\100\065\101\141\102\070\001" +
    "\001\000\020\012\100\075\057\076\064\077\073\100\065" +
    "\101\140\102\070\001\001\000\020\012\100\075\057\076" +
    "\064\077\073\100\065\101\137\102\070\001\001\000\020" +
    "\012\100\075\057\076\064\077\073\100\065\101\136\102" +
    "\070\001\001\000\020\012\100\075\057\076\064\077\073" +
    "\100\065\101\135\102\070\001\001\000\020\012\100\075" +
    "\057\076\064\077\073\100\065\101\134\102\070\001\001" +
    "\000\020\012\100\075\057\076\064\077\073\100\065\101" +
    "\133\102\070\001\001\000\020\012\100\075\057\076\064" +
    "\077\073\100\065\101\132\102\070\001\001\000\020\012" +
    "\100\075\057\076\064\077\073\100\065\101\131\102\070" +
    "\001\001\000\002\001\001\000\020\012\100\075\057\076" +
    "\064\077\073\100\065\101\130\102\070\001\001\000\020" +
    "\012\100\075\057\076\064\077\073\100\065\101\127\102" +
    "\070\001\001\000\020\012\100\075\057\076\064\077\073" +
    "\100\065\101\126\102\070\001\001\000\020\012\100\075" +
    "\057\076\064\077\073\100\065\101\125\102\070\001\001" +
    "\000\020\012\100\075\057\076\064\077\073\100\065\101" +
    "\124\102\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\100\075\057\076\064\077" +
    "\073\100\065\101\145\102\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\100\075\057\076\064\077" +
    "\073\100\065\101\150\102\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\100\013\163\075\057\076\064\077\073\100\065" +
    "\101\157\102\070\001\001\000\022\012\100\013\156\075" +
    "\057\076\064\077\073\100\065\101\157\102\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\100\075\057\076\064\077\073\100\065\101\162" +
    "\102\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\175\065\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\203\046\200\104\202\105" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\207\012\100\023\210" +
    "\075\057\076\064\077\073\100\065\101\211\102\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\100\075\057\076\064\077\073\100\065\101" +
    "\213\102\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\221\012\100\047\222\075\057\076\064" +
    "\077\073\100\065\101\211\102\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\224\012\100\075\057" +
    "\076\064\077\073\100\065\101\211\102\070\001\001\000" +
    "\002\001\001\000\006\011\230\105\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\232\012\100\075\057\076\064\077\073\100\065\101\211" +
    "\102\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\242\004\241" +
    "\007\237\020\027\022\021\024\023\053\014\057\015\060" +
    "\016\062\020\063\250\065\235\067\251\071\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\253\011\257\012\100" +
    "\037\260\046\254\075\057\076\064\077\073\100\065\101" +
    "\261\102\070\104\256\105\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\100\013\263\075\057\076" +
    "\064\077\073\100\065\101\264\102\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\267\012\100\075\057\076" +
    "\064\077\073\100\065\101\270\102\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\020\027\022\021\024\023\053\014\057\015" +
    "\060\016\062\274\065\272\072\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\104\277\105\043\001\001" +
    "\000\002\001\001\000\020\012\100\075\057\076\064\077" +
    "\073\100\065\101\301\102\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\310\001\001\000\006\015\u0141" +
    "\065\u013f\001\001\000\002\001\001\000\006\104\312\105" +
    "\043\001\001\000\002\001\001\000\010\016\317\017\314" +
    "\060\315\001\001\000\002\001\001\000\004\017\u013e\001" +
    "\001\000\034\021\335\030\351\032\327\033\350\034\346" +
    "\035\334\036\320\045\332\056\324\066\333\073\322\074" +
    "\341\103\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\066\333\074" +
    "\u012f\001\001\000\032\021\335\030\351\032\327\033\350" +
    "\034\346\035\334\036\320\045\332\066\333\073\u0103\074" +
    "\341\103\321\001\001\000\002\001\001\000\020\012\100" +
    "\075\057\076\064\077\073\100\065\101\u011b\102\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\100" +
    "\075\057\076\064\077\073\100\065\101\u0112\102\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\021\335\030\351\032\327\033" +
    "\350\034\346\035\334\036\320\045\332\056\u0102\066\333" +
    "\073\322\074\341\103\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\100\013\354\075\057\076" +
    "\064\077\073\100\065\101\157\102\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\100\013\365\075" +
    "\057\076\064\077\073\100\065\101\157\102\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\100\013\371\075\057\076\064\077\073\100\065" +
    "\101\157\102\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\100" +
    "\075\057\076\064\077\073\100\065\101\376\102\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\021\335\030\351\032\327\033" +
    "\350\034\346\035\334\036\320\045\332\066\333\073\u0103" +
    "\074\341\103\321\001\001\000\002\001\001\000\020\012" +
    "\100\075\057\076\064\077\073\100\065\101\u0105\102\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\100\013\u010f\075\057\076\064\077\073" +
    "\100\065\101\157\102\070\001\001\000\022\012\100\013" +
    "\u010d\075\057\076\064\077\073\100\065\101\157\102\070" +
    "\001\001\000\002\001\001\000\020\012\100\075\057\076" +
    "\064\077\073\100\065\101\u010c\102\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\u0114\021\335\030\351\032\327\033\350\034" +
    "\346\035\334\036\320\045\332\066\333\073\u0115\074\341" +
    "\103\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\u0119\021\335" +
    "\030\351\032\327\033\350\034\346\035\334\036\320\045" +
    "\332\066\333\073\u011a\074\341\103\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\012" +
    "\100\042\u011e\043\u011d\075\057\076\064\077\073\100\065" +
    "\101\u011f\102\070\001\001\000\024\012\100\042\u0126\044" +
    "\u0125\075\057\076\064\077\073\100\065\101\u011f\102\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\017" +
    "\u0121\021\335\030\351\032\327\033\350\034\346\035\334" +
    "\036\320\045\332\066\333\073\u0122\074\341\103\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\u0129\021\335\030\351\032\327\033\350\034" +
    "\346\035\334\036\320\045\332\066\333\073\u012a\074\341" +
    "\103\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\100\075\057\076\064\077\073\100\065\101" +
    "\u0138\102\070\001\001\000\020\012\100\075\057\076\064" +
    "\077\073\100\065\101\u0133\102\070\001\001\000\002\001" +
    "\001\000\034\017\u0135\021\335\030\351\032\327\033\350" +
    "\034\346\035\334\036\320\045\332\066\333\073\u0136\074" +
    "\341\103\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\017\u013a\021" +
    "\335\030\351\032\327\033\350\034\346\035\334\036\320" +
    "\045\332\066\333\073\u013b\074\341\103\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\u0145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u0147\001\001\000\002\001\001\000\006\104\u0149" +
    "\105\043\001\001\000\002\001\001\000\006\104\u014b\105" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\104\u014e\105\043\001\001\000\002\001\001\000\006\104" +
    "\u0150\105\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\020\027\022\021\024\023\053\014\054\u0153\057" +
    "\015\060\016\062\020\063\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\021\335\030\351\032\327\033" +
    "\350\034\346\035\334\036\320\045\332\066\333\073\u0103" +
    "\074\341\103\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u015b" +
    "\001\001\000\002\001\001\000\010\016\u015d\017\314\060" +
    "\315\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Tree tree;
    public Tree getArbol() {
            return tree;
    }
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PRIMITIVO ::= nil 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Nil()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PRIMITIVO ::= decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PRIMITIVO ::= numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PRIMITIVO ::= falso 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(false); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PRIMITIVO ::= verdadero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PRIMITIVO ::= caracter 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PRIMITIVO ::= cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LOGICA ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.NOT, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LOGICA ::= EXPRESION nor EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NOR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LOGICA ::= EXPRESION nand EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NAND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LOGICA ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.AND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LOGICA ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.OR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIFERENTE_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // RELACIONAL ::= EXPRESION igualacion EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.IGUAL_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // RELACIONAL ::= EXPRESION menorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RELACIONAL ::= EXPRESION mayorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ARITMETICA ::= EXPRESION modulo EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIVISION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MULTIPLICACION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.RESTA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.SUMA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARITMETICA ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.MENOS_UNARIO, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LLAMADA ::= identificador parenI LISTA_EXPRESION parenD 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCESO ::= ACCESO punto identificador 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ACCESO ::= ACCESO parenI LISTA_EXPRESION parenD 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ACCESO ::= ACCESO corI LISTA_EXPRESION corD 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCESO ::= identificador 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= MEMORIA_VIRTUAL 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= ACCESO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= PRIMITIVO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= LOGICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= ARITMETICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // READ ::= leer parenI LISTA_IDENTIFICADORES parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("READ",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // WRITE ::= escribirln parenI LISTA_EXPRESION parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // WRITE ::= escribir parenI LISTA_EXPRESION parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FOR ::= para ASIGNACION downto EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FOR ::= para ASIGNACION to EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FOR ::= para ASIGNACION downto EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FOR ::= para ASIGNACION to EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // REPEAT ::= repeat LISTA_INSTRUCCIONES until EXPRESION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REPEAT",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WHILE ::= mientras EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WHILE ::= mientras EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DEFECTO ::= sino BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DEFECTO ::= sino INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE ::= EXPRESION dosPuntos BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE ::= EXPRESION dosPuntos INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASELIST ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASELIST ::= CASELIST CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SWITCH ::= caso EXPRESION of CASELIST DEFECTO end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SWITCH ::= caso EXPRESION of CASELIST end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INSTRUCCIONESIF ::= begin end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSTRUCCIONESIF ::= begin LISTA_INSTRUCCIONES end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSIF ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INSIF ::= INSTRUCCIONESIF pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INSIF ::= INSTRUCCIONESIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTAIF ::= sino si EXPRESION then INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTAIF",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LISTAIF ::= LISTAIF sino si EXPRESION then INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTAIF",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SI ::= si EXPRESION then INSIF LISTAIF sino INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SI ::= si EXPRESION then INSIF LISTAIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SI ::= si EXPRESION then INSIF sino INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SI ::= si EXPRESION then INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TRANSFERENCIA ::= salir pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TRANSFERENCIA ::= continuar pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TRANSFERENCIA ::= detener pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNACION ::= VARIABLE dosPuntos igual EXPRESION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Asignacion(new Variable(e), e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WITH ::= con identificador hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WITH ::= con identificador hacer BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCCION ::= LLAMADA pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCCION ::= free parenI EXPRESION parenD pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCCION ::= SWITCH 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCCION ::= READ 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCCION ::= WRITE 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCCION ::= FOR 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCION ::= REPEAT 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCION ::= WHILE 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCION ::= TRANSFERENCIA 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCION ::= ASIGNACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCION ::= WITH 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BLOQUE_INSTRUCCIONES ::= begin end pComa 
            {
              Object RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BLOQUE_INSTRUCCIONES ::= begin LISTA_INSTRUCCIONES end pComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MAIN ::= begin end punto 
            {
              ArrayList<AST> RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MAIN ::= begin LISTA_INSTRUCCIONES end punto 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RECORDS ::= LISTA_IDENTIFICADORES dosPuntos ARRAY_DECLARATION_MULTI pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RECORDS ::= LISTA_IDENTIFICADORES dosPuntos ARRAY_DECLARATION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RECORDS ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_RECORDS ::= RECORDS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_RECORDS ::= LISTA_RECORDS RECORDS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REGISTRO ::= record LISTA_RECORDS end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGISTRO",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO_FUNCION ::= BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO_FUNCION ::= VARINIT BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_PARAMETROS ::= var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_PARAMETROS ::= LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROS ::= parenI parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS ::= parenI LISTA_PARAMETROS parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PROCEDURE ::= procedure identificador PARAMETROS pComa CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METHOD_LIST ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METHOD_LIST ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METHOD_LIST ::= METHOD_LIST PROCEDURE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METHOD_LIST ::= METHOD_LIST FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SECCION_FUNCION ::= MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SECCION_FUNCION ::= METHOD_LIST MAIN 
            {
              ArrayList<AST> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR ::= LISTA_IDENTIFICADORES dosPuntos REGISTRO pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, e2, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_VAR ::= VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR ::= DECLARACION_VAR VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARINIT ::= var DECLARACION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARINIT",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SECCION_VAR ::= SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SECCION_VAR ::= VARINIT SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONST ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionConstante(e1, e, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONST",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_CONST ::= CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_CONST ::= DECLARACION_CONST CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SECCION_CONST ::= SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SECCION_CONST ::= constante DECLARACION_CONST SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.OBJETO, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_PRIMITIVO ::= record 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.RECORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_PRIMITIVO ::= string 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.STRING);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_PRIMITIVO ::= word 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.WORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_PRIMITIVO ::= bool 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.BOOLEAN);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_PRIMITIVO ::= character 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.CHAR);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_PRIMITIVO ::= real 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.REAL);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_PRIMITIVO ::= integer 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.INTEGER);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MEMORIA_VIRTUAL ::= malloc parenI EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MEMORIA_VIRTUAL ::= sizeof parenI EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_EXPRESION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARIABLE ::= VARIABLE punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLE ::= VARIABLE parenI LISTA_EXPRESION parenD 
            {
              ArrayList<Expresion> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLE ::= VARIABLE corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLE ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_IDENTIFICADORES ::= identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<String>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES coma identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_RANGO_ARRAY ::= RANGO_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_RANGO_ARRAY ::= LISTA_RANGO_ARRAY coma RANGO_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARRAY_MULTI ::= RANGO_ARRAY coma LISTA_RANGO_ARRAY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_MULTI",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARRAY_DECLARATION_MULTI ::= array corI ARRAY_MULTI corD of TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION_MULTI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RANGO_ARRAY ::= EXPRESION dosP EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RANGO_ARRAY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of TIPO_PRIMITIVO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION_MULTI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UPPER_LIMIT ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LOWER_LIMIT ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SUBRANGE_TYPE ::= LISTA_IDENTIFICADORES igual LOWER_LIMIT tresP UPPER_LIMIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUBRANGE_TYPE",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ENUM_TYPE ::= LISTA_IDENTIFICADORES igual parenI LISTA_EXPRESION parenD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ENUM_TYPE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igual REGISTRO 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igual TIPO 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new DeclaracionType(e1, e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_TIPOS ::= ARRAY_TYPE pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_TIPOS ::= SUBRANGE_TYPE pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_TIPOS ::= ENUM_TYPE pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_TIPOS ::= TIPO_DECLARACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DECLARACION_TIPOS ::= DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DECLARACION_TIPOS ::= LISTA_DECLARACION_TIPOS DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_TIPO ::= SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_TIPO ::= type LISTA_DECLARACION_TIPOS SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // USES ::= uses LISTA_IDENTIFICADORES pComa SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e1;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= program identificador pComa USES 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(new Program(e)); RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAM",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("Termino Correctamente"); parser.tree = new Tree(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

