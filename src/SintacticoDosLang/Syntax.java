
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 28 11:19:00 CST 2019
//----------------------------------------------------

package SintacticoDosLang;

import java.util.ArrayList;
import java_cup.runtime.*;
import doslang.DosLang;
import Instrucciones.*;
import Expresiones.*;
import Interfaces.*;
import TablaSimbolos.*;
import Excepciones.Excepcion;
import Excepciones.Excepcion.TIPOERROR;
import Expresiones.Operacion.Operador;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 28 11:19:00 CST 2019
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\002\004\000\002\002\003\000\002\027" +
    "\006\000\002\030\006\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\032\004\000\002\032\003\000" +
    "\002\053\004\000\002\055\005\000\002\073\003\000\002" +
    "\074\003\000\002\004\005\000\002\004\005\000\002\076" +
    "\010\000\002\076\010\000\002\076\010\000\002\102\005" +
    "\000\002\101\010\000\002\045\005\000\002\044\005\000" +
    "\002\044\003\000\002\043\005\000\002\043\003\000\002" +
    "\050\003\000\002\050\006\000\002\050\006\000\002\050" +
    "\005\000\002\051\005\000\002\051\003\000\002\075\006" +
    "\000\002\075\006\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\077\003\000\002\077" +
    "\005\000\002\077\005\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\040\005\000" +
    "\002\040\003\000\002\041\004\000\002\041\003\000\002" +
    "\056\010\000\002\037\004\000\002\037\003\000\002\035" +
    "\004\000\002\036\004\000\002\036\003\000\002\054\010" +
    "\000\002\054\006\000\002\034\004\000\002\034\003\000" +
    "\002\026\004\000\002\026\004\000\002\026\003\000\002" +
    "\026\003\000\002\061\012\000\002\061\011\000\002\007" +
    "\007\000\002\104\005\000\002\104\004\000\002\105\007" +
    "\000\002\105\010\000\002\105\005\000\002\105\006\000" +
    "\002\005\004\000\002\005\003\000\002\047\005\000\002" +
    "\046\004\000\002\046\003\000\002\103\006\000\002\063" +
    "\006\000\002\063\005\000\002\042\006\000\002\042\005" +
    "\000\002\033\004\000\002\033\003\000\002\057\003\000" +
    "\002\057\004\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\007\000\002\057\004" +
    "\000\002\006\006\000\002\006\006\000\002\060\006\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\010\006\000\002\010\010\000\002\010\007\000\002\010" +
    "\011\000\002\011\010\000\002\011\007\000\002\025\003" +
    "\000\002\025\004\000\002\025\003\000\002\012\005\000" +
    "\002\012\004\000\002\024\010\000\002\024\011\000\002" +
    "\022\004\000\002\022\003\000\002\021\005\000\002\021" +
    "\005\000\002\023\004\000\002\023\004\000\002\015\007" +
    "\000\002\015\006\000\002\016\007\000\002\017\011\000" +
    "\002\017\011\000\002\017\010\000\002\017\010\000\002" +
    "\064\007\000\002\064\007\000\002\020\007\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\005\000\002\071\003\000\002\071\003\000" +
    "\002\052\003\000\002\052\006\000\002\052\006\000\002" +
    "\052\005\000\002\072\006\000\002\066\004\000\002\066" +
    "\005\000\002\066\005\000\002\066\005\000\002\066\005" +
    "\000\002\066\005\000\002\066\005\000\002\067\005\000" +
    "\002\067\005\000\002\067\005\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\004" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\004\055\004\001\002\000\004\011\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\011\001\002\000" +
    "\020\022\027\040\013\042\025\050\023\054\012\062\031" +
    "\066\021\001\002\000\004\011\u014e\001\002\000\036\011" +
    "\336\036\324\041\312\046\u014a\047\307\056\322\064\315" +
    "\065\314\111\333\112\331\113\330\114\323\115\326\116" +
    "\327\001\002\000\004\002\uffff\001\002\000\004\002\uffcc" +
    "\001\002\000\004\002\uffc5\001\002\000\010\040\013\050" +
    "\023\054\012\001\002\000\004\002\uffd1\001\002\000\004" +
    "\011\035\001\002\000\010\040\uffc1\050\uffc1\054\uffc1\001" +
    "\002\000\004\011\273\001\002\000\010\040\013\050\023" +
    "\054\012\001\002\000\004\011\035\001\002\000\004\002" +
    "\ufffb\001\002\000\004\011\035\001\002\000\010\040\uffc2" +
    "\050\uffc2\054\uffc2\001\002\000\004\011\035\001\002\000" +
    "\004\002\ufffd\001\002\000\012\011\uffc9\040\uffc9\050\uffc9" +
    "\054\uffc9\001\002\000\006\023\040\067\041\001\002\000" +
    "\014\006\uffe9\007\uffe9\023\uffe9\025\uffe9\067\uffe9\001\002" +
    "\000\012\011\035\040\uffcb\050\uffcb\054\uffcb\001\002\000" +
    "\012\011\uffca\040\uffca\050\uffca\054\uffca\001\002\000\004" +
    "\011\244\001\002\000\054\004\053\005\046\010\045\011" +
    "\103\012\076\013\072\014\042\015\065\016\077\017\043" +
    "\020\047\021\056\024\060\027\061\034\071\035\075\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\010" +
    "\006\uffde\007\uffde\025\uffde\001\002\000\010\006\uffdb\007" +
    "\uffdb\025\uffdb\001\002\000\072\006\uff7a\007\uff7a\023\uff7a" +
    "\025\uff7a\026\uff7a\031\uff7a\032\uff7a\033\uff7a\037\uff7a\043" +
    "\uff7a\044\uff7a\053\uff7a\060\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\001\002" +
    "\000\072\006\uff5f\007\uff5f\023\uff5f\025\uff5f\026\uff5f\031" +
    "\uff5f\032\uff5f\033\uff5f\037\uff5f\043\uff5f\044\uff5f\053\uff5f" +
    "\060\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074" +
    "\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\104\uff5f" +
    "\105\uff5f\106\uff5f\107\uff5f\001\002\000\072\006\uff5a\007" +
    "\uff5a\023\uff5a\025\uff5a\026\uff5a\031\uff5a\032\uff5a\033\uff5a" +
    "\037\uff5a\043\uff5a\044\uff5a\053\uff5a\060\uff5a\067\uff5a\070" +
    "\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a" +
    "\077\uff5a\100\uff5a\101\uff5a\104\uff5a\105\uff5a\106\uff5a\107" +
    "\uff5a\001\002\000\012\006\uffda\007\uffda\011\234\025\uffda" +
    "\001\002\000\034\004\053\005\046\010\045\011\126\021" +
    "\056\024\124\034\071\035\075\052\050\102\100\103\073" +
    "\105\066\117\063\001\002\000\010\006\uffd4\007\uffd4\025" +
    "\uffd4\001\002\000\004\026\230\001\002\000\072\006\uff5b" +
    "\007\uff5b\023\uff5b\025\uff5b\026\uff5b\031\uff5b\032\uff5b\033" +
    "\uff5b\037\uff5b\043\uff5b\044\uff5b\053\uff5b\060\uff5b\067\uff5b" +
    "\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076" +
    "\uff5b\077\uff5b\100\uff5b\101\uff5b\104\uff5b\105\uff5b\106\uff5b" +
    "\107\uff5b\001\002\000\072\006\uff7d\007\uff7d\023\uff7d\025" +
    "\uff7d\026\uff7d\031\uff7d\032\uff7d\033\uff7d\037\uff7d\043\uff7d" +
    "\044\uff7d\053\uff7d\060\uff7d\067\uff7d\070\uff7d\071\uff7d\072" +
    "\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d" +
    "\101\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\001\002\000" +
    "\072\006\uff7c\007\uff7c\023\uff7c\025\uff7c\026\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\037\uff7c\043\uff7c\044\uff7c\053\uff7c\060" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\104\uff7c\105" +
    "\uff7c\106\uff7c\107\uff7c\001\002\000\072\006\uff59\007\uff59" +
    "\023\uff59\025\uff59\026\uff59\031\uff59\032\uff59\033\uff59\037" +
    "\uff59\043\uff59\044\uff59\053\uff59\060\uff59\067\uff59\070\uff59" +
    "\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077" +
    "\uff59\100\uff59\101\uff59\104\uff59\105\uff59\106\uff59\107\uff59" +
    "\001\002\000\010\006\uffd6\007\uffd6\025\uffd6\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\004\030\176\001\002\000\100\006\uff78" +
    "\007\uff78\023\uff78\024\164\025\uff78\026\uff78\030\165\031" +
    "\uff78\032\uff78\033\uff78\037\uff78\043\uff78\044\uff78\053\uff78" +
    "\060\uff78\063\163\067\uff78\070\uff78\071\uff78\072\uff78\073" +
    "\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78" +
    "\104\uff78\105\uff78\106\uff78\107\uff78\001\002\000\072\006" +
    "\uff5e\007\uff5e\023\uff5e\025\uff5e\026\uff5e\031\uff5e\032\uff5e" +
    "\033\uff5e\037\uff5e\043\uff5e\044\uff5e\053\uff5e\060\uff5e\067" +
    "\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e" +
    "\076\uff5e\077\uff5e\100\uff5e\101\uff5e\104\uff5e\105\uff5e\106" +
    "\uff5e\107\uff5e\001\002\000\006\006\157\007\160\001\002" +
    "\000\010\006\uffdd\007\uffdd\025\uffdd\001\002\000\034\004" +
    "\053\005\046\010\045\011\126\021\056\024\124\034\071" +
    "\035\075\052\050\102\100\103\073\105\066\117\063\001" +
    "\002\000\072\006\uff7b\007\uff7b\023\uff7b\025\uff7b\026\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\037\uff7b\043\uff7b\044\uff7b\053" +
    "\uff7b\060\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\104" +
    "\uff7b\105\uff7b\106\uff7b\107\uff7b\001\002\000\010\006\uffd5" +
    "\007\uffd5\025\uffd5\001\002\000\004\024\153\001\002\000" +
    "\010\006\uffdf\007\uffdf\025\uffdf\001\002\000\072\006\uff5d" +
    "\007\uff5d\023\uff5d\025\uff5d\026\uff5d\031\uff5d\032\uff5d\033" +
    "\uff5d\037\uff5d\043\uff5d\044\uff5d\053\uff5d\060\uff5d\067\uff5d" +
    "\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\101\uff5d\104\uff5d\105\uff5d\106\uff5d" +
    "\107\uff5d\001\002\000\010\006\uffd3\007\uffd3\025\uffd3\001" +
    "\002\000\004\024\150\001\002\000\010\006\uffe0\007\uffe0" +
    "\025\uffe0\001\002\000\010\006\uffdc\007\uffdc\025\uffdc\001" +
    "\002\000\072\006\uff5c\007\uff5c\023\uff5c\025\uff5c\026\uff5c" +
    "\031\uff5c\032\uff5c\033\uff5c\037\uff5c\043\uff5c\044\uff5c\053" +
    "\uff5c\060\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c" +
    "\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c\104" +
    "\uff5c\105\uff5c\106\uff5c\107\uff5c\001\002\000\072\006\uff77" +
    "\007\uff77\023\uff77\025\uff77\026\uff77\031\uff77\032\uff77\033" +
    "\uff77\037\uff77\043\uff77\044\uff77\053\uff77\060\uff77\067\uff77" +
    "\070\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076" +
    "\uff77\077\uff77\100\uff77\101\uff77\104\uff77\105\uff77\106\uff77" +
    "\107\uff77\001\002\000\044\026\ufff6\037\111\053\110\070" +
    "\104\071\116\072\123\073\121\074\105\075\106\076\115" +
    "\077\113\100\120\101\107\104\122\105\112\106\117\107" +
    "\114\001\002\000\060\006\uffd9\007\uffd9\024\uff76\025\uffd9" +
    "\026\uff76\030\uff76\037\uff76\053\uff76\063\uff76\070\uff76\071" +
    "\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76" +
    "\100\uff76\101\uff76\104\uff76\105\uff76\106\uff76\107\uff76\001" +
    "\002\000\034\004\053\005\046\010\045\011\126\021\056" +
    "\024\124\034\071\035\075\052\050\102\100\103\073\105" +
    "\066\117\063\001\002\000\034\004\053\005\046\010\045" +
    "\011\126\021\056\024\124\034\071\035\075\052\050\102" +
    "\100\103\073\105\066\117\063\001\002\000\034\004\053" +
    "\005\046\010\045\011\126\021\056\024\124\034\071\035" +
    "\075\052\050\102\100\103\073\105\066\117\063\001\002" +
    "\000\034\004\053\005\046\010\045\011\126\021\056\024" +
    "\124\034\071\035\075\052\050\102\100\103\073\105\066" +
    "\117\063\001\002\000\034\004\053\005\046\010\045\011" +
    "\126\021\056\024\124\034\071\035\075\052\050\102\100" +
    "\103\073\105\066\117\063\001\002\000\034\004\053\005" +
    "\046\010\045\011\126\021\056\024\124\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\034\004\053\005\046\010\045\011\126" +
    "\021\056\024\124\034\071\035\075\052\050\102\100\103" +
    "\073\105\066\117\063\001\002\000\034\004\053\005\046" +
    "\010\045\011\126\021\056\024\124\034\071\035\075\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\034" +
    "\004\053\005\046\010\045\011\126\021\056\024\124\034" +
    "\071\035\075\052\050\102\100\103\073\105\066\117\063" +
    "\001\002\000\034\004\053\005\046\010\045\011\126\021" +
    "\056\024\124\034\071\035\075\052\050\102\100\103\073" +
    "\105\066\117\063\001\002\000\034\004\053\005\046\010" +
    "\045\011\126\021\056\024\124\034\071\035\075\052\050" +
    "\102\100\103\073\105\066\117\063\001\002\000\034\004" +
    "\053\005\046\010\045\011\126\021\056\024\124\034\071" +
    "\035\075\052\050\102\100\103\073\105\066\117\063\001" +
    "\002\000\034\004\053\005\046\010\045\011\126\021\056" +
    "\024\124\034\071\035\075\052\050\102\100\103\073\105" +
    "\066\117\063\001\002\000\034\004\053\005\046\010\045" +
    "\011\126\021\056\024\124\034\071\035\075\052\050\102" +
    "\100\103\073\105\066\117\063\001\002\000\034\004\053" +
    "\005\046\010\045\011\126\021\056\024\124\034\071\035" +
    "\075\052\050\102\100\103\073\105\066\117\063\001\002" +
    "\000\034\004\053\005\046\010\045\011\126\021\056\024" +
    "\124\034\071\035\075\052\050\102\100\103\073\105\066" +
    "\117\063\001\002\000\072\006\uff67\007\uff67\023\uff67\025" +
    "\uff67\026\uff67\031\uff67\032\uff67\033\uff67\037\uff67\043\uff67" +
    "\044\uff67\053\uff67\060\uff67\067\uff67\070\104\071\116\072" +
    "\uff67\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67\100\uff67" +
    "\101\uff67\104\122\105\112\106\117\107\114\001\002\000" +
    "\100\006\uff76\007\uff76\023\uff76\024\uff76\025\uff76\026\uff76" +
    "\030\uff76\031\uff76\032\uff76\033\uff76\037\uff76\043\uff76\044" +
    "\uff76\053\uff76\060\uff76\063\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100" +
    "\uff76\101\uff76\104\uff76\105\uff76\106\uff76\107\uff76\001\002" +
    "\000\044\025\130\037\111\053\110\070\104\071\116\072" +
    "\123\073\121\074\105\075\106\076\115\077\113\100\120" +
    "\101\107\104\122\105\112\106\117\107\114\001\002\000" +
    "\072\006\uff79\007\uff79\023\uff79\025\uff79\026\uff79\031\uff79" +
    "\032\uff79\033\uff79\037\uff79\043\uff79\044\uff79\053\uff79\060" +
    "\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79" +
    "\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\104\uff79\105" +
    "\uff79\106\uff79\107\uff79\001\002\000\072\006\uff70\007\uff70" +
    "\023\uff70\025\uff70\026\uff70\031\uff70\032\uff70\033\uff70\037" +
    "\uff70\043\uff70\044\uff70\053\uff70\060\uff70\067\uff70\070\104" +
    "\071\116\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70\077" +
    "\uff70\100\uff70\101\uff70\104\uff70\105\uff70\106\117\107\114" +
    "\001\002\000\072\006\uff68\007\uff68\023\uff68\025\uff68\026" +
    "\uff68\031\uff68\032\uff68\033\uff68\037\uff68\043\uff68\044\uff68" +
    "\053\uff68\060\uff68\067\uff68\070\104\071\116\072\uff68\073" +
    "\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68\101\uff68" +
    "\104\122\105\112\106\117\107\114\001\002\000\072\006" +
    "\uff62\007\uff62\023\uff62\025\uff62\026\uff62\031\uff62\032\uff62" +
    "\033\uff62\037\111\043\uff62\044\uff62\053\uff62\060\uff62\067" +
    "\uff62\070\104\071\116\072\123\073\121\074\105\075\106" +
    "\076\115\077\113\100\uff62\101\uff62\104\122\105\112\106" +
    "\117\107\114\001\002\000\072\006\uff6e\007\uff6e\023\uff6e" +
    "\025\uff6e\026\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e\043" +
    "\uff6e\044\uff6e\053\uff6e\060\uff6e\067\uff6e\070\104\071\uff6e" +
    "\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100" +
    "\uff6e\101\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\001\002" +
    "\000\072\006\uff6b\007\uff6b\023\uff6b\025\uff6b\026\uff6b\031" +
    "\uff6b\032\uff6b\033\uff6b\037\uff6b\043\uff6b\044\uff6b\053\uff6b" +
    "\060\uff6b\067\uff6b\070\104\071\uff6b\072\uff6b\073\uff6b\074" +
    "\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\104\uff6b" +
    "\105\uff6b\106\uff6b\107\uff6b\001\002\000\072\006\uff66\007" +
    "\uff66\023\uff66\025\uff66\026\uff66\031\uff66\032\uff66\033\uff66" +
    "\037\uff66\043\uff66\044\uff66\053\uff66\060\uff66\067\uff66\070" +
    "\104\071\116\072\123\073\121\074\105\075\106\076\uff66" +
    "\077\uff66\100\uff66\101\uff66\104\122\105\112\106\117\107" +
    "\114\001\002\000\072\006\uff6d\007\uff6d\023\uff6d\025\uff6d" +
    "\026\uff6d\031\uff6d\032\uff6d\033\uff6d\037\uff6d\043\uff6d\044" +
    "\uff6d\053\uff6d\060\uff6d\067\uff6d\070\104\071\uff6d\072\uff6d" +
    "\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101" +
    "\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d\001\002\000\072" +
    "\006\uff65\007\uff65\023\uff65\025\uff65\026\uff65\031\uff65\032" +
    "\uff65\033\uff65\037\uff65\043\uff65\044\uff65\053\uff65\060\uff65" +
    "\067\uff65\070\104\071\116\072\123\073\121\074\105\075" +
    "\106\076\uff65\077\uff65\100\uff65\101\uff65\104\122\105\112" +
    "\106\117\107\114\001\002\000\072\006\uff6f\007\uff6f\023" +
    "\uff6f\025\uff6f\026\uff6f\031\uff6f\032\uff6f\033\uff6f\037\uff6f" +
    "\043\uff6f\044\uff6f\053\uff6f\060\uff6f\067\uff6f\070\104\071" +
    "\116\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f" +
    "\100\uff6f\101\uff6f\104\uff6f\105\uff6f\106\117\107\114\001" +
    "\002\000\072\006\uff63\007\uff63\023\uff63\025\uff63\026\uff63" +
    "\031\uff63\032\uff63\033\uff63\037\uff63\043\uff63\044\uff63\053" +
    "\uff63\060\uff63\067\uff63\070\104\071\116\072\123\073\121" +
    "\074\105\075\106\076\115\077\113\100\uff63\101\uff63\104" +
    "\122\105\112\106\117\107\114\001\002\000\072\006\uff64" +
    "\007\uff64\023\uff64\025\uff64\026\uff64\031\uff64\032\uff64\033" +
    "\uff64\037\111\043\uff64\044\uff64\053\uff64\060\uff64\067\uff64" +
    "\070\104\071\116\072\123\073\121\074\105\075\106\076" +
    "\115\077\113\100\120\101\107\104\122\105\112\106\117" +
    "\107\114\001\002\000\072\006\uff61\007\uff61\023\uff61\025" +
    "\uff61\026\uff61\031\uff61\032\uff61\033\uff61\037\111\043\uff61" +
    "\044\uff61\053\uff61\060\uff61\067\uff61\070\104\071\116\072" +
    "\123\073\121\074\105\075\106\076\115\077\113\100\uff61" +
    "\101\uff61\104\122\105\112\106\117\107\114\001\002\000" +
    "\072\006\uff69\007\uff69\023\uff69\025\uff69\026\uff69\031\uff69" +
    "\032\uff69\033\uff69\037\uff69\043\uff69\044\uff69\053\uff69\060" +
    "\uff69\067\uff69\070\104\071\116\072\uff69\073\uff69\074\uff69" +
    "\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69\104\122\105" +
    "\112\106\117\107\114\001\002\000\072\006\uff6a\007\uff6a" +
    "\023\uff6a\025\uff6a\026\uff6a\031\uff6a\032\uff6a\033\uff6a\037" +
    "\uff6a\043\uff6a\044\uff6a\053\uff6a\060\uff6a\067\uff6a\070\104" +
    "\071\116\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077" +
    "\uff6a\100\uff6a\101\uff6a\104\122\105\112\106\117\107\114" +
    "\001\002\000\072\006\uff6c\007\uff6c\023\uff6c\025\uff6c\026" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\037\uff6c\043\uff6c\044\uff6c" +
    "\053\uff6c\060\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073" +
    "\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c" +
    "\104\uff6c\105\uff6c\106\uff6c\107\uff6c\001\002\000\034\004" +
    "\053\005\046\010\045\011\126\021\056\024\124\034\071" +
    "\035\075\052\050\102\100\103\073\105\066\117\063\001" +
    "\002\000\044\025\152\037\111\053\110\070\104\071\116" +
    "\072\123\073\121\074\105\075\106\076\115\077\113\100" +
    "\120\101\107\104\122\105\112\106\117\107\114\001\002" +
    "\000\072\006\uffe1\007\uffe1\023\uffe1\025\uffe1\026\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\037\uffe1\043\uffe1\044\uffe1\053\uffe1" +
    "\060\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\104\uffe1" +
    "\105\uffe1\106\uffe1\107\uffe1\001\002\000\034\004\053\005" +
    "\046\010\045\011\126\021\056\024\124\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\044\025\155\037\111\053\110\070\104\071\116\072\123" +
    "\073\121\074\105\075\106\076\115\077\113\100\120\101" +
    "\107\104\122\105\112\106\117\107\114\001\002\000\072" +
    "\006\uffe2\007\uffe2\023\uffe2\025\uffe2\026\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\037\uffe2\043\uffe2\044\uffe2\053\uffe2\060\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\001\002\000\072\006\uff71\007\uff71\023" +
    "\uff71\025\uff71\026\uff71\031\uff71\032\uff71\033\uff71\037\uff71" +
    "\043\uff71\044\uff71\053\uff71\060\uff71\067\uff71\070\uff71\071" +
    "\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71" +
    "\100\uff71\101\uff71\104\uff71\105\uff71\106\uff71\107\uff71\001" +
    "\002\000\034\004\053\005\046\010\045\011\126\021\056" +
    "\024\124\034\071\035\075\052\050\102\100\103\073\105" +
    "\066\117\063\001\002\000\012\011\uffc7\040\uffc7\050\uffc7" +
    "\054\uffc7\001\002\000\044\007\162\037\111\053\110\070" +
    "\104\071\116\072\123\073\121\074\105\075\106\076\115" +
    "\077\113\100\120\101\107\104\122\105\112\106\117\107" +
    "\114\001\002\000\012\011\uffc8\040\uffc8\050\uffc8\054\uffc8" +
    "\001\002\000\004\011\175\001\002\000\034\004\053\005" +
    "\046\010\045\011\126\021\056\024\124\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\006\023\171\031\170\001\002\000\050" +
    "\023\uffe3\025\uffe3\031\uffe3\037\111\053\110\070\104\071" +
    "\116\072\123\073\121\074\105\075\106\076\115\077\113" +
    "\100\120\101\107\104\122\105\112\106\117\107\114\001" +
    "\002\000\100\006\uff75\007\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\030\uff75\031\uff75\032\uff75\033\uff75\037\uff75\043" +
    "\uff75\044\uff75\053\uff75\060\uff75\063\uff75\067\uff75\070\uff75" +
    "\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077" +
    "\uff75\100\uff75\101\uff75\104\uff75\105\uff75\106\uff75\107\uff75" +
    "\001\002\000\034\004\053\005\046\010\045\011\126\021" +
    "\056\024\124\034\071\035\075\052\050\102\100\103\073" +
    "\105\066\117\063\001\002\000\050\023\uffe4\025\uffe4\031" +
    "\uffe4\037\111\053\110\070\104\071\116\072\123\073\121" +
    "\074\105\075\106\076\115\077\113\100\120\101\107\104" +
    "\122\105\112\106\117\107\114\001\002\000\006\023\171" +
    "\025\174\001\002\000\100\006\uff74\007\uff74\023\uff74\024" +
    "\uff74\025\uff74\026\uff74\030\uff74\031\uff74\032\uff74\033\uff74" +
    "\037\uff74\043\uff74\044\uff74\053\uff74\060\uff74\063\uff74\067" +
    "\uff74\070\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74" +
    "\076\uff74\077\uff74\100\uff74\101\uff74\104\uff74\105\uff74\106" +
    "\uff74\107\uff74\001\002\000\100\006\uff73\007\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\030\uff73\031\uff73\032\uff73\033" +
    "\uff73\037\uff73\043\uff73\044\uff73\053\uff73\060\uff73\063\uff73" +
    "\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075" +
    "\uff73\076\uff73\077\uff73\100\uff73\101\uff73\104\uff73\105\uff73" +
    "\106\uff73\107\uff73\001\002\000\034\004\053\005\046\010" +
    "\045\011\126\021\056\024\124\034\071\035\075\052\050" +
    "\102\100\103\073\105\066\117\063\001\002\000\006\023" +
    "\211\031\210\001\002\000\004\031\204\001\002\000\044" +
    "\032\202\037\111\053\110\070\104\071\116\072\123\073" +
    "\121\074\105\075\106\076\115\077\113\100\120\101\107" +
    "\104\122\105\112\106\117\107\114\001\002\000\034\004" +
    "\053\005\046\010\045\011\126\021\056\024\124\034\071" +
    "\035\075\052\050\102\100\103\073\105\066\117\063\001" +
    "\002\000\046\023\uffef\031\uffef\037\111\053\110\070\104" +
    "\071\116\072\123\073\121\074\105\075\106\076\115\077" +
    "\113\100\120\101\107\104\122\105\112\106\117\107\114" +
    "\001\002\000\004\033\205\001\002\000\020\012\076\013" +
    "\072\014\042\015\065\016\077\017\043\020\206\001\002" +
    "\000\010\006\uffda\007\uffda\025\uffda\001\002\000\010\006" +
    "\uffee\007\uffee\025\uffee\001\002\000\004\033\216\001\002" +
    "\000\034\004\053\005\046\010\045\011\126\021\056\024" +
    "\124\034\071\035\075\052\050\102\100\103\073\105\066" +
    "\117\063\001\002\000\006\023\uffeb\031\uffeb\001\002\000" +
    "\006\023\214\031\uffed\001\002\000\034\004\053\005\046" +
    "\010\045\011\126\021\056\024\124\034\071\035\075\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\006" +
    "\023\uffec\031\uffec\001\002\000\024\011\222\012\076\013" +
    "\072\014\042\015\065\016\077\017\043\020\206\027\220" +
    "\001\002\000\010\006\ufff1\007\ufff1\025\ufff1\001\002\000" +
    "\004\030\223\001\002\000\010\006\ufff2\007\ufff2\025\ufff2" +
    "\001\002\000\010\006\ufff0\007\ufff0\025\ufff0\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\004\031\210\001\002\000\006\023\171" +
    "\025\227\001\002\000\046\023\uffe3\025\130\037\111\053" +
    "\110\070\104\071\116\072\123\073\121\074\105\075\106" +
    "\076\115\077\113\100\120\101\107\104\122\105\112\106" +
    "\117\107\114\001\002\000\010\006\uffd7\007\uffd7\025\uffd7" +
    "\001\002\000\034\004\053\005\046\010\045\011\126\021" +
    "\056\024\124\034\071\035\075\052\050\102\100\103\073" +
    "\105\066\117\063\001\002\000\010\006\uffd8\007\uffd8\025" +
    "\uffd8\001\002\000\050\006\ufff5\007\ufff5\025\ufff5\037\111" +
    "\053\110\070\104\071\116\072\123\073\121\074\105\075" +
    "\106\076\115\077\113\100\120\101\107\104\122\105\112" +
    "\106\117\107\114\001\002\000\072\006\uff60\007\uff60\023" +
    "\uff60\025\uff60\026\uff60\031\uff60\032\uff60\033\uff60\037\uff60" +
    "\043\uff60\044\uff60\053\uff60\060\uff60\067\uff60\070\uff60\071" +
    "\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60" +
    "\100\uff60\101\uff60\104\uff60\105\uff60\106\uff60\107\uff60\001" +
    "\002\000\004\067\241\001\002\000\006\011\uffb3\046\uffb3" +
    "\001\002\000\006\011\234\046\237\001\002\000\010\006" +
    "\uffb5\007\uffb5\025\uffb5\001\002\000\006\011\uffb4\046\uffb4" +
    "\001\002\000\054\004\053\005\046\010\045\011\103\012" +
    "\076\013\072\014\042\015\065\016\077\017\043\020\047" +
    "\021\056\024\060\027\061\034\071\035\075\052\050\102" +
    "\100\103\073\105\066\117\063\001\002\000\004\007\243" +
    "\001\002\000\006\011\uffb2\046\uffb2\001\002\000\014\006" +
    "\uffea\007\uffea\023\uffea\025\uffea\067\uffea\001\002\000\006" +
    "\006\254\023\040\001\002\000\016\011\035\040\013\042" +
    "\025\050\023\054\012\062\031\001\002\000\004\007\251" +
    "\001\002\000\016\011\ufff9\040\ufff9\042\ufff9\050\ufff9\054" +
    "\ufff9\062\ufff9\001\002\000\016\011\ufff8\040\ufff8\042\ufff8" +
    "\050\ufff8\054\ufff8\062\ufff8\001\002\000\016\011\ufffa\040" +
    "\ufffa\042\ufffa\050\ufffa\054\ufffa\062\ufffa\001\002\000\004" +
    "\002\ufffc\001\002\000\054\004\053\005\046\010\045\011" +
    "\103\012\076\013\072\014\042\015\065\016\077\017\043" +
    "\020\047\021\056\024\060\027\061\034\071\035\075\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\004" +
    "\007\ufff7\001\002\000\014\011\uffcf\040\uffcf\050\uffcf\054" +
    "\uffcf\062\uffcf\001\002\000\006\023\040\067\263\001\002" +
    "\000\014\011\035\040\013\050\023\054\012\062\031\001" +
    "\002\000\004\002\uffd2\001\002\000\014\011\uffd0\040\uffd0" +
    "\050\uffd0\054\uffd0\062\uffd0\001\002\000\054\004\053\005" +
    "\046\010\045\011\103\012\076\013\072\014\042\015\065" +
    "\016\077\017\043\020\047\021\056\024\060\027\061\034" +
    "\071\035\075\052\050\102\100\103\073\105\066\117\063" +
    "\001\002\000\004\006\265\001\002\000\034\004\053\005" +
    "\046\010\045\011\126\021\056\024\124\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\044\007\267\037\111\053\110\070\104\071\116\072\123" +
    "\073\121\074\105\075\106\076\115\077\113\100\120\101" +
    "\107\104\122\105\112\106\117\107\114\001\002\000\014" +
    "\011\uffce\040\uffce\050\uffce\054\uffce\062\uffce\001\002\000" +
    "\010\040\uffc3\050\uffc3\054\uffc3\001\002\000\010\040\uffc4" +
    "\050\uffc4\054\uffc4\001\002\000\004\002\uffc6\001\002\000" +
    "\004\024\274\001\002\000\010\011\035\025\u0136\062\u0134" +
    "\001\002\000\004\067\276\001\002\000\054\004\053\005" +
    "\046\010\045\011\103\012\076\013\072\014\042\015\065" +
    "\016\077\017\043\020\047\021\056\024\060\027\061\034" +
    "\071\035\075\052\050\102\100\103\073\105\066\117\063" +
    "\001\002\000\004\007\300\001\002\000\006\040\303\062" +
    "\031\001\002\000\010\040\uffbf\050\uffbf\054\uffbf\001\002" +
    "\000\004\040\303\001\002\000\036\011\336\036\324\041" +
    "\312\046\313\047\307\056\322\064\315\065\314\111\333" +
    "\112\331\113\330\114\323\115\326\116\327\001\002\000" +
    "\040\011\uffac\036\uffac\041\uffac\046\uffac\047\uffac\056\uffac" +
    "\061\uffac\064\uffac\065\uffac\111\uffac\112\uffac\113\uffac\114" +
    "\uffac\115\uffac\116\uffac\001\002\000\072\004\uffa4\005\uffa4" +
    "\010\uffa4\011\uffa4\021\uffa4\024\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\041\uffa4\045\uffa4\046\uffa4\047\uffa4\052\uffa4\056\uffa4" +
    "\061\uffa4\064\uffa4\065\uffa4\102\uffa4\103\uffa4\105\uffa4\111" +
    "\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\117\uffa4" +
    "\001\002\000\004\007\u0131\001\002\000\004\011\u0124\001" +
    "\002\000\036\011\336\036\324\041\312\046\u0121\047\307" +
    "\056\322\064\315\065\314\111\333\112\331\113\330\114" +
    "\323\115\326\116\327\001\002\000\072\004\uffa8\005\uffa8" +
    "\010\uffa8\011\uffa8\021\uffa8\024\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\041\uffa8\045\uffa8\046\uffa8\047\uffa8\052\uffa8\056\uffa8" +
    "\061\uffa8\064\uffa8\065\uffa8\102\uffa8\103\uffa8\105\uffa8\111" +
    "\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8" +
    "\001\002\000\034\004\053\005\046\010\045\011\126\021" +
    "\056\024\124\034\071\035\075\052\050\102\100\103\073" +
    "\105\066\117\063\001\002\000\004\007\u010f\001\002\000" +
    "\004\011\u010b\001\002\000\034\004\053\005\046\010\045" +
    "\011\126\021\056\024\124\034\071\035\075\052\050\102" +
    "\100\103\073\105\066\117\063\001\002\000\072\004\uffa3" +
    "\005\uffa3\010\uffa3\011\uffa3\021\uffa3\024\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\041\uffa3\045\uffa3\046\uffa3\047\uffa3\052\uffa3" +
    "\056\uffa3\061\uffa3\064\uffa3\065\uffa3\102\uffa3\103\uffa3\105" +
    "\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3" +
    "\117\uffa3\001\002\000\012\024\374\030\376\063\373\067" +
    "\375\001\002\000\072\004\uffab\005\uffab\010\uffab\011\uffab" +
    "\021\uffab\024\uffab\034\uffab\035\uffab\036\uffab\041\uffab\045" +
    "\uffab\046\uffab\047\uffab\052\uffab\056\uffab\061\uffab\064\uffab" +
    "\065\uffab\102\uffab\103\uffab\105\uffab\111\uffab\112\uffab\113" +
    "\uffab\114\uffab\115\uffab\116\uffab\117\uffab\001\002\000\072" +
    "\004\uffa5\005\uffa5\010\uffa5\011\uffa5\021\uffa5\024\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\041\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\052\uffa5\056\uffa5\061\uffa5\064\uffa5\065\uffa5\102\uffa5\103" +
    "\uffa5\105\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5" +
    "\116\uffa5\117\uffa5\001\002\000\034\011\336\036\324\041" +
    "\312\047\307\056\322\064\315\065\314\111\333\112\331" +
    "\113\330\114\323\115\326\116\327\001\002\000\004\007" +
    "\365\001\002\000\004\024\361\001\002\000\004\007\360" +
    "\001\002\000\004\024\354\001\002\000\004\024\350\001" +
    "\002\000\004\007\347\001\002\000\004\007\346\001\002" +
    "\000\072\004\uffa6\005\uffa6\010\uffa6\011\uffa6\021\uffa6\024" +
    "\uffa6\034\uffa6\035\uffa6\036\uffa6\041\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\052\uffa6\056\uffa6\061\uffa6\064\uffa6\065\uffa6\102" +
    "\uffa6\103\uffa6\105\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6" +
    "\115\uffa6\116\uffa6\117\uffa6\001\002\000\004\024\342\001" +
    "\002\000\072\004\uffa7\005\uffa7\010\uffa7\011\uffa7\021\uffa7" +
    "\024\uffa7\034\uffa7\035\uffa7\036\uffa7\041\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\052\uffa7\056\uffa7\061\uffa7\064\uffa7\065\uffa7" +
    "\102\uffa7\103\uffa7\105\uffa7\111\uffa7\112\uffa7\113\uffa7\114" +
    "\uffa7\115\uffa7\116\uffa7\117\uffa7\001\002\000\072\004\uffa9" +
    "\005\uffa9\010\uffa9\011\uffa9\021\uffa9\024\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\041\uffa9\045\uffa9\046\uffa9\047\uffa9\052\uffa9" +
    "\056\uffa9\061\uffa9\064\uffa9\065\uffa9\102\uffa9\103\uffa9\105" +
    "\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116\uffa9" +
    "\117\uffa9\001\002\000\012\024\337\030\uffe8\063\uffe8\067" +
    "\uffe8\001\002\000\034\004\053\005\046\010\045\011\126" +
    "\021\056\024\124\034\071\035\075\052\050\102\100\103" +
    "\073\105\066\117\063\001\002\000\006\023\171\025\341" +
    "\001\002\000\004\007\uff72\001\002\000\004\011\035\001" +
    "\002\000\006\023\040\025\344\001\002\000\004\007\345" +
    "\001\002\000\072\004\uff7e\005\uff7e\010\uff7e\011\uff7e\021" +
    "\uff7e\024\uff7e\034\uff7e\035\uff7e\036\uff7e\041\uff7e\045\uff7e" +
    "\046\uff7e\047\uff7e\052\uff7e\056\uff7e\061\uff7e\064\uff7e\065" +
    "\uff7e\102\uff7e\103\uff7e\105\uff7e\111\uff7e\112\uff7e\113\uff7e" +
    "\114\uff7e\115\uff7e\116\uff7e\117\uff7e\001\002\000\072\004" +
    "\uff9d\005\uff9d\010\uff9d\011\uff9d\021\uff9d\024\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\041\uff9d\045\uff9d\046\uff9d\047\uff9d\052" +
    "\uff9d\056\uff9d\061\uff9d\064\uff9d\065\uff9d\102\uff9d\103\uff9d" +
    "\105\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\115\uff9d\116" +
    "\uff9d\117\uff9d\001\002\000\072\004\uff9c\005\uff9c\010\uff9c" +
    "\011\uff9c\021\uff9c\024\uff9c\034\uff9c\035\uff9c\036\uff9c\041" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\052\uff9c\056\uff9c\061\uff9c" +
    "\064\uff9c\065\uff9c\102\uff9c\103\uff9c\105\uff9c\111\uff9c\112" +
    "\uff9c\113\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\001\002" +
    "\000\034\004\053\005\046\010\045\011\126\021\056\024" +
    "\124\034\071\035\075\052\050\102\100\103\073\105\066" +
    "\117\063\001\002\000\006\023\171\025\352\001\002\000" +
    "\004\007\353\001\002\000\072\004\uff7f\005\uff7f\010\uff7f" +
    "\011\uff7f\021\uff7f\024\uff7f\034\uff7f\035\uff7f\036\uff7f\041" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\052\uff7f\056\uff7f\061\uff7f" +
    "\064\uff7f\065\uff7f\102\uff7f\103\uff7f\105\uff7f\111\uff7f\112" +
    "\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f\117\uff7f\001\002" +
    "\000\034\004\053\005\046\010\045\011\126\021\056\024" +
    "\124\034\071\035\075\052\050\102\100\103\073\105\066" +
    "\117\063\001\002\000\006\023\171\025\356\001\002\000" +
    "\004\007\357\001\002\000\072\004\uff80\005\uff80\010\uff80" +
    "\011\uff80\021\uff80\024\uff80\034\uff80\035\uff80\036\uff80\041" +
    "\uff80\045\uff80\046\uff80\047\uff80\052\uff80\056\uff80\061\uff80" +
    "\064\uff80\065\uff80\102\uff80\103\uff80\105\uff80\111\uff80\112" +
    "\uff80\113\uff80\114\uff80\115\uff80\116\uff80\117\uff80\001\002" +
    "\000\072\004\uffaa\005\uffaa\010\uffaa\011\uffaa\021\uffaa\024" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\052\uffaa\056\uffaa\061\uffaa\064\uffaa\065\uffaa\102" +
    "\uffaa\103\uffaa\105\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa" +
    "\115\uffaa\116\uffaa\117\uffaa\001\002\000\034\004\053\005" +
    "\046\010\045\011\126\021\056\024\124\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\044\025\363\037\111\053\110\070\104\071\116\072\123" +
    "\073\121\074\105\075\106\076\115\077\113\100\120\101" +
    "\107\104\122\105\112\106\117\107\114\001\002\000\004" +
    "\007\364\001\002\000\072\004\uffa2\005\uffa2\010\uffa2\011" +
    "\uffa2\021\uffa2\024\uffa2\034\uffa2\035\uffa2\036\uffa2\041\uffa2" +
    "\045\uffa2\046\uffa2\047\uffa2\052\uffa2\056\uffa2\061\uffa2\064" +
    "\uffa2\065\uffa2\102\uffa2\103\uffa2\105\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2\001\002\000" +
    "\072\004\uff9b\005\uff9b\010\uff9b\011\uff9b\021\uff9b\024\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\041\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\052\uff9b\056\uff9b\061\uff9b\064\uff9b\065\uff9b\102\uff9b" +
    "\103\uff9b\105\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115" +
    "\uff9b\116\uff9b\117\uff9b\001\002\000\036\011\336\036\324" +
    "\041\312\047\307\056\322\061\370\064\315\065\314\111" +
    "\333\112\331\113\330\114\323\115\326\116\327\001\002" +
    "\000\040\011\uffad\036\uffad\041\uffad\046\uffad\047\uffad\056" +
    "\uffad\061\uffad\064\uffad\065\uffad\111\uffad\112\uffad\113\uffad" +
    "\114\uffad\115\uffad\116\uffad\001\002\000\034\004\053\005" +
    "\046\010\045\011\126\021\056\024\124\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\044\007\372\037\111\053\110\070\104\071\116\072\123" +
    "\073\121\074\105\075\106\076\115\077\113\100\120\101" +
    "\107\104\122\105\112\106\117\107\114\001\002\000\072" +
    "\004\uff85\005\uff85\010\uff85\011\uff85\021\uff85\024\uff85\034" +
    "\uff85\035\uff85\036\uff85\041\uff85\045\uff85\046\uff85\047\uff85" +
    "\052\uff85\056\uff85\061\uff85\064\uff85\065\uff85\102\uff85\103" +
    "\uff85\105\uff85\111\uff85\112\uff85\113\uff85\114\uff85\115\uff85" +
    "\116\uff85\117\uff85\001\002\000\004\011\u0105\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\004\006\u0101\001\002\000\034\004\053" +
    "\005\046\010\045\011\126\021\056\024\124\034\071\035" +
    "\075\052\050\102\100\103\073\105\066\117\063\001\002" +
    "\000\006\023\171\031\u0100\001\002\000\012\024\uffe7\030" +
    "\uffe7\063\uffe7\067\uffe7\001\002\000\034\004\053\005\046" +
    "\010\045\011\126\021\056\024\124\034\071\035\075\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\050" +
    "\007\uff9e\037\111\044\uff9e\053\110\060\uff9e\070\104\071" +
    "\116\072\123\073\121\074\105\075\106\076\115\077\113" +
    "\100\120\101\107\104\122\105\112\106\117\107\114\001" +
    "\002\000\006\023\171\025\u0104\001\002\000\012\024\uffe6" +
    "\030\uffe6\063\uffe6\067\uffe6\001\002\000\012\024\uffe5\030" +
    "\uffe5\063\uffe5\067\uffe5\001\002\000\044\037\111\043\u0107" +
    "\053\110\070\104\071\116\072\123\073\121\074\105\075" +
    "\106\076\115\077\113\100\120\101\107\104\122\105\112" +
    "\106\117\107\114\001\002\000\036\011\336\036\324\040" +
    "\303\041\312\047\307\056\322\064\315\065\314\111\333" +
    "\112\331\113\330\114\323\115\326\116\327\001\002\000" +
    "\004\007\u010a\001\002\000\072\004\uff86\005\uff86\010\uff86" +
    "\011\uff86\021\uff86\024\uff86\034\uff86\035\uff86\036\uff86\041" +
    "\uff86\045\uff86\046\uff86\047\uff86\052\uff86\056\uff86\061\uff86" +
    "\064\uff86\065\uff86\102\uff86\103\uff86\105\uff86\111\uff86\112" +
    "\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86\001\002" +
    "\000\072\004\uff87\005\uff87\010\uff87\011\uff87\021\uff87\024" +
    "\uff87\034\uff87\035\uff87\036\uff87\041\uff87\045\uff87\046\uff87" +
    "\047\uff87\052\uff87\056\uff87\061\uff87\064\uff87\065\uff87\102" +
    "\uff87\103\uff87\105\uff87\111\uff87\112\uff87\113\uff87\114\uff87" +
    "\115\uff87\116\uff87\117\uff87\001\002\000\004\043\u010c\001" +
    "\002\000\036\011\336\036\324\040\303\041\312\047\307" +
    "\056\322\064\315\065\314\111\333\112\331\113\330\114" +
    "\323\115\326\116\327\001\002\000\072\004\uffa0\005\uffa0" +
    "\010\uffa0\011\uffa0\021\uffa0\024\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\041\uffa0\045\uffa0\046\uffa0\047\uffa0\052\uffa0\056\uffa0" +
    "\061\uffa0\064\uffa0\065\uffa0\102\uffa0\103\uffa0\105\uffa0\111" +
    "\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0" +
    "\001\002\000\072\004\uff9f\005\uff9f\010\uff9f\011\uff9f\021" +
    "\uff9f\024\uff9f\034\uff9f\035\uff9f\036\uff9f\041\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\052\uff9f\056\uff9f\061\uff9f\064\uff9f\065" +
    "\uff9f\102\uff9f\103\uff9f\105\uff9f\111\uff9f\112\uff9f\113\uff9f" +
    "\114\uff9f\115\uff9f\116\uff9f\117\uff9f\001\002\000\102\004" +
    "\uffae\005\uffae\007\uffae\010\uffae\011\uffae\021\uffae\024\uffae" +
    "\034\uffae\035\uffae\036\uffae\040\uffae\041\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\052\uffae\054\uffae\056\uffae\061\uffae" +
    "\064\uffae\065\uffae\102\uffae\103\uffae\105\uffae\111\uffae\112" +
    "\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117\uffae\001\002" +
    "\000\044\033\u0111\037\111\053\110\070\104\071\116\072" +
    "\123\073\121\074\105\075\106\076\115\077\113\100\120" +
    "\101\107\104\122\105\112\106\117\107\114\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\040\004\053\005\046\010\045\011\126" +
    "\021\056\024\124\034\071\035\075\045\u0119\046\u0118\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\040" +
    "\004\uff8c\005\uff8c\010\uff8c\011\uff8c\021\uff8c\024\uff8c\034" +
    "\uff8c\035\uff8c\045\uff8c\046\uff8c\052\uff8c\102\uff8c\103\uff8c" +
    "\105\uff8c\117\uff8c\001\002\000\044\037\111\053\110\067" +
    "\u0115\070\104\071\116\072\123\073\121\074\105\075\106" +
    "\076\115\077\113\100\120\101\107\104\122\105\112\106" +
    "\117\107\114\001\002\000\036\011\336\036\324\040\303" +
    "\041\312\047\307\056\322\064\315\065\314\111\333\112" +
    "\331\113\330\114\323\115\326\116\327\001\002\000\040" +
    "\004\uff8a\005\uff8a\010\uff8a\011\uff8a\021\uff8a\024\uff8a\034" +
    "\uff8a\035\uff8a\045\uff8a\046\uff8a\052\uff8a\102\uff8a\103\uff8a" +
    "\105\uff8a\117\uff8a\001\002\000\040\004\uff8b\005\uff8b\010" +
    "\uff8b\011\uff8b\021\uff8b\024\uff8b\034\uff8b\035\uff8b\045\uff8b" +
    "\046\uff8b\052\uff8b\102\uff8b\103\uff8b\105\uff8b\117\uff8b\001" +
    "\002\000\004\007\u0120\001\002\000\036\011\336\036\324" +
    "\040\303\041\312\047\307\056\322\064\315\065\314\111" +
    "\333\112\331\113\330\114\323\115\326\116\327\001\002" +
    "\000\004\046\u011c\001\002\000\040\004\uff8d\005\uff8d\010" +
    "\uff8d\011\uff8d\021\uff8d\024\uff8d\034\uff8d\035\uff8d\045\uff8d" +
    "\046\uff8d\052\uff8d\102\uff8d\103\uff8d\105\uff8d\117\uff8d\001" +
    "\002\000\004\007\u011d\001\002\000\072\004\uff8e\005\uff8e" +
    "\010\uff8e\011\uff8e\021\uff8e\024\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\041\uff8e\045\uff8e\046\uff8e\047\uff8e\052\uff8e\056\uff8e" +
    "\061\uff8e\064\uff8e\065\uff8e\102\uff8e\103\uff8e\105\uff8e\111" +
    "\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e" +
    "\001\002\000\004\046\uff88\001\002\000\004\046\uff89\001" +
    "\002\000\072\004\uff8f\005\uff8f\010\uff8f\011\uff8f\021\uff8f" +
    "\024\uff8f\034\uff8f\035\uff8f\036\uff8f\041\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\052\uff8f\056\uff8f\061\uff8f\064\uff8f\065\uff8f" +
    "\102\uff8f\103\uff8f\105\uff8f\111\uff8f\112\uff8f\113\uff8f\114" +
    "\uff8f\115\uff8f\116\uff8f\117\uff8f\001\002\000\004\007\u0122" +
    "\001\002\000\102\004\uffaf\005\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\021\uffaf\024\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf" +
    "\041\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf\054" +
    "\uffaf\056\uffaf\061\uffaf\064\uffaf\065\uffaf\102\uffaf\103\uffaf" +
    "\105\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\116" +
    "\uffaf\117\uffaf\001\002\000\006\044\u0125\060\u0126\001\002" +
    "\000\012\024\uffe8\030\uffe8\063\uffe8\067\uffe8\001\002\000" +
    "\034\004\053\005\046\010\045\011\126\021\056\024\124" +
    "\034\071\035\075\052\050\102\100\103\073\105\066\117" +
    "\063\001\002\000\034\004\053\005\046\010\045\011\126" +
    "\021\056\024\124\034\071\035\075\052\050\102\100\103" +
    "\073\105\066\117\063\001\002\000\044\037\111\043\u0128" +
    "\053\110\070\104\071\116\072\123\073\121\074\105\075" +
    "\106\076\115\077\113\100\120\101\107\104\122\105\112" +
    "\106\117\107\114\001\002\000\036\011\336\036\324\040" +
    "\303\041\312\047\307\056\322\064\315\065\314\111\333" +
    "\112\331\113\330\114\323\115\326\116\327\001\002\000" +
    "\004\007\u012b\001\002\000\072\004\uff82\005\uff82\010\uff82" +
    "\011\uff82\021\uff82\024\uff82\034\uff82\035\uff82\036\uff82\041" +
    "\uff82\045\uff82\046\uff82\047\uff82\052\uff82\056\uff82\061\uff82" +
    "\064\uff82\065\uff82\102\uff82\103\uff82\105\uff82\111\uff82\112" +
    "\uff82\113\uff82\114\uff82\115\uff82\116\uff82\117\uff82\001\002" +
    "\000\072\004\uff84\005\uff84\010\uff84\011\uff84\021\uff84\024" +
    "\uff84\034\uff84\035\uff84\036\uff84\041\uff84\045\uff84\046\uff84" +
    "\047\uff84\052\uff84\056\uff84\061\uff84\064\uff84\065\uff84\102" +
    "\uff84\103\uff84\105\uff84\111\uff84\112\uff84\113\uff84\114\uff84" +
    "\115\uff84\116\uff84\117\uff84\001\002\000\044\037\111\043" +
    "\u012d\053\110\070\104\071\116\072\123\073\121\074\105" +
    "\075\106\076\115\077\113\100\120\101\107\104\122\105" +
    "\112\106\117\107\114\001\002\000\036\011\336\036\324" +
    "\040\303\041\312\047\307\056\322\064\315\065\314\111" +
    "\333\112\331\113\330\114\323\115\326\116\327\001\002" +
    "\000\004\007\u0130\001\002\000\072\004\uff81\005\uff81\010" +
    "\uff81\011\uff81\021\uff81\024\uff81\034\uff81\035\uff81\036\uff81" +
    "\041\uff81\045\uff81\046\uff81\047\uff81\052\uff81\056\uff81\061" +
    "\uff81\064\uff81\065\uff81\102\uff81\103\uff81\105\uff81\111\uff81" +
    "\112\uff81\113\uff81\114\uff81\115\uff81\116\uff81\117\uff81\001" +
    "\002\000\072\004\uff83\005\uff83\010\uff83\011\uff83\021\uff83" +
    "\024\uff83\034\uff83\035\uff83\036\uff83\041\uff83\045\uff83\046" +
    "\uff83\047\uff83\052\uff83\056\uff83\061\uff83\064\uff83\065\uff83" +
    "\102\uff83\103\uff83\105\uff83\111\uff83\112\uff83\113\uff83\114" +
    "\uff83\115\uff83\116\uff83\117\uff83\001\002\000\072\004\uffa1" +
    "\005\uffa1\010\uffa1\011\uffa1\021\uffa1\024\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\041\uffa1\045\uffa1\046\uffa1\047\uffa1\052\uffa1" +
    "\056\uffa1\061\uffa1\064\uffa1\065\uffa1\102\uffa1\103\uffa1\105" +
    "\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1" +
    "\117\uffa1\001\002\000\010\040\uffc0\050\uffc0\054\uffc0\001" +
    "\002\000\006\023\040\067\u0143\001\002\000\004\011\035" +
    "\001\002\000\006\007\u0137\025\u0138\001\002\000\006\007" +
    "\uffbc\067\uffbc\001\002\000\006\011\035\062\u013a\001\002" +
    "\000\006\007\uffbd\067\uffbd\001\002\000\006\023\040\067" +
    "\u013e\001\002\000\004\011\035\001\002\000\006\023\040" +
    "\067\u013c\001\002\000\054\004\053\005\046\010\045\011" +
    "\103\012\076\013\072\014\042\015\065\016\077\017\043" +
    "\020\047\021\056\024\060\027\061\034\071\035\075\052" +
    "\050\102\100\103\073\105\066\117\063\001\002\000\006" +
    "\007\uffba\025\uffba\001\002\000\054\004\053\005\046\010" +
    "\045\011\103\012\076\013\072\014\042\015\065\016\077" +
    "\017\043\020\047\021\056\024\060\027\061\034\071\035" +
    "\075\052\050\102\100\103\073\105\066\117\063\001\002" +
    "\000\006\007\uffbb\025\uffbb\001\002\000\006\023\040\067" +
    "\u0141\001\002\000\054\004\053\005\046\010\045\011\103" +
    "\012\076\013\072\014\042\015\065\016\077\017\043\020" +
    "\047\021\056\024\060\027\061\034\071\035\075\052\050" +
    "\102\100\103\073\105\066\117\063\001\002\000\006\007" +
    "\uffb8\025\uffb8\001\002\000\054\004\053\005\046\010\045" +
    "\011\103\012\076\013\072\014\042\015\065\016\077\017" +
    "\043\020\047\021\056\024\060\027\061\034\071\035\075" +
    "\052\050\102\100\103\073\105\066\117\063\001\002\000" +
    "\006\007\uffb9\025\uffb9\001\002\000\006\007\u0146\023\040" +
    "\001\002\000\016\022\027\040\013\042\025\050\023\054" +
    "\012\062\031\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\uffcd\001\002\000\036\011\336\036\324\041\312\046" +
    "\u014c\047\307\056\322\064\315\065\314\111\333\112\331" +
    "\113\330\114\323\115\326\116\327\001\002\000\004\063" +
    "\u014b\001\002\000\004\002\uffb0\001\002\000\004\063\u014d" +
    "\001\002\000\004\002\uffb1\001\002\000\004\024\274\001" +
    "\002\000\004\007\u0150\001\002\000\006\040\303\062\031" +
    "\001\002\000\010\040\uffb6\050\uffb6\054\uffb6\001\002\000" +
    "\004\040\303\001\002\000\010\040\uffbe\050\uffbe\054\uffbe" +
    "\001\002\000\010\040\uffb7\050\uffb7\054\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\006\002\004\027\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\021\026\023\030\013\031" +
    "\031\034\014\035\016\037\017\040\025\061\027\063\015" +
    "\001\001\000\002\001\001\000\034\006\317\013\334\015" +
    "\310\016\333\017\331\020\304\024\315\033\u0148\050\316" +
    "\057\303\060\324\064\320\072\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\021" +
    "\026\023\034\u0147\061\027\063\015\001\001\000\002\001" +
    "\001\000\004\043\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\267\061\270\063\271\001\001\000" +
    "\010\041\257\043\256\056\255\001\001\000\002\001\001" +
    "\000\012\032\245\043\244\053\247\055\246\001\001\000" +
    "\002\001\001\000\010\036\035\043\033\054\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\033\054\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\047\073\052\061\065" +
    "\043\066\053\067\066\070\054\071\101\073\051\075\100" +
    "\076\067\077\063\100\056\101\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\046\235\103\234\001\001\000" +
    "\020\052\061\065\043\066\053\067\066\070\054\071\232" +
    "\075\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\051\224\052\061\065" +
    "\043\066\053\067\066\070\054\071\225\075\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\052\061\065\043" +
    "\066\053\067\066\070\054\071\155\075\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\052\061\065\043\066\053\067\066\070\054\071\146" +
    "\075\100\001\001\000\020\052\061\065\043\066\053\067" +
    "\066\070\054\071\145\075\100\001\001\000\020\052\061" +
    "\065\043\066\053\067\066\070\054\071\144\075\100\001" +
    "\001\000\020\052\061\065\043\066\053\067\066\070\054" +
    "\071\143\075\100\001\001\000\020\052\061\065\043\066" +
    "\053\067\066\070\054\071\142\075\100\001\001\000\020" +
    "\052\061\065\043\066\053\067\066\070\054\071\141\075" +
    "\100\001\001\000\020\052\061\065\043\066\053\067\066" +
    "\070\054\071\140\075\100\001\001\000\020\052\061\065" +
    "\043\066\053\067\066\070\054\071\137\075\100\001\001" +
    "\000\020\052\061\065\043\066\053\067\066\070\054\071" +
    "\136\075\100\001\001\000\020\052\061\065\043\066\053" +
    "\067\066\070\054\071\135\075\100\001\001\000\020\052" +
    "\061\065\043\066\053\067\066\070\054\071\134\075\100" +
    "\001\001\000\020\052\061\065\043\066\053\067\066\070" +
    "\054\071\133\075\100\001\001\000\020\052\061\065\043" +
    "\066\053\067\066\070\054\071\132\075\100\001\001\000" +
    "\020\052\061\065\043\066\053\067\066\070\054\071\131" +
    "\075\100\001\001\000\020\052\061\065\043\066\053\067" +
    "\066\070\054\071\130\075\100\001\001\000\020\052\061" +
    "\065\043\066\053\067\066\070\054\071\124\075\100\001" +
    "\001\000\020\052\061\065\043\066\053\067\066\070\054" +
    "\071\126\075\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\052\061\065\043\066\053\067" +
    "\066\070\054\071\150\075\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\052\061\065\043\066\053\067" +
    "\066\070\054\071\153\075\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\061\065" +
    "\043\066\053\067\066\070\054\071\160\075\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\051\172\052\061\065\043\066\053" +
    "\067\066\070\054\071\166\075\100\001\001\000\022\051" +
    "\165\052\061\065\043\066\053\067\066\070\054\071\166" +
    "\075\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\052\061\065\043\066\053\067\066" +
    "\070\054\071\171\075\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\045\177\052\061\065\043\066\053\067\066\070\054\071" +
    "\200\075\100\102\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\052\061\065\043\066" +
    "\053\067\066\070\054\071\202\075\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\044\212\052\061\065\043\066\053\067\066\070\054\071" +
    "\200\075\100\102\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\052\061\065\043\066\053\067\066\070" +
    "\054\071\200\075\100\102\214\001\001\000\002\001\001" +
    "\000\006\076\220\100\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\052\061\065\043\066\053\067\066\070\054\071\200\075" +
    "\100\102\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\052\061\065" +
    "\043\066\053\067\066\070\054\071\231\074\230\075\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\047" +
    "\073\052\061\065\043\066\053\067\066\070\054\071\101" +
    "\073\051\075\100\076\067\077\241\100\056\101\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\021\026\023\034\014\035" +
    "\016\037\017\040\252\043\244\053\251\055\246\061\027" +
    "\063\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\047\073\052\061\065\043\066\053\067\066\070\054\071" +
    "\101\073\051\075\100\076\067\077\254\100\056\101\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\021\026\023\034\014\035\016\037\260" +
    "\043\256\056\261\061\027\063\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\047\073\052\061\065\043" +
    "\066\053\067\066\070\054\071\101\073\051\075\100\076" +
    "\067\077\263\100\056\101\050\001\001\000\002\001\001" +
    "\000\020\052\061\065\043\066\053\067\066\070\054\071" +
    "\265\075\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\274\001\001\000\006\043\u0132\105\u0134\001\001" +
    "\000\002\001\001\000\034\047\073\052\061\065\043\066" +
    "\053\067\066\070\054\071\101\073\051\075\100\076\067" +
    "\077\276\100\056\101\050\001\001\000\002\001\001\000" +
    "\006\035\301\042\300\001\001\000\002\001\001\000\004" +
    "\042\u0131\001\001\000\034\006\317\013\334\015\310\016" +
    "\333\017\331\020\304\024\315\033\307\050\316\057\303" +
    "\060\324\064\320\072\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\050\316\060\u0122" +
    "\001\001\000\032\006\317\013\334\015\310\016\333\017" +
    "\331\020\304\024\315\050\316\057\366\060\324\064\320" +
    "\072\305\001\001\000\002\001\001\000\020\052\061\065" +
    "\043\066\053\067\066\070\054\071\u010f\075\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\061\065" +
    "\043\066\053\067\066\070\054\071\u0105\075\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\317\013\334\015\310\016\333" +
    "\017\331\020\304\024\315\033\365\050\316\057\303\060" +
    "\324\064\320\072\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\051\337\052\061\065\043\066\053" +
    "\067\066\070\054\071\166\075\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\051\350\052\061\065\043" +
    "\066\053\067\066\070\054\071\166\075\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\051\354\052\061\065\043\066\053\067\066\070\054\071" +
    "\166\075\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\061\065" +
    "\043\066\053\067\066\070\054\071\361\075\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\317\013\334\015\310\016\333" +
    "\017\331\020\304\024\315\050\316\057\366\060\324\064" +
    "\320\072\305\001\001\000\002\001\001\000\020\052\061" +
    "\065\043\066\053\067\066\070\054\071\370\075\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\051\u0102\052\061\065\043\066\053\067\066\070" +
    "\054\071\166\075\100\001\001\000\002\001\001\000\022" +
    "\051\376\052\061\065\043\066\053\067\066\070\054\071" +
    "\166\075\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\052\061\065\043\066\053\067\066\070\054\071" +
    "\u0101\075\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\317\013\334\015\310\016\333\017\331\020\304" +
    "\024\315\042\u0107\050\316\057\u0108\060\324\064\320\072" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\317\013\334\015" +
    "\310\016\333\017\331\020\304\024\315\042\u010c\050\316" +
    "\057\u010d\060\324\064\320\072\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\021\u0112\022\u0111\052\061\065\043\066\053\067" +
    "\066\070\054\071\u0113\075\100\001\001\000\024\021\u011a" +
    "\023\u0119\052\061\065\043\066\053\067\066\070\054\071" +
    "\u0113\075\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\317\013\334\015\310\016\333\017\331\020" +
    "\304\024\315\042\u0115\050\316\057\u0116\060\324\064\320" +
    "\072\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\317\013\334\015\310\016\333" +
    "\017\331\020\304\024\315\042\u011d\050\316\057\u011e\060" +
    "\324\064\320\072\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\052\061\065\043\066\053\067\066\070\054\071\u012b" +
    "\075\100\001\001\000\020\052\061\065\043\066\053\067" +
    "\066\070\054\071\u0126\075\100\001\001\000\002\001\001" +
    "\000\034\006\317\013\334\015\310\016\333\017\331\020" +
    "\304\024\315\042\u0128\050\316\057\u0129\060\324\064\320" +
    "\072\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\317\013\334" +
    "\015\310\016\333\017\331\020\304\024\315\042\u012d\050" +
    "\316\057\u012e\060\324\064\320\072\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u013f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u013a\001\001\000\002\001\001\000\034\047\073\052" +
    "\061\065\043\066\053\067\066\070\054\071\101\073\051" +
    "\075\100\076\067\077\u013c\100\056\101\050\001\001\000" +
    "\002\001\001\000\034\047\073\052\061\065\043\066\053" +
    "\067\066\070\054\071\101\073\051\075\100\076\067\077" +
    "\u013e\100\056\101\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\047\073\052\061\065\043\066\053\067" +
    "\066\070\054\071\101\073\051\075\100\076\067\077\u0141" +
    "\100\056\101\050\001\001\000\002\001\001\000\034\047" +
    "\073\052\061\065\043\066\053\067\066\070\054\071\101" +
    "\073\051\075\100\076\067\077\u0143\100\056\101\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\021" +
    "\026\023\031\u0146\034\014\035\016\037\017\040\025\061" +
    "\027\063\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\317\013\334\015\310\016\333\017\331\020" +
    "\304\024\315\050\316\057\366\060\324\064\320\072\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u014e\001\001\000\002" +
    "\001\001\000\010\005\u0152\035\u0151\042\u0150\001\001\000" +
    "\002\001\001\000\004\042\u0153\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Tree tree;
    public Tree getArbol() {
            return tree;
    }
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
            DosLang.errores.add(new Excepcion(TIPOERROR.SINTACTICO, "No se esperaba el token: "+s.value, s.left, s.right));
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PRIMITIVO ::= nil 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Nil()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PRIMITIVO ::= decimal 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Double(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PRIMITIVO ::= numero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(new Integer(e+"")); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PRIMITIVO ::= falso 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(false); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PRIMITIVO ::= verdadero 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(true); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PRIMITIVO ::= caracter 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PRIMITIVO ::= cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Primitivo(e.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LOGICA ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.NOT, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LOGICA ::= EXPRESION nor EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NOR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LOGICA ::= EXPRESION nand EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.NAND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LOGICA ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.AND, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LOGICA ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.OR, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOGICA",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // RELACIONAL ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIFERENTE_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // RELACIONAL ::= EXPRESION igualacion EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.IGUAL_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // RELACIONAL ::= EXPRESION menorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RELACIONAL ::= EXPRESION menorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MENOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RELACIONAL ::= EXPRESION mayorigual EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_IGUAL, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RELACIONAL ::= EXPRESION mayorque EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MAYOR_QUE, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RELACIONAL",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ARITMETICA ::= EXPRESION modulo EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.POTENCIA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.DIVISION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.MULTIPLICACION, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.RESTA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, e1, Operador.SUMA, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ARITMETICA ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Operacion(e, Operador.MENOS_UNARIO, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LLAMADA ::= identificador parenI LISTA_EXPRESION parenD 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLAMADA",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ACCESO ::= ACCESO punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCESO ::= ACCESO parenI LISTA_EXPRESION parenD 
            {
              ArrayList<Expresion> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ACCESO ::= ACCESO corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; RESULT.add(new AccesoArreglo(e1));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ACCESO ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, true, eleft,eright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ACCESO",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= MEMORIA_VIRTUAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= ACCESO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Acceso(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= PRIMITIVO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= LOGICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= ARITMETICA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // READ ::= leer parenI LISTA_IDENTIFICADORES parenD pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("READ",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WRITE ::= escribirln parenI LISTA_EXPRESION parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 RESULT = new Writeln(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WRITE ::= escribir parenI LISTA_EXPRESION parenD pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 RESULT = new Write(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FOR ::= para ASIGNACION downto EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FOR ::= para ASIGNACION to EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FOR ::= para ASIGNACION downto EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FOR ::= para ASIGNACION to EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // REPEAT ::= repeat LISTA_INSTRUCCIONES until EXPRESION pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REPEAT",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WHILE ::= mientras EXPRESION hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WHILE ::= mientras EXPRESION hacer BLOQUE_INSTRUCCIONES pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DEFECTO ::= sino BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DEFECTO ::= sino INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DEFECTO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE ::= EXPRESION dosPuntos BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE ::= EXPRESION dosPuntos INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASE",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASELIST ::= CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASELIST ::= CASELIST CASE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CASELIST",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SWITCH ::= caso EXPRESION of CASELIST DEFECTO end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SWITCH ::= caso EXPRESION of CASELIST end pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSTRUCCIONESIF ::= begin end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INSTRUCCIONESIF ::= begin LISTA_INSTRUCCIONES end 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESIF",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INSIF ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSIF ::= INSTRUCCIONESIF pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSIF ::= INSTRUCCIONESIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSIF",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTAIF ::= sino si EXPRESION then INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTAIF",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTAIF ::= LISTAIF sino si EXPRESION then INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTAIF",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SI ::= si EXPRESION then INSIF LISTAIF sino INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SI ::= si EXPRESION then INSIF LISTAIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SI ::= si EXPRESION then INSIF sino INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SI ::= si EXPRESION then INSIF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SI",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TRANSFERENCIA ::= salir pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TRANSFERENCIA ::= continuar pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TRANSFERENCIA ::= detener pComa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION ::= VARIABLE dosPuntos igual EXPRESION 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Asignacion(new AccesoVariable(e, eleft, eright), e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WITH ::= con identificador hacer INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WITH ::= con identificador hacer BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WITH",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCCION ::= LLAMADA pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCCION ::= free parenI EXPRESION parenD pComa 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCCION ::= SWITCH 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCCION ::= READ 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCION ::= WRITE 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCION ::= FOR 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCION ::= REPEAT 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCION ::= WHILE 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCION ::= TRANSFERENCIA 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCCION ::= ASIGNACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCION ::= WITH 
            {
              AST RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_INSTRUCCIONES ::= LISTA_INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BLOQUE_INSTRUCCIONES ::= begin end pComa 
            {
              ArrayList<AST> RESULT =null;
		RESULT = new ArrayList<AST>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE_INSTRUCCIONES ::= begin LISTA_INSTRUCCIONES end pComa 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MAIN ::= begin end punto 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Main(new ArrayList<AST>(), eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MAIN ::= begin LISTA_INSTRUCCIONES end punto 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		RESULT = new Main(e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MAIN",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RECORDS ::= identificador dosPuntos TIPO pComa 
            {
              Registro RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Registro(e1, e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RECORDS",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_RECORDS ::= RECORDS 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Registro e = (Registro)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Registro>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_RECORDS ::= LISTA_RECORDS RECORDS 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Registro e1 = (Registro)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RECORDS",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REGISTRO ::= record LISTA_RECORDS end 
            {
              ArrayList<Registro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGISTRO",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO_FUNCION ::= BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO_FUNCION ::= VARINIT BLOQUE_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_PARAMETROS ::= var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(e1, e, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_PARAMETROS ::= LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Parametro>(); RESULT.add(new Parametro(e1, e, false, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa var LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Parametro(e2, e1, true, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_PARAMETROS ::= LISTA_PARAMETROS pComa LISTA_IDENTIFICADORES dosPuntos TIPO 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Parametro(e2, e1, false, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROS ::= parenI parenD 
            {
              ArrayList<Parametro> RESULT =null;
		RESULT = new ArrayList<Parametro>();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS ::= parenI LISTA_PARAMETROS parenD 
            {
              ArrayList<Parametro> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Parametro> e = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PROCEDURE ::= procedure identificador PARAMETROS pComa CUERPO_FUNCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDURE",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, new ArrayList<AST>(), eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= function identificador PARAMETROS dosPuntos TIPO pComa VARINIT BLOQUE_INSTRUCCIONES 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<Parametro> e1 = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e2 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e3 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e4 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Funcion(e, e1, e2, e4, e3, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCION",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METHOD_LIST ::= PROCEDURE 
            {
              ArrayList<AST> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METHOD_LIST ::= FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METHOD_LIST ::= METHOD_LIST PROCEDURE 
            {
              ArrayList<AST> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // METHOD_LIST ::= METHOD_LIST FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(e1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SECCION_FUNCION ::= MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SECCION_FUNCION ::= METHOD_LIST MAIN 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_FUNCION",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionVar(e1, e, e2, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_VAR ::= VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VAR ::= DECLARACION_VAR VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARINIT ::= var DECLARACION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARINIT",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SECCION_VAR ::= SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SECCION_VAR ::= VARINIT SECCION_FUNCION 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_VAR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONST ::= LISTA_IDENTIFICADORES dosPuntos TIPO igual EXPRESION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new DeclaracionConstante(e1, e, e2, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONST",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_CONST ::= CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<AST>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_CONST ::= DECLARACION_CONST CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CONST",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SECCION_CONST ::= SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SECCION_CONST ::= constante DECLARACION_CONST SECCION_VAR 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_CONST",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= REGISTRO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Registro> e = (ArrayList<Registro>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= ARRAY_DECLARATION_MULTI 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= ARRAY_DECLARATION 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; 
        Collections.reverse(RESULT.getDimensiones());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= parenI LISTA_EXPRESION parenD 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = new Tipo(Tipo.tipo.ENUMERADO, null, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= LOWER_LIMIT tresP UPPER_LIMIT 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.RANGE, null, e1, e2);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.OBJETO, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_PRIMITIVO ::= record 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.RECORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_PRIMITIVO ::= string 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.STRING);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_PRIMITIVO ::= word 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.WORD);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_PRIMITIVO ::= bool 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.BOOLEAN);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_PRIMITIVO ::= character 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.CHAR);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_PRIMITIVO ::= real 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.REAL);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_PRIMITIVO ::= integer 
            {
              Tipo RESULT =null;
		RESULT = new Tipo(Tipo.tipo.INTEGER);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MEMORIA_VIRTUAL ::= malloc parenI EXPRESION parenD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 RESULT = new Malloc(e, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MEMORIA_VIRTUAL ::= sizeof parenI EXPRESION parenD 
            {
              Expresion RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MEMORIA_VIRTUAL",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_EXPRESION ::= EXPRESION 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(e); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_EXPRESION ::= LISTA_EXPRESION coma EXPRESION 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESION",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIABLE ::= VARIABLE punto identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e; RESULT.add(new Identificador(e1, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIABLE ::= VARIABLE parenI LISTA_EXPRESION parenD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLE ::= VARIABLE corI LISTA_EXPRESION corD 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> e1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e; RESULT.add(new AccesoArreglo(e1));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLE ::= identificador 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(new Identificador(e, eleft, eright)); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VARIABLE",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_IDENTIFICADORES ::= identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<String>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_IDENTIFICADORES ::= LISTA_IDENTIFICADORES coma identificador 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_IDENTIFICADORES",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_RANGO_ARRAY ::= RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<Dimension>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_RANGO_ARRAY ::= LISTA_RANGO_ARRAY coma RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Dimension e1 = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_RANGO_ARRAY",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARRAY_MULTI ::= RANGO_ARRAY coma LISTA_RANGO_ARRAY 
            {
              ArrayList<Dimension> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Dimension> e1 = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = e1; RESULT.add(0, e);  
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_MULTI",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARRAY_DECLARATION_MULTI ::= array corI ARRAY_MULTI corD of TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Dimension> e = (ArrayList<Dimension>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new Tipo(Tipo.tipo.ARREGLO, e1.getType(), null, e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION_MULTI",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RANGO_ARRAY ::= EXPRESION dosP EXPRESION 
            {
              Dimension RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Dimension(e, e1, eleft, eright); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RANGO_ARRAY",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of identificador 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                                ArrayList<Dimension> dims = new ArrayList<>(); dims.add(e);  
                                RESULT = new Tipo(Tipo.tipo.ARREGLO, Tipo.tipo.OBJETO, e1, dims);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of TIPO_PRIMITIVO 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 
                                ArrayList<Dimension> dims = new ArrayList<>(); dims.add(e);  
                                RESULT = new Tipo(Tipo.tipo.ARREGLO, e1.getType(), null, dims);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARRAY_DECLARATION ::= array corI RANGO_ARRAY corD of ARRAY_DECLARATION 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Dimension e = (Dimension)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = e1;
                                RESULT.getDimensiones().add(e);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_DECLARATION",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION_MULTI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARRAY_TYPE ::= LISTA_IDENTIFICADORES igual ARRAY_DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UPPER_LIMIT ::= EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("UPPER_LIMIT",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LOWER_LIMIT ::= EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LOWER_LIMIT",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_DECLARACION ::= LISTA_IDENTIFICADORES igual TIPO 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new DeclaracionType(e1, e, eleft, eright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_TIPOS ::= TIPO_DECLARACION pComa 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_TIPOS",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_DECLARACION_TIPOS ::= DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = new ArrayList<>(); RESULT.add(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_DECLARACION_TIPOS ::= LISTA_DECLARACION_TIPOS DECLARACION_TIPOS 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.add(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION_TIPOS",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCION_TIPO ::= SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SECCION_TIPO ::= type LISTA_DECLARACION_TIPOS SECCION_CONST 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e; RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SECCION_TIPO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // USES ::= SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // USES ::= uses LISTA_IDENTIFICADORES pComa SECCION_TIPO 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = e1;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("USES",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= program identificador pComa USES 
            {
              ArrayList<AST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e1 = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new ArrayList<AST>(); RESULT.add(new Program(e)); RESULT.addAll(e1);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROGRAM",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<AST> e = (ArrayList<AST>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 System.out.println("Termino Correctamente"); parser.tree = new Tree(e);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

